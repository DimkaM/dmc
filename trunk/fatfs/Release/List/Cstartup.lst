###############################################################################
#                                                                             #
#     IAR Systems Z80/64180 Assembler V4.06A/WIN 05/Oct/2011  21:42:39        #
#     Copyright 2001 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  z80                                              #
#           Source file   =  C:\Users\DimkaM\Documents\projects\fatfs\Cstartup.s01#
#           List file     =  C:\Users\DimkaM\Documents\projects\fatfs\Release\List\Cstartup.lst#
#           Object file   =  C:\Users\DimkaM\Documents\projects\fatfs\Release\Obj\Cstartup.r01#
#           Command line  =  -v0 -uu                                          #
#                            -OC:\Users\DimkaM\Documents\projects\fatfs\Release\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LC:\Users\DimkaM\Documents\projects\fatfs\Release\List\ #
#                            -T -t8 -IC:\Program Files\IAR ewz80\z80\inc\     #
#                            C:\Users\DimkaM\Documents\projects\fatfs\Cstartup.s01 #
#                                                                             #
###############################################################################

      1    000000          ;
      2    000000          ;       $Id: Cstartup.s01 1.24 2001/01/04 12:19:06
                            IPEO Exp $
      3    000000          ;
      4    000000          
      5    000000          ;---------------------------------------------------
                           -------;
      6    000000          ;                                                   
                                  ;
      7    000000          ;                   CSTARTUP.S01                    
                                  ;
      8    000000          ;                                                   
                                  ;
      9    000000          ; This file contains the Z80/HD64180 C startup
                            routine     ;
     10    000000          ; and must usually be tailored to suit customer's
                            hardware.;
     11    000000          ;                                                   
                                  ;
     12    000000          ; Version:  4.00 [ 28/Apr/94 IJAR]                  
                                  ;
     13    000000          ;---------------------------------------------------
                           -------;
     14    000000          
     15    000000          #define proc64180 ((__TID__&0x010)==0x010)
     16    000000          
     17    000000                  NAME    CSTARTUP
     18    000000          
     19    000000                  EXTERN  main                    ; where to
                            begin execution
     20    000000                  EXTERN  ?C_EXIT                 ; where to
                            go when program is done
     21    000000          
     22    000000          
     23    000000          ;---------------------------------------------------
                           ------------;
     24    000000          ;  CSTACK - The C stack segment                     
                                       ;
     25    000000          ;                                                   
                                       ;
     26    000000          ;  Please, see in the link file lnk*.xcl how to
                            increment       ;
     27    000000          ;  the stack size without having to reassemble
                            cstartup.s01 !   ;
     28    000000          ;---------------------------------------------------
                           ------------;
     29    000000          
     30    000000                  RSEG    CSTACK
     31    000000                  DEFS    0                       ; a bare
                                                                    minimum
                                                                    !
     32    000000          
     33    000000          ;---------------------------------------------------
                           ------------;
     34    000000          ;  Forward declarations of segment used during
                            initialization   ;
     35    000000          ;---------------------------------------------------
                           ------------;
     36    000000                  RSEG    UDATA0
     37    000000                  RSEG    IDATA0
     38    000000                  RSEG    ECSTR
     39    000000                  RSEG    TEMP
     40    000000                  RSEG    DATA0
     41    000000                  RSEG    WCSTR
     42    000000          
     43    000000                  RSEG    CDATA0
     44    000000                  RSEG    CCSTR
     45    000000                  RSEG    CONST
     46    000000                  RSEG    CSTR
     47    000000          
     48    000000                  ASEG
     49    000000                  ORG     0
     50    000000          init_A
     51    000000          ;       JP      init_C
     52    000000          
     53    000000          ;---------------------------------------------------
                           ------------;
     54    000000          ;  RCODE - where the execution actually begins      
                                       ;
     55    000000          ;---------------------------------------------------
                           ------------;
     56    000000                  RSEG    RCODE
     57    000000          init_C
     58    000000          ;       LD      SP,.SFE.(CSTACK-1)      ; from high
                            to low address
     59    000000          
     60    000000          ;---------------------------------------------------
                           ------------;
     61    000000          ; If hardware must be initiated from assembly or if
                            interrupts  ;
     62    000000          ; should be on when reaching main, this is the place
                            to insert  ;
     63    000000          ; such code.                                        
                                       ;
     64    000000          ;---------------------------------------------------
                           ------------;
     65    000000          
     66    000000          
     67    000000          ;---------------------------------------------------
                           ------------;
     68    000000          ; If it is not a requirement that static/global data
                            is set     ;
     69    000000          ; to zero or to some explicit value at startup, the
                            following   ;
     70    000000          ; line refering to seg_init can be deleted, or
                            commented.       ;
     71    000000          ;---------------------------------------------------
                           ------------;
     72    000000          
     73    000000          ;       CALL    seg_init
     74    000000          
     75    000000          #ifdef banking
     80    000000          #else
     81    000000          ;       CALL    main                    ; non-banked
                            call to main()
     82    000000          #endif
     83    000000          
     84    000000          ;---------------------------------------------------
                           ------------;
     85    000000          ; Now when we are ready with our C program we must
                            perform a    ;
     86    000000          ; system-dependent action.  In this case we just
                            stop.          ;
     87    000000          ;---------------------------------------------------
                           ------------;
     88    000000          ; DO NOT CHANGE THE NEXT LINE OF CSTARTUP IF YOU
                            WANT TO RUN    ;
     89    000000          ; YOUR SOFTWARE WITH THE HELP OF THE C-SPY HLL
                            DEBUGGER.        ;
     90    000000          ;---------------------------------------------------
                           ------------;
     91    000000          
     92    000000          ;       JP      ?C_EXIT 
     93    000000          
     94    000000          ;---------------------------------------------------
                           ------------;
     95    000000          ; Copy initialized PROMmed code to shadow RAM and
                            clear         ;
     96    000000          ; uninitialized variables.                          
                                       ;
     97    000000          ;---------------------------------------------------
                           ------------;
     98    000000          
     99    000000          seg_init
    100    000000          
    101    000000          ;---------------------------------------;
    102    000000          ; Zero out UDATA0                       ;
    103    000000          ;---------------------------------------;
    104    000000          ;       LD      HL,.SFE.(UDATA0)
    105    000000          ;       LD      DE,.SFB.(UDATA0)
    106    000000          ;       CALL    zero_mem
    107    000000          
    108    000000          ;---------------------------------------;
    109    000000          ; Copy CDATA0 into IDATA0               ;
    110    000000          ;---------------------------------------;
    111    000000          ;       LD      DE,.SFB.(IDATA0)               
                            ;destination address
    112    000000          ;       LD      HL,.SFE.(CDATA0)
    113    000000          ;       LD      BC,.SFB.(CDATA0)
    114    000000          ;       CALL    copy_mem
    115    000000          
    116    000000          ;---------------------------------------;
    117    000000          ; Copy CCSTR into ECSTR                 ;
    118    000000          ;---------------------------------------;
    119    000000          ;       LD      DE,.SFB.(ECSTR)                
                            ;destination address
    120    000000          ;       LD      HL,.SFE.(CCSTR)
    121    000000          ;       LD      BC,.SFB.(CCSTR)
    122    000000          
    123    000000                  ; Just fall in to the copy_mem function
    124    000000          
    125    000000          ;---------------------------------------;
    126    000000          ; Copy memory                           ;
    127    000000          ;---------------------------------------;
    128    000000          ;copy_mem
    129    000000          ;       XOR     A
    130    000000          ;       SBC     HL,BC
    131    000000          ;       PUSH    BC
    132    000000          ;       LD      C,L
    133    000000          ;       LD      B,H                             ; BC
                            - that many bytes
    134    000000          ;       POP     HL                              ;
                            source address
    135    000000          ;       RET     Z                               ; If
                            block size = 0 return now
    136    000000          ;       LDIR
    137    000000          ;       RET
    138    000000          
    139    000000          ;---------------------------------------;
    140    000000          ; Clear memory                          ;
    141    000000          ;---------------------------------------;
    142    000000          ;zero_mem
    143    000000          ;       XOR     A
    144    000000          ;again  PUSH    HL
    145    000000          ;       SBC     HL,DE
    146    000000          ;       POP     HL
    147    000000          ;       RET     Z
    148    000000          ;       LD      (DE),A
    149    000000          ;       INC     DE
    150    000000          ;       JR      again
    151    000000          
    152    000000          ;---------------------------------------------------
                           ------------;
    153    000000          ; Interrupt vectors must be inserted here by the
                            user.          ;
    154    000000          ;---------------------------------------------------
                           ------------;
    155    000000          
    156    000000                  COMMON  INTVEC
    157    000000          
    158    000000                  ENDMOD  init_A
##############################
#          CRC:EFC0          #
#        Errors:   0         #
#        Warnings: 0         #
#          Bytes: 0          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems Z80/64180 Assembler V4.06A/WIN 05/Oct/2011  21:42:39        #
#     Copyright 2001 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  z80                                              #
#           Source file   =  C:\Users\DimkaM\Documents\projects\fatfs\Cstartup.s01#
#           List file     =  C:\Users\DimkaM\Documents\projects\fatfs\Release\List\Cstartup.lst#
#           Object file   =  C:\Users\DimkaM\Documents\projects\fatfs\Release\Obj\Cstartup.r01#
#           Command line  =  -v0 -uu                                          #
#                            -OC:\Users\DimkaM\Documents\projects\fatfs\Release\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LC:\Users\DimkaM\Documents\projects\fatfs\Release\List\ #
#                            -T -t8 -IC:\Program Files\IAR ewz80\z80\inc\     #
#                            C:\Users\DimkaM\Documents\projects\fatfs\Cstartup.s01 #
#                                                                             #
###############################################################################

    159    000000          
    160    000000          ;---------------------------------------------------
                           ------------;
    161    000000          ; Function/module: exit (int code)                  
                                       ;
    162    000000          ;                                                   
                                       ;
    163    000000          ; When C-SPY is used this code will automatically be
                            replaced   ;
    164    000000          ; by a 'debug' version of exit().                   
                                       ;
    165    000000          ;---------------------------------------------------
                           ------------;
    166    000000                  MODULE  exit
    167    000000          
    168    000000                  PUBLIC  exit
    169    000000                  PUBLIC  ?C_EXIT
    170    000000          
    171    000000                  RSEG    RCODE
    172    000000          
    173    000000          ?C_EXIT
    174    000000          exit    EQU     ?C_EXIT
    175    000000          
    176    000000          ;---------------------------------------------------
                           -----------;
    177    000000          ; The next line can be replaced by user defined
                            code.          ;
    178    000000          ;---------------------------------------------------
                           -----------;
    179    000000          ;        NOP
    180    000000          ;       JR      $                       ; loop
                            forever
    181    000000          
    182    000000                  END
##############################
#          CRC:56CB          #
#        Errors:   0         #
#        Warnings: 0         #
#          Bytes: 0          #
#     Modules:        2      #
#     Total errors:   0      #
#     Total warnings: 0      #
##############################



