##############################################################################
#                                                                            #
# IAR Z80/64180 C-Compiler V4.06A/WIN                                        #
#                                                                            #
#       Compile time  =  11/Jan/2012  15:47:47                               #
#       Target option =  Z80                                                 #
#       Memory model  =  large                                               #
#       Source file   =  i:\zx\projects\fatfs\ff.c                           #
#       List file     =  i:\zx\projects\fatfs\release\list\ff.lst            #
#       Object file   =  i:\zx\projects\fatfs\release\obj\ff.r01             #
#       ASM file      =  i:\zx\projects\fatfs\release\list\ff.s01            #
#       Command line  =  -v0 -ml -uua -OI:\zx\projects\fatfs\Release\Obj\    #
#                        -e -c -K -gA -z9 -RCODE                             #
#                        -LI:\zx\projects\fatfs\Release\List\ -q -T -t8      #
#                        -AI:\zx\projects\fatfs\Release\List\                #
#                        -NI:\zx\projects\fatfs\Release\List\ -X             #
#                        -IC:\Program Files\IAR ewz80\z80\inc\               #
#                        I:\zx\projects\fatfs\ff.c                           #
#                                                                            #
#                           Copyright 2001 IAR Systems. All rights reserved. #
##############################################################################

   \   0000                    NAME    ff(16)
   \   0000                    RSEG    CODE(0)
   \   0000                    RSEG    CSTR(0)
   \   0000                    EXTERN  CurrVol
   \   0000                    EXTERN  FatFs
   \   0000                    EXTERN  Fsid
   \   0000                    EXTERN  LD_CLUST
   \   0000                    PUBLIC  clust2sect
   \   0000                    EXTERN  dio_par
   \   0000                    EXTERN  disk_initialize
   \   0000                    EXTERN  disk_ioctl
   \   0000                    EXTERN  disk_read
   \   0000                    EXTERN  disk_write
   \   0000                    EXTERN  ds_m
   \   0000                    PUBLIC  f_chdir
   \   0000                    PUBLIC  f_chdrive
   \   0000                    PUBLIC  f_chmod
   \   0000                    PUBLIC  f_close
   \   0000                    PUBLIC  f_getfree
   \   0000                    PUBLIC  f_lseek
   \   0000                    PUBLIC  f_mkdir
   \   0000                    PUBLIC  f_mount
   \   0000                    PUBLIC  f_open
   \   0000                    PUBLIC  f_opendir
   \   0000                    PUBLIC  f_read
   \   0000                    PUBLIC  f_readdir
   \   0000                    PUBLIC  f_rename
   \   0000                    PUBLIC  f_stat
   \   0000                    PUBLIC  f_sync
   \   0000                    PUBLIC  f_truncate
   \   0000                    PUBLIC  f_unlink
   \   0000                    PUBLIC  f_utime
   \   0000                    PUBLIC  f_write
   \   0000                    PUBLIC  get_fat
   \   0000                    EXTERN  get_fattime
   \   0000                    PUBLIC  put_fat
   \   0000                    EXTERN  ?CLZ80L_4_06_L00
   \   0000                    EXTERN  ?US_RSH_L02
   \   0000                    EXTERN  ?L_LSH_L03
   \   0000                    EXTERN  ?UL_RSH_L03
   \   0000                    EXTERN  ?L_MUL_L03
   \   0000                    EXTERN  ?UL_DIV_L03
   \   0000                    EXTERN  ?L_AND_L03
   \   0000                    EXTERN  ?L_INC_L03
   \   0000                    EXTERN  ?L_DEC_L03
   \   0000                    EXTERN  ?L_NOT_L03
   \   0000                    EXTERN  ?L_MULASG_L03
   \   0000                    EXTERN  ?L_ADDASG_L03
   \   0000                    EXTERN  ?L_SUBASG_L03
   \   0000                    EXTERN  ?L_ORASG_L03
   \   0000                    EXTERN  ?L_INCASG_L03
   \   0000                    EXTERN  ?ENT_PARM_DIRECT_L09
   \   0000                    EXTERN  ?ENT_AUTO_DIRECT_L09
   \   0000                    EXTERN  ?LEAVE_DIRECT_L09
   \   0000                    EXTERN  ?LEAVE_32_L09
   \   0000                    EXTERN  ?MEMSET_L11
   \   0000                    EXTERN  ?MEMCMP_L11
   \   0000                    EXTERN  ?STRCHR_L11
   \   0000                    RSEG    CODE
      1          /*----------------------------------------------------------------------------/
      2          /  FatFs - FAT file system module  R0.08b                 (C)ChaN, 2011
      3          /-----------------------------------------------------------------------------/
      4          / FatFs module is a generic FAT file system module for small embedded systems.
      5          / This is a free software that opened for education, research and commercial
      6          / developments under license policy of following terms.
      7          /
      8          /  Copyright (C) 2011, ChaN, all right reserved.
      9          /
     10          / * The FatFs module is a free software and there is NO WARRANTY.
     11          / * No restriction on use. You can use, modify and redistribute it for
     12          /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
     13          / * Redistributions of source code must retain the above copyright notice.
     14          /
     15          /-----------------------------------------------------------------------------/
     16          / Feb 26,'06 R0.00  Prototype.
     17          /
     18          / Apr 29,'06 R0.01  First stable version.
     19          /
     20          / Jun 01,'06 R0.02  Added FAT12 support.
     21          /                   Removed unbuffered mode.
     22          /                   Fixed a problem on small (<32M) partition.
     23          / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
     24          /
     25          / Sep 22,'06 R0.03  Added f_rename().
     26          /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
     27          / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
     28          /                   Fixed f_mkdir() creates incorrect directory on FAT32.
     29          /
     30          / Feb 04,'07 R0.04  Supported multiple drive system.
     31          /                   Changed some interfaces for multiple drive system.
     32          /                   Changed f_mountdrv() to f_mount().
     33          /                   Added f_mkfs().
     34          / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
     35          /                   Added a capability of extending file size to f_lseek().
     36          /                   Added minimization level 3.
     37          /                   Fixed an endian sensitive code in f_mkfs().
     38          / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
     39          /                   Added FSInfo support.
     40          /                   Fixed DBCS name can result FR_INVALID_NAME.
     41          /                   Fixed short seek (<= csize) collapses the file object.
     42          /
     43          / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
     44          /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
     45          /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
     46          / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
     47          /                   Fixed off by one error at FAT sub-type determination.
     48          /                   Fixed btr in f_read() can be mistruncated.
     49          /                   Fixed cached sector is not flushed when create and close without write.
     50          /
     51          / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
     52          /                   Improved performance of f_lseek() on moving to the same or following cluster.
     53          /
     54          / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
     55          /                   Added long file name feature.
     56          /                   Added multiple code page feature.
     57          /                   Added re-entrancy for multitask operation.
     58          /                   Added auto cluster size selection to f_mkfs().
     59          /                   Added rewind option to f_readdir().
     60          /                   Changed result code of critical errors.
     61          /                   Renamed string functions to avoid name collision.
     62          / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
     63          /                   Added multiple sector size feature.
     64          / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
     65          /                   Fixed wrong cache control in f_lseek().
     66          /                   Added relative path feature.
     67          /                   Added f_chdir() and f_chdrive().
     68          /                   Added proper case conversion to extended char.
     69          / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
     70          /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
     71          /                   Fixed name matching error on the 13 char boundary.
     72          /                   Added a configuration option, _LFN_UNICODE.
     73          /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
     74          /
     75          / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
     76          /                   Added file lock feature. (_FS_SHARE)
     77          /                   Added fast seek feature. (_USE_FASTSEEK)
     78          /                   Changed some types on the API, XCHAR->TCHAR.
     79          /                   Changed fname member in the FILINFO structure on Unicode cfg.
     80          /                   String functions support UTF-8 encoding files on Unicode cfg.
     81          / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
     82          /                   Added sector erase feature. (_USE_ERASE)
     83          /                   Moved file lock semaphore table from fs object to the bss.
     84          /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name contains ';'.
     85          /                   Fixed f_mkfs() creates wrong FAT32 volume.
     86          / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
     87          /                   f_lseek() reports required table size on creating CLMP.
     88          /                   Extended format syntax of f_printf function.
     89          /                   Ignores duplicated directory separators in given path names.
     90          /---------------------------------------------------------------------------*/
     91          
     92          #include "ff.h"                 /* FatFs configurations and declarations */
     93          #include "diskio.h"             /* Declarations of low level disk I/O functions */
     94          #include <string.h>
     95          
     96          /*--------------------------------------------------------------------------
     97          
     98             Module Private Definitions
     99          
    100          ---------------------------------------------------------------------------*/
    101          
    102          #if _FATFS != 8237
    104          #endif
    105          
    106          
    107          /* Definitions on sector size */
    108          #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
    110          #endif
    111          #if _MAX_SS != 512
    113          #else
    114          #define SS(fs)  512U                    /* Fixed sector size */
    115          #endif
    116          
    117          
    118          /* Reentrancy related */
    119          #if _FS_REENTRANT
    120          #if _USE_LFN == 1
    122          #endif
    125          #else
    126          #define ENTER_FF(fs)
    127          #define LEAVE_FF(fs, res)       return res
    128          #endif
    129          
    130          #define ABORT(fs, res)          { fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
    131          
    132          
    133          /* File shareing feature */
    134          #if _FS_SHARE
    135          #if _FS_READONLY
    137          #endif
    144          #endif
    145          
    146          
    147          /* Misc definitions */
    148          //#define LD_CLUST(dir) (((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
    149          #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16);}
    150          
    151          
    152          /* DBCS code ranges and SBCS extend char conversion table */
    153          
    154          #if _CODE_PAGE == 932   /* Japanese Shift-JIS */
    164          #elif _CODE_PAGE == 936 /* Simplified Chinese GBK */
    172          #elif _CODE_PAGE == 949 /* Korean */
    182          #elif _CODE_PAGE == 950 /* Traditional Chinese Big5 */
    190          #elif _CODE_PAGE == 437 /* U.S. (OEM) */
    197          #elif _CODE_PAGE == 720 /* Arabic (OEM) */
    204          #elif _CODE_PAGE == 737 /* Greek (OEM) */
    211          #elif _CODE_PAGE == 775 /* Baltic (OEM) */
    218          #elif _CODE_PAGE == 850 /* Multilingual Latin 1 (OEM) */
    225          #elif _CODE_PAGE == 852 /* Latin 2 (OEM) */
    232          #elif _CODE_PAGE == 855 /* Cyrillic (OEM) */
    239          #elif _CODE_PAGE == 857 /* Turkish (OEM) */
    246          #elif _CODE_PAGE == 858 /* Multilingual Latin 1 + Euro (OEM) */
    253          #elif _CODE_PAGE == 862 /* Hebrew (OEM) */
    260          #elif _CODE_PAGE == 866 /* Russian (OEM) */
    267          #elif _CODE_PAGE == 874 /* Thai (OEM, Windows) */
    274          #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
    281          #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
    288          #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
    295          #elif _CODE_PAGE == 1253 /* Greek (Windows) */
    302          #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
    309          #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
    316          #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
    323          #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
    330          #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
    337          #elif _CODE_PAGE == 1   /* ASCII (for only non-LFN cfg) */
    338          #if _USE_LFN
    340          #endif
    341          #define _DF1S   0
    342          
    343          #else
    346          #endif
    347          
    348          
    349          /* Character code support macros */
    350          #define IsUpper(c)      (((c)>='A')&&((c)<='Z'))
    351          #define IsLower(c)      (((c)>='a')&&((c)<='z'))
    352          #define IsDigit(c)      (((c)>='0')&&((c)<='9'))
    353          
    354          #if _DF1S               /* Code page is DBCS */
    356          #ifdef _DF2S    /* Two 1st byte areas */
    358          #else                   /* One 1st byte area */
    360          #endif
    362          #ifdef _DS3S    /* Three 2nd byte areas */
    364          #else                   /* Two 2nd byte areas */
    366          #endif
    368          #else                   /* Code page is SBCS */
    369          
    370          #define IsDBCS1(c)      0
    371          #define IsDBCS2(c)      0
    372          
    373          #endif /* _DF1S */
    374          
    375          
    376          /* Name status flags */
    377          #define NS                      11              /* Index of name status byte in fn[] */
    378          #define NS_LOSS         0x01    /* Out of 8.3 format */
    379          #define NS_LFN          0x02    /* Force to create LFN entry */
    380          #define NS_LAST         0x04    /* Last segment */
    381          #define NS_BODY         0x08    /* Lower case flag (body) */
    382          #define NS_EXT          0x10    /* Lower case flag (ext) */
    383          #define NS_DOT          0x20    /* Dot entry */
    384          
    385          
    386          /* FAT sub-type boundaries */
    387          /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
    388          #define MIN_FAT16       4086    /* Minimum number of clusters for FAT16 */
    389          #define MIN_FAT32       65526   /* Minimum number of clusters for FAT32 */
    390          
    391          
    392          /* FatFs refers the members in the FAT structures as byte array instead of
    393          / structure member because the structure is not binary compatible between
    394          / different platforms */
    395          
    396          #define BS_jmpBoot                      0       /* Jump instruction (3) */
    397          #define BS_OEMName                      3       /* OEM name (8) */
    398          #define BPB_BytsPerSec          11      /* Sector size [byte] (2) */
    399          #define BPB_SecPerClus          13      /* Cluster size [sector] (1) */
    400          #define BPB_RsvdSecCnt          14      /* Size of reserved area [sector] (2) */
    401          #define BPB_NumFATs                     16      /* Number of FAT copies (1) */
    402          #define BPB_RootEntCnt          17      /* Number of root dir entries for FAT12/16 (2) */
    403          #define BPB_TotSec16            19      /* Volume size [sector] (2) */
    404          #define BPB_Media                       21      /* Media descriptor (1) */
    405          #define BPB_FATSz16                     22      /* FAT size [sector] (2) */
    406          #define BPB_SecPerTrk           24      /* Track size [sector] (2) */
    407          #define BPB_NumHeads            26      /* Number of heads (2) */
    408          #define BPB_HiddSec                     28      /* Number of special hidden sectors (4) */
    409          #define BPB_TotSec32            32      /* Volume size [sector] (4) */
    410          #define BS_DrvNum                       36      /* Physical drive number (2) */
    411          #define BS_BootSig                      38      /* Extended boot signature (1) */
    412          #define BS_VolID                        39      /* Volume serial number (4) */
    413          #define BS_VolLab                       43      /* Volume label (8) */
    414          #define BS_FilSysType           54      /* File system type (1) */
    415          #define BPB_FATSz32                     36      /* FAT size [sector] (4) */
    416          #define BPB_ExtFlags            40      /* Extended flags (2) */
    417          #define BPB_FSVer                       42      /* File system version (2) */
    418          #define BPB_RootClus            44      /* Root dir first cluster (4) */
    419          #define BPB_FSInfo                      48      /* Offset of FSInfo sector (2) */
    420          #define BPB_BkBootSec           50      /* Offset of backup boot sectot (2) */
    421          #define BS_DrvNum32                     64      /* Physical drive number (2) */
    422          #define BS_BootSig32            66      /* Extended boot signature (1) */
    423          #define BS_VolID32                      67      /* Volume serial number (4) */
    424          #define BS_VolLab32                     71      /* Volume label (8) */
    425          #define BS_FilSysType32         82      /* File system type (1) */
    426          #define FSI_LeadSig                     0       /* FSI: Leading signature (4) */
    427          #define FSI_StrucSig            484     /* FSI: Structure signature (4) */
    428          #define FSI_Free_Count          488     /* FSI: Number of free clusters (4) */
    429          #define FSI_Nxt_Free            492     /* FSI: Last allocated cluster (4) */
    430          #define MBR_Table                       446     /* MBR: Partition table offset (2) */
    431          #define SZ_PTE                          16      /* MBR: Size of a partition table entry */
    432          #define BS_55AA                         510     /* Boot sector signature (2) */
    433          
    434          #define DIR_Name                        0       /* Short file name (11) */
    435          #define DIR_Attr                        11      /* Attribute (1) */
    436          #define DIR_NTres                       12      /* NT flag (1) */
    437          #define DIR_CrtTime                     14      /* Created time (2) */
    438          #define DIR_CrtDate                     16      /* Created date (2) */
    439          #define DIR_FstClusHI           20      /* Higher 16-bit of first cluster (2) */
    440          #define DIR_WrtTime                     22      /* Modified time (2) */
    441          #define DIR_WrtDate                     24      /* Modified date (2) */
    442          #define DIR_FstClusLO           26      /* Lower 16-bit of first cluster (2) */
    443          #define DIR_FileSize            28      /* File size (4) */
    444          #define LDIR_Ord                        0       /* LFN entry order and LLE flag (1) */
    445          #define LDIR_Attr                       11      /* LFN attribute (1) */
    446          #define LDIR_Type                       12      /* LFN type (1) */
    447          #define LDIR_Chksum                     13      /* Sum of corresponding SFN entry */
    448          #define LDIR_FstClusLO          26      /* Filled by zero (0) */
    449          #define SZ_DIR                          32              /* Size of a directory entry */
    450          #define LLE                                     0x40    /* Last long entry flag in LDIR_Ord */
    451          #define DDE                                     0xE5    /* Deleted directory enrty mark in DIR_Name[0] */
    452          #define NDDE                            0x05    /* Replacement of a character collides with DDE */
    453          
    454          
    455          /*------------------------------------------------------------*/
    456          /* Work area                                                  */
    457          
    458          #if _VOLUMES
    459          extern
    460          FATFS *FatFs[_VOLUMES]; /* Pointer to the file system objects (logical drives) */
    461          #else
    463          #endif
    464          
    465          extern WORD Fsid;                               /* File system mount ID */
    466          
    467          #if _FS_RPATH
    468          extern
    469          BYTE CurrVol;                   /* Current drive */
    470          #endif
    471          
    472          #if _FS_SHARE
    475          #endif
    476          
    477          #if _USE_LFN == 0                       /* No LFN */
    478          #define DEF_NAMEBUF                     BYTE sfn[12]
    479          #define INIT_BUF(dobj)          (dobj).fn = sfn
    480          #define FREE_BUF()
    481          
    482          #elif _USE_LFN == 1                     /* LFN with static LFN working buffer */
    488          #elif _USE_LFN == 2             /* LFN with dynamic LFN working buffer on the stack */
    493          #elif _USE_LFN == 3             /* LFN with dynamic LFN working buffer on the heap */
    500          #else
    502          #endif
    503          
    504          
    505          
    506          
    507          /*--------------------------------------------------------------------------
    508          
    509             Module Private Functions
    510          
    511          ---------------------------------------------------------------------------*/
    512          
    513          extern DWORD LD_CLUST(BYTE *);
    514          
    515          
    516          /*-----------------------------------------------------------------------*/
    517          /* String functions                                                      */
    518          /*-----------------------------------------------------------------------*/
    519          
    520          
    521          /*-----------------------------------------------------------------------*/
    522          /* Request/Release grant to access the volume                            */
    523          /*-----------------------------------------------------------------------*/
    524          #if _FS_REENTRANT
    548          #endif
    549          
    550          
    551          
    552          /*-----------------------------------------------------------------------*/
    553          /* File shareing control functions                                       */
    554          /*-----------------------------------------------------------------------*/
    555          #if _FS_SHARE
    661          #endif
    662          
    663          
    664          
    665          /*-----------------------------------------------------------------------*/
    666          /* Change window offset                                                  */
    667          /*-----------------------------------------------------------------------*/
    668          
    669          static
    670          FRESULT move_window (
    671                  FATFS *fs,              /* File system object */
    672                  DWORD sector    /* Sector number to make appearance in the fs->win[] */
    673          )                                       /* Move to zero only writes back dirty window */
   \   0000            move_window:
   \   0000  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   0003  FAFF              DEFW    65530
   \   0005  FDE5              PUSH    IY
   \   0007  DD6E02            LD      L,(IX+2)
   \   000A  DD6603            LD      H,(IX+3)
   \   000D  E5                PUSH    HL
   \   000E  FDE1              POP     IY
    674          {
    675                  DWORD wsect;
    676          
    677          
   \   0010  FD4E31            LD      C,(IY+49)
   \   0013  FD4632            LD      B,(IY+50)
   \   0016  FD6E2F            LD      L,(IY+47)
   \   0019  FD6630            LD      H,(IY+48)
   \   001C  DD75FA            LD      (IX-6),L
   \   001F  DD74FB            LD      (IX-5),H
   \   0022  DD71FC            LD      (IX-4),C
   \   0025  DD70FD            LD      (IX-3),B
    678                  wsect = fs->winsect;
   \   0028  59                LD      E,C
   \   0029  50                LD      D,B
   \   002A  DD4E08            LD      C,(IX+8)
   \   002D  DD4609            LD      B,(IX+9)
   \   0030  A7                AND     A
   \   0031  ED42              SBC     HL,BC
   \   0033  200C              JR      NZ,?0921
   \   0035  EB                EX      DE,HL
   \   0036  DD4E0A            LD      C,(IX+10)
   \   0039  DD460B            LD      B,(IX+11)
   \   003C  ED42              SBC     HL,BC
   \   003E  CA1C01            JP      Z,?0017
   \   0041            ?0921:
   \   0041            ?0004:
    679                  if (wsect != sector) {  /* Changed current window */
    680          #if !_FS_READONLY
   \   0041  FD7E05            LD      A,(IY+5)
   \   0044  B7                OR      A
   \   0045  CAD900            JP      Z,?0012
   \   0048            ?0006:
    681                          if (fs->wflag) {        /* Write back dirty window if needed */
   \   0048  FD7E01            LD      A,(IY+1)
   \   004B  320000            LD      (dio_par),A
   \   004E  213300            LD      HL,51
   \   0051  FDE5              PUSH    IY
   \   0053  C1                POP     BC
   \   0054  09                ADD     HL,BC
   \   0055  220100            LD      (dio_par+1),HL
   \   0058  210200            LD      HL,2
   \   005B  39                ADD     HL,SP
    682                                  SET_DIO_PAR(fs->drv, fs->win, wsect,1);
   \   005C  CD3B01            CALL    ?1036
   \   005F  B7                OR      A
   \   0060  C20001            JP      NZ,?0922
   \   0063            ?0008:
    683                                  if (disk_write() != RES_OK)
    684                                          return FR_DISK_ERR;
   \   0063            ?0009:
   \   0063  FD7705            LD      (IY+5),A
    685                                  fs->wflag = 0;
   \   0066  FD6E21            LD      L,(IY+33)
   \   0069  FD6622            LD      H,(IY+34)
   \   006C  E5                PUSH    HL
   \   006D  FD6E1F            LD      L,(IY+31)
   \   0070  FD6620            LD      H,(IY+32)
   \   0073  E5                PUSH    HL
   \   0074  FD6E23            LD      L,(IY+35)
   \   0077  FD6624            LD      H,(IY+36)
   \   007A  C1                POP     BC
   \   007B  09                ADD     HL,BC
   \   007C  EB                EX      DE,HL
   \   007D  FD6E25            LD      L,(IY+37)
   \   0080  FD6626            LD      H,(IY+38)
   \   0083  C1                POP     BC
   \   0084  ED4A              ADC     HL,BC
   \   0086  E5                PUSH    HL
   \   0087  D5                PUSH    DE
   \   0088  A7                AND     A
   \   0089  DD6EFA            LD      L,(IX-6)
   \   008C  DD66FB            LD      H,(IX-5)
   \   008F  C1                POP     BC
   \   0090  ED42              SBC     HL,BC
   \   0092  DD6EFC            LD      L,(IX-4)
   \   0095  DD66FD            LD      H,(IX-3)
   \   0098  C1                POP     BC
   \   0099  ED42              SBC     HL,BC
   \   009B  303C              JR      NC,?0012
   \   009D            ?0010:
    686                                  if (wsect < (fs->fatbase + fs->fsize)) {        /* In FAT area */
    687                                          BYTE nf;
   \   009D  FD4604            LD      B,(IY+4)
   \   00A0  DD70FE            LD      (IX-2),B
   \   00A3            ?0013:
   \   00A3  3E01              LD      A,1
   \   00A5  DDBEFE            CP      (IX-2)
   \   00A8  302F              JR      NC,?0012
   \   00AA            ?0014:
    688                                          for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
   \   00AA  210200            LD      HL,2
   \   00AD  39                ADD     HL,SP
   \   00AE  FD4E21            LD      C,(IY+33)
   \   00B1  FD4622            LD      B,(IY+34)
   \   00B4  FD5E1F            LD      E,(IY+31)
   \   00B7  FD5620            LD      D,(IY+32)
   \   00BA  CD0000            CALL    ?L_ADDASG_L03
    689                                                  wsect += fs->fsize;
   \   00BD  FD7E01            LD      A,(IY+1)
   \   00C0  320000            LD      (dio_par),A
   \   00C3  213300            LD      HL,51
   \   00C6  FDE5              PUSH    IY
   \   00C8  C1                POP     BC
   \   00C9  09                ADD     HL,BC
   \   00CA  220100            LD      (dio_par+1),HL
   \   00CD  210200            LD      HL,2
   \   00D0  39                ADD     HL,SP
    690                                                  SET_DIO_PAR(fs->drv, fs->win, wsect,1);
   \   00D1  CD3B01            CALL    ?1036
   \   00D4  DD35FE            DEC     (IX-2)
    691                                                  disk_write();
    692                                          }
   \   00D7  18CA              JR      ?0013
   \   00D9            ?0012:
   \   00D9            ?0011:
   \   00D9            ?0007:
    693                                  }
    694                          }
    695          #endif
   \   00D9  DD7E08            LD      A,(IX+8)
   \   00DC  DDB609            OR      (IX+9)
   \   00DF  DDB60A            OR      (IX+10)
   \   00E2  DDB60B            OR      (IX+11)
   \   00E5  2835              JR      Z,?0017
   \   00E7            ?0016:
    696                          if (sector) {
   \   00E7  FD7E01            LD      A,(IY+1)
   \   00EA  320000            LD      (dio_par),A
   \   00ED  213300            LD      HL,51
   \   00F0  FDE5              PUSH    IY
   \   00F2  C1                POP     BC
   \   00F3  09                ADD     HL,BC
   \   00F4  220100            LD      (dio_par+1),HL
   \   00F7  211000            LD      HL,16
   \   00FA  39                ADD     HL,SP
    697                                  SET_DIO_PAR(fs->drv, fs->win, sector,1);
   \   00FB  CD4601            CALL    ?1041
   \   00FE  2804              JR      Z,?0019
   \   0100            ?0018:
    698                                  if (disk_read() != RES_OK)
   \   0100            ?0922:
   \   0100  3E01              LD      A,1
    699                                          return FR_DISK_ERR;
   \   0102  1819              JR      ?0020
   \   0104            ?0019:
   \   0104  DD4E0A            LD      C,(IX+10)
   \   0107  DD460B            LD      B,(IX+11)
   \   010A  DD6E08            LD      L,(IX+8)
   \   010D  FD752F            LD      (IY+47),L
   \   0110  DD6609            LD      H,(IX+9)
   \   0113  FD7430            LD      (IY+48),H
   \   0116  FD7131            LD      (IY+49),C
   \   0119  FD7032            LD      (IY+50),B
   \   011C            ?0017:
   \   011C            ?0005:
    700                                  fs->winsect = sector;
    701                          }
    702                  }
    703          
   \   011C  AF                XOR     A
    704                  return FR_OK;
   \   011D            ?0020:
   \   011D  FDE1              POP     IY
   \   011F  C30000            JP      ?LEAVE_DIRECT_L09
   \   0122            ?1038:
   \   0122  FD6E00            LD      L,(IY+0)
   \   0125  FD6601            LD      H,(IY+1)
   \   0128  23                INC     HL
   \   0129  7E                LD      A,(HL)
   \   012A  320000            LD      (dio_par),A
   \   012D  212000            LD      HL,32
   \   0130  FDE5              PUSH    IY
   \   0132  C1                POP     BC
   \   0133  09                ADD     HL,BC
   \   0134  220100            LD      (dio_par+1),HL
   \   0137  211600            LD      HL,22
   \   013A            ?1037:
   \   013A  09                ADD     HL,BC
   \   013B            ?1036:
   \   013B  220300            LD      (dio_par+3),HL
   \   013E  3E01              LD      A,1
   \   0140            ?1039:
   \   0140  320500            LD      (dio_par+5),A
   \   0143  C30000            JP      disk_write
   \   0146            ?1041:
   \   0146  220300            LD      (dio_par+3),HL
   \   0149  3E01              LD      A,1
   \   014B            ?1042:
   \   014B  320500            LD      (dio_par+5),A
   \   014E            ?1043:
   \   014E  CD0000            CALL    disk_read
   \   0151  B7                OR      A
   \   0152  C9                RET
    705          }
    706          
    707          
    708          
    709          
    710          /*-----------------------------------------------------------------------*/
    711          /* Clean-up cached data                                                  */
    712          /*-----------------------------------------------------------------------*/
    713          #if !_FS_READONLY
    714          static
    715          FRESULT sync (  /* FR_OK: successful, FR_DISK_ERR: failed */
    716                  FATFS *fs       /* File system object */
    717          )
   \   0153            sync:
   \   0153  C5                PUSH    BC
   \   0154  FDE5              PUSH    IY
   \   0156  DDE5              PUSH    IX
   \   0158  D5                PUSH    DE
   \   0159  DDE1              POP     IX
    718          {
    719                  FRESULT res;
    720          
    721          
   \   015B  210000            LD      HL,0
   \   015E  E5                PUSH    HL
   \   015F  E5                PUSH    HL
   \   0160  CD0000            CALL    move_window
   \   0163  E1                POP     HL
   \   0164  E1                POP     HL
   \   0165  FD6F              LD      IYL,A
    722                  res = move_window(fs, 0);
   \   0167  B7                OR      A
   \   0168  C23102            JP      NZ,?0028
   \   016B            ?0021:
    723                  if (res == FR_OK) {
    724                          /* Update FSInfo sector if needed */
   \   016B  DD7E00            LD      A,(IX+0)
   \   016E  FE03              CP      3
   \   0170  C21F02            JP      NZ,?0024
   \   0173  DD7E06            LD      A,(IX+6)
   \   0176  B7                OR      A
   \   0177  CA1F02            JP      Z,?0024
   \   017A            ?0026:
   \   017A            ?0025:
   \   017A            ?0023:
    725                          if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   \   017A  AF                XOR     A
   \   017B  DD772F            LD      (IX+47),A
   \   017E  DD7730            LD      (IX+48),A
   \   0181  DD7731            LD      (IX+49),A
   \   0184  DD7732            LD      (IX+50),A
    726                                  fs->winsect = 0;
    727                                  /* Create FSInfo structure */
   \   0187  010002            LD      BC,512
   \   018A  213300            LD      HL,51
   \   018D  DDE5              PUSH    IX
   \   018F  D1                POP     DE
   \   0190  19                ADD     HL,DE
   \   0191  EB                EX      DE,HL
   \   0192  69                LD      L,C
   \   0193  61                LD      H,C
   \   0194  CD0000            CALL    ?MEMSET_L11
    728                                  memset(fs->win, 0, 512);
   \   0197  2E33              LD      L,51
   \   0199  DDE5              PUSH    IX
   \   019B  C1                POP     BC
   \   019C  09                ADD     HL,BC
   \   019D  11FE01            LD      DE,510
   \   01A0  19                ADD     HL,DE
   \   01A1  3655              LD      (HL),85
   \   01A3  23                INC     HL
   \   01A4  36AA              LD      (HL),170
    729                                  ST_WORD(fs->win+BS_55AA, 0xAA55);
   \   01A6  213300            LD      HL,51
   \   01A9  09                ADD     HL,BC
   \   01AA  3652              LD      (HL),82
   \   01AC  23                INC     HL
   \   01AD  3652              LD      (HL),82
   \   01AF  23                INC     HL
   \   01B0  3661              LD      (HL),97
   \   01B2  23                INC     HL
   \   01B3  3641              LD      (HL),65
    730                                  ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   \   01B5  213300            LD      HL,51
   \   01B8  09                ADD     HL,BC
   \   01B9  11E401            LD      DE,484
   \   01BC  19                ADD     HL,DE
   \   01BD  3672              LD      (HL),114
   \   01BF  23                INC     HL
   \   01C0  3672              LD      (HL),114
   \   01C2  23                INC     HL
   \   01C3  3641              LD      (HL),65
   \   01C5  23                INC     HL
   \   01C6  3661              LD      (HL),97
    731                                  ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   \   01C8  213300            LD      HL,51
   \   01CB  09                ADD     HL,BC
   \   01CC  11E801            LD      DE,488
   \   01CF  19                ADD     HL,DE
   \   01D0  E5                PUSH    HL
   \   01D1  210F00            LD      HL,15
   \   01D4  09                ADD     HL,BC
   \   01D5  5E                LD      E,(HL)
   \   01D6  23                INC     HL
   \   01D7  56                LD      D,(HL)
   \   01D8  23                INC     HL
   \   01D9  4E                LD      C,(HL)
   \   01DA  23                INC     HL
   \   01DB  46                LD      B,(HL)
   \   01DC  E1                POP     HL
   \   01DD  73                LD      (HL),E
   \   01DE  23                INC     HL
   \   01DF  72                LD      (HL),D
   \   01E0  23                INC     HL
   \   01E1  71                LD      (HL),C
   \   01E2  23                INC     HL
   \   01E3  70                LD      (HL),B
    732                                  ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   \   01E4  213300            LD      HL,51
   \   01E7  DDE5              PUSH    IX
   \   01E9  C1                POP     BC
   \   01EA  09                ADD     HL,BC
   \   01EB  11EC01            LD      DE,492
   \   01EE  19                ADD     HL,DE
   \   01EF  E5                PUSH    HL
   \   01F0  210B00            LD      HL,11
   \   01F3  09                ADD     HL,BC
   \   01F4  5E                LD      E,(HL)
   \   01F5  23                INC     HL
   \   01F6  56                LD      D,(HL)
   \   01F7  23                INC     HL
   \   01F8  4E                LD      C,(HL)
   \   01F9  23                INC     HL
   \   01FA  46                LD      B,(HL)
   \   01FB  E1                POP     HL
   \   01FC  73                LD      (HL),E
   \   01FD  23                INC     HL
   \   01FE  72                LD      (HL),D
   \   01FF  23                INC     HL
   \   0200  71                LD      (HL),C
   \   0201  23                INC     HL
   \   0202  70                LD      (HL),B
    733                                  ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    734                                  /* Write it into the FSInfo sector */
   \   0203  DD7E01            LD      A,(IX+1)
   \   0206  320000            LD      (dio_par),A
   \   0209  213300            LD      HL,51
   \   020C  DDE5              PUSH    IX
   \   020E  C1                POP     BC
   \   020F  09                ADD     HL,BC
   \   0210  220100            LD      (dio_par+1),HL
   \   0213  211300            LD      HL,19
    735                                  SET_DIO_PAR(fs->drv, fs->win, fs->fsi_sector,1);
   \   0216  CD3A01            CALL    ?1037
    736                                  disk_write();
   \   0219  210600            LD      HL,6
   \   021C  09                ADD     HL,BC
   \   021D  3600              LD      (HL),0
   \   021F            ?0024:
    737                                  fs->fsi_flag = 0;
    738                          }
    739                          /* Make sure that no pending write process in the physical drive */
   \   021F  210000            LD      HL,0
   \   0222  E5                PUSH    HL
   \   0223  4C                LD      C,H
   \   0224  DD5E01            LD      E,(IX+1)
   \   0227  CD0000            CALL    disk_ioctl
   \   022A  E1                POP     HL
   \   022B  B7                OR      A
   \   022C  2803              JR      Z,?0028
   \   022E            ?0027:
    740                          if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
   \   022E  FD2E01            LD      IYL,1
   \   0231            ?0028:
   \   0231            ?0022:
    741                                  res = FR_DISK_ERR;
    742                  }
    743          
   \   0231  FD7D              LD      A,IYL
    744                  return res;
   \   0233  DDE1              POP     IX
   \   0235  FDE1              POP     IY
   \   0237  C1                POP     BC
   \   0238  C9                RET
    745          }
    746          #endif
    747          
    748          
    749          
    750          
    751          /*-----------------------------------------------------------------------*/
    752          /* Get sector# from cluster#                                             */
    753          /*-----------------------------------------------------------------------*/
    754          
    755          
    756          DWORD clust2sect (      /* !=0: Sector number, 0: Failed - invalid cluster# */
    757                  FATFS *fs,              /* File system object */
    758                  DWORD clst              /* Cluster# to be converted */
    759          )
   \   0239            clust2sect:
   \   0239  DDE5              PUSH    IX
   \   023B  D5                PUSH    DE
   \   023C  DDE1              POP     IX
    760          {
   \   023E  210400            LD      HL,4
   \   0241  39                ADD     HL,SP
   \   0242  010000            LD      BC,0
   \   0245  110200            LD      DE,2
   \   0248  CD0000            CALL    ?L_SUBASG_L03
    761                  clst -= 2;
   \   024B  DD6E1D            LD      L,(IX+29)
   \   024E  DD661E            LD      H,(IX+30)
   \   0251  E5                PUSH    HL
   \   0252  DD6E1B            LD      L,(IX+27)
   \   0255  DD661C            LD      H,(IX+28)
   \   0258  E5                PUSH    HL
   \   0259  21FEFF            LD      HL,65534
   \   025C  C1                POP     BC
   \   025D  09                ADD     HL,BC
   \   025E  EB                EX      DE,HL
   \   025F  21FFFF            LD      HL,65535
   \   0262  C1                POP     BC
   \   0263  ED4A              ADC     HL,BC
   \   0265  E5                PUSH    HL
   \   0266  D5                PUSH    DE
   \   0267  210800            LD      HL,8
   \   026A  39                ADD     HL,SP
   \   026B  4E                LD      C,(HL)
   \   026C  23                INC     HL
   \   026D  46                LD      B,(HL)
   \   026E  23                INC     HL
   \   026F  5E                LD      E,(HL)
   \   0270  23                INC     HL
   \   0271  56                LD      D,(HL)
   \   0272  69                LD      L,C
   \   0273  60                LD      H,B
   \   0274  A7                AND     A
   \   0275  C1                POP     BC
   \   0276  ED42              SBC     HL,BC
   \   0278  EB                EX      DE,HL
   \   0279  C1                POP     BC
   \   027A  ED42              SBC     HL,BC
   \   027C  3807              JR      C,?0030
   \   027E            ?0029:
   \   027E  010000            LD      BC,0
   \   0281  69                LD      L,C
   \   0282  60                LD      H,B
    762                  if (clst >= (fs->n_fatent - 2)) return 0;               /* Invalid cluster# */
   \   0283  182E              JR      ?0031
   \   0285            ?0030:
   \   0285  DD6E03            LD      L,(IX+3)
   \   0288  010000            LD      BC,0
   \   028B  61                LD      H,C
   \   028C  C5                PUSH    BC
   \   028D  E5                PUSH    HL
   \   028E  2E08              LD      L,8
   \   0290  39                ADD     HL,SP
   \   0291  5E                LD      E,(HL)
   \   0292  23                INC     HL
   \   0293  56                LD      D,(HL)
   \   0294  23                INC     HL
   \   0295  4E                LD      C,(HL)
   \   0296  23                INC     HL
   \   0297  46                LD      B,(HL)
   \   0298  EB                EX      DE,HL
   \   0299  CD0000            CALL    ?L_MUL_L03
   \   029C  C5                PUSH    BC
   \   029D  E5                PUSH    HL
   \   029E  DD6E2B            LD      L,(IX+43)
   \   02A1  DD662C            LD      H,(IX+44)
   \   02A4  C1                POP     BC
   \   02A5  09                ADD     HL,BC
   \   02A6  EB                EX      DE,HL
   \   02A7  DD6E2D            LD      L,(IX+45)
   \   02AA  DD662E            LD      H,(IX+46)
   \   02AD  C1                POP     BC
   \   02AE  ED4A              ADC     HL,BC
   \   02B0  4D                LD      C,L
   \   02B1  44                LD      B,H
   \   02B2  EB                EX      DE,HL
    763                  return clst * fs->csize + fs->database;
   \   02B3            ?0031:
   \   02B3  DDE1              POP     IX
   \   02B5  C9                RET
    764          }
    765          
    766          
    767          
    768          
    769          /*-----------------------------------------------------------------------*/
    770          /* FAT access - Read value of a FAT entry                                */
    771          /*-----------------------------------------------------------------------*/
    772          
    773          
    774          DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    775                  FATFS *fs,      /* File system object */
    776                  DWORD clst      /* Cluster# to get the link information */
    777          )
   \   02B6            get_fat:
   \   02B6  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   02B9  FEFF              DEFW    -2
   \   02BB  FDE5              PUSH    IY
   \   02BD  D9                EXX
   \   02BE  C5                PUSH    BC
   \   02BF  D5                PUSH    DE
   \   02C0  D9                EXX
   \   02C1  DD6E02            LD      L,(IX+2)
   \   02C4  DD6603            LD      H,(IX+3)
   \   02C7  E5                PUSH    HL
   \   02C8  FDE1              POP     IY
    778          {
    779                  UINT wc, bc;
    780                  BYTE *p;
    781          
    782          
   \   02CA  A7                AND     A
   \   02CB  DD6E08            LD      L,(IX+8)
   \   02CE  DD6609            LD      H,(IX+9)
   \   02D1  010200            LD      BC,2
   \   02D4  ED42              SBC     HL,BC
   \   02D6  DD6E0A            LD      L,(IX+10)
   \   02D9  DD660B            LD      H,(IX+11)
   \   02DC  0B                DEC     BC
   \   02DD  0B                DEC     BC
   \   02DE  ED42              SBC     HL,BC
   \   02E0  381E              JR      C,?0034
   \   02E2  DD6E08            LD      L,(IX+8)
   \   02E5  DD6609            LD      H,(IX+9)
   \   02E8  FD4E1B            LD      C,(IY+27)
   \   02EB  FD461C            LD      B,(IY+28)
   \   02EE  ED42              SBC     HL,BC
   \   02F0  DD6E0A            LD      L,(IX+10)
   \   02F3  DD660B            LD      H,(IX+11)
   \   02F6  FD4E1D            LD      C,(IY+29)
   \   02F9  FD461E            LD      B,(IY+30)
   \   02FC  ED42              SBC     HL,BC
   \   02FE  3809              JR      C,?0033
   \   0300            ?0034:
   \   0300            ?0035:
   \   0300            ?0032:
    783                  if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
   \   0300  010000            LD      BC,0
   \   0303  210100            LD      HL,1
    784                          return 1;
    785          
   \   0306  C35D04            JP      ?0051
   \   0309            ?0033:
   \   0309  FD7E00            LD      A,(IY+0)
   \   030C  FE01              CP      1
   \   030E  C2C503            JP      NZ,?0045
   \   0311            ?0037:
    786                  switch (fs->fs_type) {
    787                  case FS_FAT12 :
   \   0311  D9                EXX
   \   0312  DD5E08            LD      E,(IX+8)
   \   0315  DD5609            LD      D,(IX+9)
   \   0318  D5                PUSH    DE
   \   0319  D9                EXX
   \   031A  C1                POP     BC
   \   031B  CB38              SRL     B
   \   031D  CB19              RR      C
   \   031F  C5                PUSH    BC
   \   0320  D9                EXX
   \   0321  E1                POP     HL
   \   0322  19                ADD     HL,DE
   \   0323  EB                EX      DE,HL
   \   0324  D9                EXX
    788                          bc = (UINT)clst; bc += bc / 2;
   \   0325  FD6E25            LD      L,(IY+37)
   \   0328  FD6626            LD      H,(IY+38)
   \   032B  E5                PUSH    HL
   \   032C  FD6E23            LD      L,(IY+35)
   \   032F  FD6624            LD      H,(IY+36)
   \   0332  E5                PUSH    HL
   \   0333  0609              LD      B,9
   \   0335  D9                EXX
   \   0336  D5                PUSH    DE
   \   0337  D9                EXX
   \   0338  D1                POP     DE
   \   0339  CD6604            CALL    ?1044
   \   033C  C1                POP     BC
   \   033D  09                ADD     HL,BC
   \   033E  EB                EX      DE,HL
   \   033F  C1                POP     BC
   \   0340  ED4A              ADC     HL,BC
   \   0342  E5                PUSH    HL
   \   0343  D5                PUSH    DE
   \   0344  CD6E04            CALL    ?1046
   \   0347  E1                POP     HL
   \   0348  E1                POP     HL
   \   0349  B7                OR      A
   \   034A  C25804            JP      NZ,?0036
   \   034D            ?0038:
   \   034D            ?0039:
    789                          if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   \   034D  D9                EXX
   \   034E  D5                PUSH    DE
   \   034F  D9                EXX
   \   0350  E1                POP     HL
   \   0351  7C                LD      A,H
   \   0352  E601              AND     1
   \   0354  67                LD      H,A
   \   0355  FDE5              PUSH    IY
   \   0357  C1                POP     BC
   \   0358  09                ADD     HL,BC
   \   0359  113300            LD      DE,51
   \   035C  19                ADD     HL,DE
   \   035D  5E                LD      E,(HL)
   \   035E  D5                PUSH    DE
   \   035F  D9                EXX
   \   0360  C1                POP     BC
   \   0361  13                INC     DE
   \   0362  D9                EXX
    790                          wc = fs->win[bc % SS(fs)]; bc++;
   \   0363  212300            LD      HL,35
   \   0366  09                ADD     HL,BC
   \   0367  5E                LD      E,(HL)
   \   0368  23                INC     HL
   \   0369  56                LD      D,(HL)
   \   036A  23                INC     HL
   \   036B  4E                LD      C,(HL)
   \   036C  23                INC     HL
   \   036D  46                LD      B,(HL)
   \   036E  C5                PUSH    BC
   \   036F  D5                PUSH    DE
   \   0370  0609              LD      B,9
   \   0372  D9                EXX
   \   0373  D5                PUSH    DE
   \   0374  D9                EXX
   \   0375  D1                POP     DE
   \   0376  CD6604            CALL    ?1044
   \   0379  C1                POP     BC
   \   037A  09                ADD     HL,BC
   \   037B  EB                EX      DE,HL
   \   037C  C1                POP     BC
   \   037D  ED4A              ADC     HL,BC
   \   037F  E5                PUSH    HL
   \   0380  D5                PUSH    DE
   \   0381  CD6E04            CALL    ?1046
   \   0384  E1                POP     HL
   \   0385  E1                POP     HL
   \   0386  B7                OR      A
   \   0387  C25804            JP      NZ,?0036
   \   038A            ?0040:
   \   038A            ?0041:
    791                          if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   \   038A  D9                EXX
   \   038B  D5                PUSH    DE
   \   038C  D9                EXX
   \   038D  E1                POP     HL
   \   038E  7C                LD      A,H
   \   038F  E601              AND     1
   \   0391  67                LD      H,A
   \   0392  FDE5              PUSH    IY
   \   0394  C1                POP     BC
   \   0395  09                ADD     HL,BC
   \   0396  013300            LD      BC,51
   \   0399  09                ADD     HL,BC
   \   039A  46                LD      B,(HL)
   \   039B  0E00              LD      C,0
   \   039D  C5                PUSH    BC
   \   039E  D9                EXX
   \   039F  E1                POP     HL
   \   03A0  7D                LD      A,L
   \   03A1  B1                OR      C
   \   03A2  4F                LD      C,A
   \   03A3  7C                LD      A,H
   \   03A4  B0                OR      B
   \   03A5  47                LD      B,A
   \   03A6  D9                EXX
    792                          wc |= fs->win[bc % SS(fs)] << 8;
   \   03A7  DDCB0846          BIT     0,(IX+8)
   \   03AB  280C              JR      Z,?0043
   \   03AD  0604              LD      B,4
   \   03AF  D9                EXX
   \   03B0  C5                PUSH    BC
   \   03B1  D9                EXX
   \   03B2  D1                POP     DE
   \   03B3  CD0000            CALL    ?US_RSH_L02
   \   03B6  EB                EX      DE,HL
   \   03B7  1808              JR      ?0925
   \   03B9            ?0043:
   \   03B9  D9                EXX
   \   03BA  C5                PUSH    BC
   \   03BB  D9                EXX
   \   03BC  E1                POP     HL
   \   03BD  7C                LD      A,H
   \   03BE  E60F              AND     15
   \   03C0  67                LD      H,A
   \   03C1            ?0925:
   \   03C1  41                LD      B,C
    793                          return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    794          
   \   03C2  C35D04            JP      ?0051
   \   03C5            ?0045:
   \   03C5  FE02              CP      2
   \   03C7  2047              JR      NZ,?0048
    795                  case FS_FAT16 :
   \   03C9  FD6E25            LD      L,(IY+37)
   \   03CC  FD6626            LD      H,(IY+38)
   \   03CF  E5                PUSH    HL
   \   03D0  FD6E23            LD      L,(IY+35)
   \   03D3  FD6624            LD      H,(IY+36)
   \   03D6  E5                PUSH    HL
   \   03D7  DD4E0A            LD      C,(IX+10)
   \   03DA  DD460B            LD      B,(IX+11)
   \   03DD  DD6E09            LD      L,(IX+9)
   \   03E0  61                LD      H,C
   \   03E1  58                LD      E,B
   \   03E2  1600              LD      D,0
   \   03E4  C1                POP     BC
   \   03E5  09                ADD     HL,BC
   \   03E6  EB                EX      DE,HL
   \   03E7  C1                POP     BC
   \   03E8  ED4A              ADC     HL,BC
   \   03EA  E5                PUSH    HL
   \   03EB  D5                PUSH    DE
   \   03EC  CD6E04            CALL    ?1046
   \   03EF  E1                POP     HL
   \   03F0  E1                POP     HL
   \   03F1  B7                OR      A
   \   03F2  2064              JR      NZ,?0036
   \   03F4            ?0046:
   \   03F4            ?0047:
    796                          if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   \   03F4  DD6E08            LD      L,(IX+8)
   \   03F7  DD6609            LD      H,(IX+9)
   \   03FA  29                ADD     HL,HL
   \   03FB  7C                LD      A,H
   \   03FC  E601              AND     1
   \   03FE  67                LD      H,A
   \   03FF  FDE5              PUSH    IY
   \   0401  C1                POP     BC
   \   0402  09                ADD     HL,BC
   \   0403  013300            LD      BC,51
   \   0406  09                ADD     HL,BC
    797                          p = &fs->win[clst * 2 % SS(fs)];
   \   0407  46                LD      B,(HL)
   \   0408  23                INC     HL
   \   0409  66                LD      H,(HL)
   \   040A  68                LD      L,B
   \   040B  010000            LD      BC,0
    798                          return LD_WORD(p);
    799          
   \   040E  184D              JR      ?0051
   \   0410            ?0048:
   \   0410  FE03              CP      3
   \   0412  2044              JR      NZ,?0036
    800                  case FS_FAT32 :
   \   0414  FD6E25            LD      L,(IY+37)
   \   0417  FD6626            LD      H,(IY+38)
   \   041A  E5                PUSH    HL
   \   041B  FD6E23            LD      L,(IY+35)
   \   041E  FD6624            LD      H,(IY+36)
   \   0421  E5                PUSH    HL
   \   0422  CD7404            CALL    ?1047
   \   0425  59                LD      E,C
   \   0426  50                LD      D,B
   \   0427  C1                POP     BC
   \   0428  09                ADD     HL,BC
   \   0429  EB                EX      DE,HL
   \   042A  C1                POP     BC
   \   042B  ED4A              ADC     HL,BC
   \   042D  E5                PUSH    HL
   \   042E  D5                PUSH    DE
   \   042F  CD6E04            CALL    ?1046
   \   0432  E1                POP     HL
   \   0433  E1                POP     HL
   \   0434  B7                OR      A
   \   0435  2021              JR      NZ,?0036
   \   0437            ?0049:
   \   0437            ?0050:
    801                          if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   \   0437  DD6E08            LD      L,(IX+8)
   \   043A  DD6609            LD      H,(IX+9)
   \   043D  29                ADD     HL,HL
   \   043E  29                ADD     HL,HL
   \   043F  7C                LD      A,H
   \   0440  E601              AND     1
   \   0442  67                LD      H,A
   \   0443  FDE5              PUSH    IY
   \   0445  C1                POP     BC
   \   0446  09                ADD     HL,BC
   \   0447  013300            LD      BC,51
   \   044A  09                ADD     HL,BC
    802                          p = &fs->win[clst * 4 % SS(fs)];
   \   044B  5E                LD      E,(HL)
   \   044C  23                INC     HL
   \   044D  56                LD      D,(HL)
   \   044E  23                INC     HL
   \   044F  4E                LD      C,(HL)
   \   0450  23                INC     HL
   \   0451  7E                LD      A,(HL)
   \   0452  EB                EX      DE,HL
   \   0453  E60F              AND     15
   \   0455  47                LD      B,A
    803                          return LD_DWORD(p) & 0x0FFFFFFF;
   \   0456  1805              JR      ?0051
   \   0458            ?0036:
    804                  }
    805          
   \   0458  01FFFF            LD      BC,65535
   \   045B  69                LD      L,C
   \   045C  60                LD      H,B
    806                  return 0xFFFFFFFF;      /* An error occurred at the disk I/O layer */
   \   045D            ?0051:
   \   045D  D9                EXX
   \   045E  D1                POP     DE
   \   045F  C1                POP     BC
   \   0460  D9                EXX
   \   0461  FDE1              POP     IY
   \   0463  C30000            JP      ?LEAVE_32_L09
   \   0466            ?1044:
   \   0466  CD0000            CALL    ?US_RSH_L02
   \   0469  EB                EX      DE,HL
   \   046A  110000            LD      DE,0
   \   046D  C9                RET
   \   046E            ?1046:
   \   046E  FDE5              PUSH    IY
   \   0470  D1                POP     DE
   \   0471  C30000            JP      move_window
   \   0474            ?1047:
   \   0474  3E07              LD      A,7
   \   0476            ?1048:
   \   0476  DD4E0A            LD      C,(IX+10)
   \   0479  DD460B            LD      B,(IX+11)
   \   047C  DD6E08            LD      L,(IX+8)
   \   047F  DD6609            LD      H,(IX+9)
   \   0482  C30000            JP      ?UL_RSH_L03
    807          }
    808          
    809          
    810          
    811          
    812          /*-----------------------------------------------------------------------*/
    813          /* FAT access - Change value of a FAT entry                              */
    814          /*-----------------------------------------------------------------------*/
    815          #if !_FS_READONLY
    816          
    817          FRESULT put_fat (
    818                  FATFS *fs,      /* File system object */
    819                  DWORD clst,     /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
    820                  DWORD val       /* New value to mark the cluster */
    821          )
   \   0485            put_fat:
   \   0485  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   0488  FEFF              DEFW    -2
   \   048A  FDE5              PUSH    IY
   \   048C  D9                EXX
   \   048D  D5                PUSH    DE
   \   048E  D9                EXX
   \   048F  DD6E02            LD      L,(IX+2)
   \   0492  DD6603            LD      H,(IX+3)
   \   0495  E5                PUSH    HL
   \   0496  FDE1              POP     IY
    822          {
    823                  UINT bc;
    824                  BYTE *p;
    825                  FRESULT res;
    826          
    827          
   \   0498  A7                AND     A
   \   0499  DD6E08            LD      L,(IX+8)
   \   049C  DD6609            LD      H,(IX+9)
   \   049F  010200            LD      BC,2
   \   04A2  ED42              SBC     HL,BC
   \   04A4  DD6E0A            LD      L,(IX+10)
   \   04A7  DD660B            LD      H,(IX+11)
   \   04AA  0B                DEC     BC
   \   04AB  0B                DEC     BC
   \   04AC  ED42              SBC     HL,BC
   \   04AE  381E              JR      C,?0054
   \   04B0  DD6E08            LD      L,(IX+8)
   \   04B3  DD6609            LD      H,(IX+9)
   \   04B6  FD4E1B            LD      C,(IY+27)
   \   04B9  FD461C            LD      B,(IY+28)
   \   04BC  ED42              SBC     HL,BC
   \   04BE  DD6E0A            LD      L,(IX+10)
   \   04C1  DD660B            LD      H,(IX+11)
   \   04C4  FD4E1D            LD      C,(IY+29)
   \   04C7  FD461E            LD      B,(IY+30)
   \   04CA  ED42              SBC     HL,BC
   \   04CC  3807              JR      C,?0053
   \   04CE            ?0054:
   \   04CE            ?0055:
   \   04CE            ?0052:
    828                  if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
   \   04CE  DD36FE02          LD      (IX-2),2
    829                          res = FR_INT_ERR;
    830          
   \   04D2  C38306            JP      ?0056
   \   04D5            ?0053:
    831                  } else {
   \   04D5  FD7E00            LD      A,(IY+0)
   \   04D8  FE01              CP      1
   \   04DA  C2BA05            JP      NZ,?0069
   \   04DD            ?0058:
    832                          switch (fs->fs_type) {
    833                          case FS_FAT12 :
   \   04DD  D9                EXX
   \   04DE  DD5E08            LD      E,(IX+8)
   \   04E1  DD5609            LD      D,(IX+9)
   \   04E4  D5                PUSH    DE
   \   04E5  D9                EXX
   \   04E6  C1                POP     BC
   \   04E7  CB38              SRL     B
   \   04E9  CB19              RR      C
   \   04EB  C5                PUSH    BC
   \   04EC  D9                EXX
   \   04ED  E1                POP     HL
   \   04EE  19                ADD     HL,DE
   \   04EF  EB                EX      DE,HL
   \   04F0  D9                EXX
    834                                  bc = clst; bc += bc / 2;
   \   04F1  FD6E25            LD      L,(IY+37)
   \   04F4  FD6626            LD      H,(IY+38)
   \   04F7  E5                PUSH    HL
   \   04F8  FD6E23            LD      L,(IY+35)
   \   04FB  FD6624            LD      H,(IY+36)
   \   04FE  E5                PUSH    HL
   \   04FF  0609              LD      B,9
   \   0501  D9                EXX
   \   0502  D5                PUSH    DE
   \   0503  D9                EXX
   \   0504  D1                POP     DE
   \   0505  CD6604            CALL    ?1044
   \   0508  C1                POP     BC
   \   0509  09                ADD     HL,BC
   \   050A  EB                EX      DE,HL
   \   050B  C1                POP     BC
   \   050C  ED4A              ADC     HL,BC
   \   050E  E5                PUSH    HL
   \   050F  D5                PUSH    DE
   \   0510  CD6E04            CALL    ?1046
   \   0513  E1                POP     HL
   \   0514  E1                POP     HL
   \   0515  DD77FE            LD      (IX-2),A
    835                                  res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   0518  B7                OR      A
   \   0519  C27F06            JP      NZ,?0057
   \   051C            ?0059:
   \   051C            ?0060:
    836                                  if (res != FR_OK) break;
   \   051C  D9                EXX
   \   051D  D5                PUSH    DE
   \   051E  D9                EXX
   \   051F  E1                POP     HL
   \   0520  7C                LD      A,H
   \   0521  E601              AND     1
   \   0523  67                LD      H,A
   \   0524  FDE5              PUSH    IY
   \   0526  C1                POP     BC
   \   0527  09                ADD     HL,BC
   \   0528  013300            LD      BC,51
   \   052B  09                ADD     HL,BC
   \   052C  EB                EX      DE,HL
    837                                  p = &fs->win[bc % SS(fs)];
   \   052D  DDCB0846          BIT     0,(IX+8)
   \   0531  2812              JR      Z,?0062
   \   0533  6B                LD      L,E
   \   0534  62                LD      H,D
   \   0535  7E                LD      A,(HL)
   \   0536  E60F              AND     15
   \   0538  F5                PUSH    AF
   \   0539  DD7E0C            LD      A,(IX+12)
   \   053C  87                ADD     A,A
   \   053D  87                ADD     A,A
   \   053E  87                ADD     A,A
   \   053F  87                ADD     A,A
   \   0540  47                LD      B,A
   \   0541  F1                POP     AF
   \   0542  B0                OR      B
   \   0543  1803              JR      ?0063
   \   0545            ?0062:
   \   0545  DD7E0C            LD      A,(IX+12)
   \   0548            ?0063:
   \   0548  EB                EX      DE,HL
   \   0549  77                LD      (HL),A
    838                                  *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   \   054A  D9                EXX
   \   054B  13                INC     DE
   \   054C  D9                EXX
    839                                  bc++;
   \   054D  FD360501          LD      (IY+5),1
    840                                  fs->wflag = 1;
   \   0551  FD6E25            LD      L,(IY+37)
   \   0554  FD6626            LD      H,(IY+38)
   \   0557  E5                PUSH    HL
   \   0558  FD6E23            LD      L,(IY+35)
   \   055B  FD6624            LD      H,(IY+36)
   \   055E  E5                PUSH    HL
   \   055F  0609              LD      B,9
   \   0561  D9                EXX
   \   0562  D5                PUSH    DE
   \   0563  D9                EXX
   \   0564  D1                POP     DE
   \   0565  CD6604            CALL    ?1044
   \   0568  C1                POP     BC
   \   0569  09                ADD     HL,BC
   \   056A  EB                EX      DE,HL
   \   056B  C1                POP     BC
   \   056C  ED4A              ADC     HL,BC
   \   056E  E5                PUSH    HL
   \   056F  D5                PUSH    DE
   \   0570  CD6E04            CALL    ?1046
   \   0573  E1                POP     HL
   \   0574  E1                POP     HL
   \   0575  DD77FE            LD      (IX-2),A
    841                                  res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   0578  B7                OR      A
   \   0579  C27F06            JP      NZ,?0057
   \   057C            ?0064:
   \   057C            ?0065:
    842                                  if (res != FR_OK) break;
   \   057C  D9                EXX
   \   057D  D5                PUSH    DE
   \   057E  D9                EXX
   \   057F  E1                POP     HL
   \   0580  7C                LD      A,H
   \   0581  E601              AND     1
   \   0583  67                LD      H,A
   \   0584  FDE5              PUSH    IY
   \   0586  C1                POP     BC
   \   0587  09                ADD     HL,BC
   \   0588  013300            LD      BC,51
   \   058B  09                ADD     HL,BC
   \   058C  EB                EX      DE,HL
    843                                  p = &fs->win[bc % SS(fs)];
   \   058D  DDCB0846          BIT     0,(IX+8)
   \   0591  2814              JR      Z,?0067
   \   0593  3E04              LD      A,4
   \   0595  DD4E0E            LD      C,(IX+14)
   \   0598  DD460F            LD      B,(IX+15)
   \   059B  DD6E0C            LD      L,(IX+12)
   \   059E  DD660D            LD      H,(IX+13)
   \   05A1  CD0000            CALL    ?UL_RSH_L03
   \   05A4  7D                LD      A,L
   \   05A5  180E              JR      ?0068
   \   05A7            ?0067:
   \   05A7  6B                LD      L,E
   \   05A8  62                LD      H,D
   \   05A9  7E                LD      A,(HL)
   \   05AA  E6F0              AND     240
   \   05AC  F5                PUSH    AF
   \   05AD  DD7E0D            LD      A,(IX+13)
   \   05B0  E60F              AND     15
   \   05B2  47                LD      B,A
   \   05B3  F1                POP     AF
   \   05B4  B0                OR      B
   \   05B5            ?0068:
   \   05B5  EB                EX      DE,HL
   \   05B6  77                LD      (HL),A
    844                                  *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   \   05B7  C37F06            JP      ?0057
   \   05BA            ?0069:
   \   05BA  FE02              CP      2
   \   05BC  204E              JR      NZ,?0072
    845                                  break;
    846          
    847                          case FS_FAT16 :
   \   05BE  FD6E25            LD      L,(IY+37)
   \   05C1  FD6626            LD      H,(IY+38)
   \   05C4  E5                PUSH    HL
   \   05C5  FD6E23            LD      L,(IY+35)
   \   05C8  FD6624            LD      H,(IY+36)
   \   05CB  E5                PUSH    HL
   \   05CC  DD4E0A            LD      C,(IX+10)
   \   05CF  DD460B            LD      B,(IX+11)
   \   05D2  DD6E09            LD      L,(IX+9)
   \   05D5  61                LD      H,C
   \   05D6  58                LD      E,B
   \   05D7  1600              LD      D,0
   \   05D9  C1                POP     BC
   \   05DA  09                ADD     HL,BC
   \   05DB  EB                EX      DE,HL
   \   05DC  C1                POP     BC
   \   05DD  ED4A              ADC     HL,BC
   \   05DF  E5                PUSH    HL
   \   05E0  D5                PUSH    DE
   \   05E1  CD6E04            CALL    ?1046
   \   05E4  E1                POP     HL
   \   05E5  E1                POP     HL
   \   05E6  DD77FE            LD      (IX-2),A
    848                                  res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   \   05E9  B7                OR      A
   \   05EA  C27F06            JP      NZ,?0057
   \   05ED            ?0070:
   \   05ED            ?0071:
    849                                  if (res != FR_OK) break;
   \   05ED  DD6E08            LD      L,(IX+8)
   \   05F0  DD6609            LD      H,(IX+9)
   \   05F3  29                ADD     HL,HL
   \   05F4  7C                LD      A,H
   \   05F5  E601              AND     1
   \   05F7  67                LD      H,A
   \   05F8  FDE5              PUSH    IY
   \   05FA  C1                POP     BC
   \   05FB  09                ADD     HL,BC
   \   05FC  013300            LD      BC,51
   \   05FF  09                ADD     HL,BC
   \   0600  EB                EX      DE,HL
    850                                  p = &fs->win[clst * 2 % SS(fs)];
   \   0601  DD6E0C            LD      L,(IX+12)
   \   0604  DD660D            LD      H,(IX+13)
   \   0607  E5                PUSH    HL
   \   0608  EB                EX      DE,HL
   \   0609  C1                POP     BC
   \   060A  186A              JR      ?0928
    851                                  ST_WORD(p, (WORD)val);
   \   060C            ?0072:
   \   060C  FE03              CP      3
   \   060E  206B              JR      NZ,?0075
    852                                  break;
    853          
    854                          case FS_FAT32 :
   \   0610  FD6E25            LD      L,(IY+37)
   \   0613  FD6626            LD      H,(IY+38)
   \   0616  E5                PUSH    HL
   \   0617  FD6E23            LD      L,(IY+35)
   \   061A  FD6624            LD      H,(IY+36)
   \   061D  E5                PUSH    HL
   \   061E  CD7404            CALL    ?1047
   \   0621  59                LD      E,C
   \   0622  50                LD      D,B
   \   0623  C1                POP     BC
   \   0624  09                ADD     HL,BC
   \   0625  EB                EX      DE,HL
   \   0626  C1                POP     BC
   \   0627  ED4A              ADC     HL,BC
   \   0629  E5                PUSH    HL
   \   062A  D5                PUSH    DE
   \   062B  CD6E04            CALL    ?1046
   \   062E  E1                POP     HL
   \   062F  E1                POP     HL
   \   0630  DD77FE            LD      (IX-2),A
    855                                  res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   \   0633  B7                OR      A
   \   0634  2049              JR      NZ,?0057
   \   0636            ?0073:
   \   0636            ?0074:
    856                                  if (res != FR_OK) break;
   \   0636  DD6E08            LD      L,(IX+8)
   \   0639  DD6609            LD      H,(IX+9)
   \   063C  29                ADD     HL,HL
   \   063D  29                ADD     HL,HL
   \   063E  7C                LD      A,H
   \   063F  E601              AND     1
   \   0641  67                LD      H,A
   \   0642  FDE5              PUSH    IY
   \   0644  C1                POP     BC
   \   0645  09                ADD     HL,BC
   \   0646  013300            LD      BC,51
   \   0649  09                ADD     HL,BC
   \   064A  EB                EX      DE,HL
    857                                  p = &fs->win[clst * 4 % SS(fs)];
   \   064B  D5                PUSH    DE
   \   064C  211400            LD      HL,20
   \   064F  39                ADD     HL,SP
   \   0650  E5                PUSH    HL
   \   0651  EB                EX      DE,HL
   \   0652  23                INC     HL
   \   0653  23                INC     HL
   \   0654  23                INC     HL
   \   0655  7E                LD      A,(HL)
   \   0656  1E00              LD      E,0
   \   0658  1600              LD      D,0
   \   065A  48                LD      C,B
   \   065B  E6F0              AND     240
   \   065D  47                LD      B,A
   \   065E  E1                POP     HL
   \   065F  CD0000            CALL    ?L_ORASG_L03
   \   0662  D1                POP     DE
    858                                  val |= LD_DWORD(p) & 0xF0000000;
   \   0663  DD4E0E            LD      C,(IX+14)
   \   0666  DD460F            LD      B,(IX+15)
   \   0669  DD6E0C            LD      L,(IX+12)
   \   066C  DD660D            LD      H,(IX+13)
   \   066F  E5                PUSH    HL
   \   0670  EB                EX      DE,HL
   \   0671  D1                POP     DE
   \   0672  73                LD      (HL),E
   \   0673  23                INC     HL
   \   0674  72                LD      (HL),D
   \   0675  23                INC     HL
   \   0676            ?0928:
   \   0676  71                LD      (HL),C
   \   0677  23                INC     HL
   \   0678  70                LD      (HL),B
    859                                  ST_DWORD(p, val);
   \   0679  1804              JR      ?0057
   \   067B            ?0075:
    860                                  break;
    861          
    862                          default :
   \   067B  DD36FE02          LD      (IX-2),2
   \   067F            ?0057:
    863                                  res = FR_INT_ERR;
    864                          }
   \   067F  FD360501          LD      (IY+5),1
   \   0683            ?0056:
    865                          fs->wflag = 1;
    866                  }
    867          
   \   0683  DD7EFE            LD      A,(IX-2)
    868                  return res;
   \   0686  D9                EXX
   \   0687  D1                POP     DE
   \   0688  D9                EXX
   \   0689  FDE1              POP     IY
   \   068B  C30000            JP      ?LEAVE_DIRECT_L09
    869          }
    870          #endif /* !_FS_READONLY */
    871          
    872          
    873          
    874          
    875          /*-----------------------------------------------------------------------*/
    876          /* FAT handling - Remove a cluster chain                                 */
    877          /*-----------------------------------------------------------------------*/
    878          #if !_FS_READONLY
    879          static
    880          FRESULT remove_chain (
    881                  FATFS *fs,                      /* File system object */
    882                  DWORD clst                      /* Cluster# to remove a chain from */
    883          )
   \   068E            remove_chain:
   \   068E  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   0691  FAFF              DEFW    65530
   \   0693  FDE5              PUSH    IY
   \   0695  DD6E02            LD      L,(IX+2)
   \   0698  DD6603            LD      H,(IX+3)
   \   069B  E5                PUSH    HL
   \   069C  FDE1              POP     IY
    884          {
    885                  FRESULT res;
    886                  DWORD nxt;
    887          #if _USE_ERASE
    889          #endif
    890          
   \   069E  A7                AND     A
   \   069F  DD6E08            LD      L,(IX+8)
   \   06A2  DD6609            LD      H,(IX+9)
   \   06A5  010200            LD      BC,2
   \   06A8  ED42              SBC     HL,BC
   \   06AA  DD6E0A            LD      L,(IX+10)
   \   06AD  DD660B            LD      H,(IX+11)
   \   06B0  0B                DEC     BC
   \   06B1  0B                DEC     BC
   \   06B2  ED42              SBC     HL,BC
   \   06B4  3873              JR      C,?0929
   \   06B6  DD6E08            LD      L,(IX+8)
   \   06B9  DD6609            LD      H,(IX+9)
   \   06BC  FD4E1B            LD      C,(IY+27)
   \   06BF  FD461C            LD      B,(IY+28)
   \   06C2  ED42              SBC     HL,BC
   \   06C4  DD6E0A            LD      L,(IX+10)
   \   06C7  DD660B            LD      H,(IX+11)
   \   06CA  FD4E1D            LD      C,(IY+29)
   \   06CD  FD461E            LD      B,(IY+30)
   \   06D0  ED42              SBC     HL,BC
   \   06D2  3055              JR      NC,?0929
   \   06D4            ?0078:
   \   06D4            ?0079:
   \   06D4            ?0076:
    891                  if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    892                          res = FR_INT_ERR;
    893          
   \   06D4            ?0077:
    894                  } else {
   \   06D4  DD36FA00          LD      (IX-6),0
   \   06D8            ?0082:
    895                          res = FR_OK;
   \   06D8  A7                AND     A
   \   06D9  DD6E08            LD      L,(IX+8)
   \   06DC  DD6609            LD      H,(IX+9)
   \   06DF  FD4E1B            LD      C,(IY+27)
   \   06E2  FD461C            LD      B,(IY+28)
   \   06E5  ED42              SBC     HL,BC
   \   06E7  DD6E0A            LD      L,(IX+10)
   \   06EA  DD660B            LD      H,(IX+11)
   \   06ED  FD4E1D            LD      C,(IY+29)
   \   06F0  FD461E            LD      B,(IY+30)
   \   06F3  ED42              SBC     HL,BC
   \   06F5  D2A807            JP      NC,?0081
   \   06F8            ?0083:
    896                          while (clst < fs->n_fatent) {                   /* Not a last link? */
   \   06F8  DD6E0A            LD      L,(IX+10)
   \   06FB  DD660B            LD      H,(IX+11)
   \   06FE  E5                PUSH    HL
   \   06FF  DD6E08            LD      L,(IX+8)
   \   0702  DD6609            LD      H,(IX+9)
   \   0705  E5                PUSH    HL
   \   0706  FDE5              PUSH    IY
   \   0708  D1                POP     DE
   \   0709  CDB602            CALL    get_fat
   \   070C  F1                POP     AF
   \   070D  F1                POP     AF
   \   070E  DD75FC            LD      (IX-4),L
   \   0711  DD74FD            LD      (IX-3),H
   \   0714  DD71FE            LD      (IX-2),C
   \   0717  DD70FF            LD      (IX-1),B
    897                                  nxt = get_fat(fs, clst);                        /* Get cluster status */
   \   071A  7D                LD      A,L
   \   071B  B4                OR      H
   \   071C  B1                OR      C
   \   071D  B0                OR      B
   \   071E  CAA807            JP      Z,?0081
   \   0721            ?0084:
   \   0721            ?0085:
    898                                  if (nxt == 0) break;                            /* Empty cluster? */
   \   0721  3E01              LD      A,1
   \   0723  AD                XOR     L
   \   0724  B4                OR      H
   \   0725  B1                OR      C
   \   0726  B0                OR      B
   \   0727  2006              JR      NZ,?0087
   \   0729            ?0086:
   \   0729            ?0929:
   \   0729  DD36FA02          LD      (IX-6),2
   \   072D  1879              JR      ?0081
   \   072F            ?0087:
    899                                  if (nxt == 1) { res = FR_INT_ERR; break; }      /* Internal error? */
   \   072F  7D                LD      A,L
   \   0730  A4                AND     H
   \   0731  A1                AND     C
   \   0732  A0                AND     B
   \   0733  3C                INC     A
   \   0734  2006              JR      NZ,?0089
   \   0736            ?0088:
   \   0736  DD36FA01          LD      (IX-6),1
   \   073A  186C              JR      ?0081
   \   073C            ?0089:
    900                                  if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }    /* Disk error? */
   \   073C  210000            LD      HL,0
   \   073F  E5                PUSH    HL
   \   0740  E5                PUSH    HL
   \   0741  DD6E0A            LD      L,(IX+10)
   \   0744  DD660B            LD      H,(IX+11)
   \   0747  E5                PUSH    HL
   \   0748  DD6E08            LD      L,(IX+8)
   \   074B  DD6609            LD      H,(IX+9)
   \   074E  E5                PUSH    HL
   \   074F  FDE5              PUSH    IY
   \   0751  D1                POP     DE
   \   0752  CD8504            CALL    put_fat
   \   0755  E1                POP     HL
   \   0756  E1                POP     HL
   \   0757  E1                POP     HL
   \   0758  E1                POP     HL
   \   0759  DD77FA            LD      (IX-6),A
    901                                  res = put_fat(fs, clst, 0);                     /* Mark the cluster "empty" */
   \   075C  B7                OR      A
   \   075D  2049              JR      NZ,?0081
   \   075F            ?0090:
   \   075F            ?0091:
    902                                  if (res != FR_OK) break;
   \   075F  FD7E0F            LD      A,(IY+15)
   \   0762  FDA610            AND     (IY+16)
   \   0765  FDA611            AND     (IY+17)
   \   0768  FDA612            AND     (IY+18)
   \   076B  3C                INC     A
   \   076C  281F              JR      Z,?0093
   \   076E            ?0092:
    903                                  if (fs->free_clust != 0xFFFFFFFF) {     /* Update FSInfo */
   \   076E  FD6E0F            LD      L,(IY+15)
   \   0771  FD6610            LD      H,(IY+16)
   \   0774  FD4E11            LD      C,(IY+17)
   \   0777  FD4612            LD      B,(IY+18)
   \   077A  CD0000            CALL    ?L_INC_L03
   \   077D  FD750F            LD      (IY+15),L
   \   0780  FD7410            LD      (IY+16),H
   \   0783  FD7111            LD      (IY+17),C
   \   0786  FD7012            LD      (IY+18),B
    904                                          fs->free_clust++;
   \   0789  FD360601          LD      (IY+6),1
   \   078D            ?0093:
    905                                          fs->fsi_flag = 1;
    906                                  }
    907          #if _USE_ERASE
    916          #endif
   \   078D  DD4EFE            LD      C,(IX-2)
   \   0790  DD46FF            LD      B,(IX-1)
   \   0793  DD6EFC            LD      L,(IX-4)
   \   0796  DD66FD            LD      H,(IX-3)
   \   0799  DD7508            LD      (IX+8),L
   \   079C  DD7409            LD      (IX+9),H
   \   079F  DD710A            LD      (IX+10),C
   \   07A2  DD700B            LD      (IX+11),B
    917                                  clst = nxt;     /* Next cluster */
    918                          }
   \   07A5  C3D806            JP      ?0082
   \   07A8            ?0081:
   \   07A8            ?0080:
    919                  }
    920          
   \   07A8  DD7EFA            LD      A,(IX-6)
    921                  return res;
   \   07AB  FDE1              POP     IY
   \   07AD  C30000            JP      ?LEAVE_DIRECT_L09
    922          }
    923          #endif
    924          
    925          
    926          
    927          
    928          /*-----------------------------------------------------------------------*/
    929          /* FAT handling - Stretch or Create a cluster chain                      */
    930          /*-----------------------------------------------------------------------*/
    931          #if !_FS_READONLY
    932          static
    933          DWORD create_chain (    /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
    934                  FATFS *fs,                      /* File system object */
    935                  DWORD clst                      /* Cluster# to stretch. 0 means create a new chain. */
    936          )
   \   07B0            create_chain:
   \   07B0  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   07B3  F2FF              DEFW    65522
   \   07B5  FDE5              PUSH    IY
   \   07B7  DD6E02            LD      L,(IX+2)
   \   07BA  DD6603            LD      H,(IX+3)
   \   07BD  E5                PUSH    HL
   \   07BE  FDE1              POP     IY
    937          {
    938                  DWORD cs, ncl, scl;
    939                  FRESULT res;
    940          
    941          
   \   07C0  DD7E08            LD      A,(IX+8)
   \   07C3  DDB609            OR      (IX+9)
   \   07C6  DDB60A            OR      (IX+10)
   \   07C9  DDB60B            OR      (IX+11)
   \   07CC  2046              JR      NZ,?0095
   \   07CE            ?0094:
    942                  if (clst == 0) {                /* Create a new chain */
   \   07CE  FD4E0D            LD      C,(IY+13)
   \   07D1  FD460E            LD      B,(IY+14)
   \   07D4  FD6E0B            LD      L,(IY+11)
   \   07D7  DD75FA            LD      (IX-6),L
   \   07DA  FD660C            LD      H,(IY+12)
   \   07DD  DD74FB            LD      (IX-5),H
   \   07E0  DD71FC            LD      (IX-4),C
   \   07E3  DD70FD            LD      (IX-3),B
    943                          scl = fs->last_clust;                   /* Get suggested start point */
   \   07E6  7D                LD      A,L
   \   07E7  B4                OR      H
   \   07E8  B1                OR      C
   \   07E9  B0                OR      B
   \   07EA  2818              JR      Z,?0098
   \   07EC  FD4E1B            LD      C,(IY+27)
   \   07EF  FD461C            LD      B,(IY+28)
   \   07F2  ED42              SBC     HL,BC
   \   07F4  DD6EFC            LD      L,(IX-4)
   \   07F7  DD66FD            LD      H,(IX-3)
   \   07FA  FD4E1D            LD      C,(IY+29)
   \   07FD  FD461E            LD      B,(IY+30)
   \   0800  ED42              SBC     HL,BC
   \   0802  387E              JR      C,?0100
   \   0804            ?0098:
   \   0804            ?0099:
   \   0804            ?0096:
   \   0804  AF                XOR     A
   \   0805  DD36FA01          LD      (IX-6),1
   \   0809  DD77FB            LD      (IX-5),A
   \   080C  DD77FC            LD      (IX-4),A
   \   080F  DD77FD            LD      (IX-3),A
   \   0812            ?0097:
    944                          if (!scl || scl >= fs->n_fatent) scl = 1;
    945                  }
   \   0812  186E              JR      ?0100
   \   0814            ?0095:
    946                  else {                                  /* Stretch the current chain */
   \   0814  DD6E0A            LD      L,(IX+10)
   \   0817  DD660B            LD      H,(IX+11)
   \   081A  E5                PUSH    HL
   \   081B  DD6E08            LD      L,(IX+8)
   \   081E  DD6609            LD      H,(IX+9)
   \   0821  E5                PUSH    HL
   \   0822  FDE5              PUSH    IY
   \   0824  D1                POP     DE
   \   0825  CDB602            CALL    get_fat
   \   0828  F1                POP     AF
   \   0829  F1                POP     AF
   \   082A  DD75F6            LD      (IX-10),L
   \   082D  DD74F7            LD      (IX-9),H
   \   0830  DD71F8            LD      (IX-8),C
   \   0833  DD70F9            LD      (IX-7),B
    947                          cs = get_fat(fs, clst);                 /* Check the cluster status */
   \   0836  59                LD      E,C
   \   0837  50                LD      D,B
   \   0838  A7                AND     A
   \   0839  010200            LD      BC,2
   \   083C  ED42              SBC     HL,BC
   \   083E  EB                EX      DE,HL
   \   083F  0B                DEC     BC
   \   0840  0B                DEC     BC
   \   0841  ED42              SBC     HL,BC
   \   0843  3006              JR      NC,?0102
   \   0845            ?0101:
   \   0845  210100            LD      HL,1
    948                          if (cs < 2) return 1;                   /* It is an invalid cluster */
   \   0848  C31E0A            JP      ?0131
   \   084B            ?0102:
   \   084B  DD6EF6            LD      L,(IX-10)
   \   084E  DD66F7            LD      H,(IX-9)
   \   0851  FD4E1B            LD      C,(IY+27)
   \   0854  FD461C            LD      B,(IY+28)
   \   0857  ED42              SBC     HL,BC
   \   0859  DD6EF8            LD      L,(IX-8)
   \   085C  DD66F9            LD      H,(IX-7)
   \   085F  FD4E1D            LD      C,(IY+29)
   \   0862  FD461E            LD      B,(IY+30)
   \   0865  ED42              SBC     HL,BC
   \   0867  DA1209            JP      C,?0115
   \   086A            ?0103:
    949                          if (cs < fs->n_fatent) return cs;       /* It is already followed by next cluster */
   \   086A            ?0104:
   \   086A  DD4E0A            LD      C,(IX+10)
   \   086D  DD460B            LD      B,(IX+11)
   \   0870  DD6E08            LD      L,(IX+8)
   \   0873  DD6609            LD      H,(IX+9)
   \   0876  DD75FA            LD      (IX-6),L
   \   0879  DD74FB            LD      (IX-5),H
   \   087C  DD71FC            LD      (IX-4),C
   \   087F  DD70FD            LD      (IX-3),B
   \   0882            ?0100:
    950                          scl = clst;
    951                  }
    952          
   \   0882  DD4EFC            LD      C,(IX-4)
   \   0885  DD46FD            LD      B,(IX-3)
   \   0888  DD6EFA            LD      L,(IX-6)
   \   088B  DD66FB            LD      H,(IX-5)
   \   088E  DD75F2            LD      (IX-14),L
   \   0891  DD74F3            LD      (IX-13),H
   \   0894  DD71F4            LD      (IX-12),C
   \   0897  DD70F5            LD      (IX-11),B
   \   089A            ?0106:
    953                  ncl = scl;                              /* Start cluster */
    954                  for (;;) {
   \   089A  CD230A            CALL    ?1050
    955                          ncl++;                                                  /* Next cluster */
   \   089D  A7                AND     A
   \   089E  FD4E1B            LD      C,(IY+27)
   \   08A1  FD461C            LD      B,(IY+28)
   \   08A4  ED42              SBC     HL,BC
   \   08A6  DD6EF4            LD      L,(IX-12)
   \   08A9  DD66F5            LD      H,(IX-11)
   \   08AC  FD4E1D            LD      C,(IY+29)
   \   08AF  FD461E            LD      B,(IY+30)
   \   08B2  ED42              SBC     HL,BC
   \   08B4  3825              JR      C,?0110
   \   08B6            ?0107:
    956                          if (ncl >= fs->n_fatent) {              /* Wrap around */
   \   08B6  AF                XOR     A
   \   08B7  DD36F202          LD      (IX-14),2
   \   08BB  DD77F3            LD      (IX-13),A
   \   08BE  DD77F4            LD      (IX-12),A
   \   08C1  DD77F5            LD      (IX-11),A
    957                                  ncl = 2;
   \   08C4  DD6EFA            LD      L,(IX-6)
   \   08C7  DD66FB            LD      H,(IX-5)
   \   08CA  010200            LD      BC,2
   \   08CD  ED42              SBC     HL,BC
   \   08CF  DD6EFC            LD      L,(IX-4)
   \   08D2  DD66FD            LD      H,(IX-3)
   \   08D5  0B                DEC     BC
   \   08D6  0B                DEC     BC
   \   08D7  ED42              SBC     HL,BC
   \   08D9  3866              JR      C,?0931
   \   08DB            ?0109:
    958                                  if (ncl > scl) return 0;        /* No free cluster */
   \   08DB            ?0110:
   \   08DB            ?0108:
    959                          }
   \   08DB  DD6EF4            LD      L,(IX-12)
   \   08DE  DD66F5            LD      H,(IX-11)
   \   08E1  E5                PUSH    HL
   \   08E2  DD6EF2            LD      L,(IX-14)
   \   08E5  DD66F3            LD      H,(IX-13)
   \   08E8  E5                PUSH    HL
   \   08E9  FDE5              PUSH    IY
   \   08EB  D1                POP     DE
   \   08EC  CDB602            CALL    get_fat
   \   08EF  F1                POP     AF
   \   08F0  F1                POP     AF
   \   08F1  DD75F6            LD      (IX-10),L
   \   08F4  DD74F7            LD      (IX-9),H
   \   08F7  DD71F8            LD      (IX-8),C
   \   08FA  DD70F9            LD      (IX-7),B
    960                          cs = get_fat(fs, ncl);                  /* Get the cluster status */
   \   08FD  7D                LD      A,L
   \   08FE  B4                OR      H
   \   08FF  B1                OR      C
   \   0900  B0                OR      B
   \   0901  2849              JR      Z,?0105
   \   0903            ?0111:
   \   0903            ?0112:
    961                          if (cs == 0) break;                             /* Found a free cluster */
   \   0903  7D                LD      A,L
   \   0904  A4                AND     H
   \   0905  A1                AND     C
   \   0906  A0                AND     B
   \   0907  3C                INC     A
   \   0908  2808              JR      Z,?0115
   \   090A  3E01              LD      A,1
   \   090C  AD                XOR     L
   \   090D  B4                OR      H
   \   090E  B1                OR      C
   \   090F  B0                OR      B
   \   0910  200F              JR      NZ,?0114
   \   0912            ?0115:
   \   0912            ?0116:
   \   0912            ?0113:
    962                          if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   \   0912  DD4EF8            LD      C,(IX-8)
   \   0915  DD46F9            LD      B,(IX-7)
   \   0918  DD6EF6            LD      L,(IX-10)
   \   091B  DD66F7            LD      H,(IX-9)
    963                                  return cs;
   \   091E  C31E0A            JP      ?0131
   \   0921            ?0114:
   \   0921  DD6EF2            LD      L,(IX-14)
   \   0924  DD66F3            LD      H,(IX-13)
   \   0927  DD4EFA            LD      C,(IX-6)
   \   092A  DD46FB            LD      B,(IX-5)
   \   092D  ED42              SBC     HL,BC
   \   092F  2018              JR      NZ,?0118
   \   0931  DD6EF4            LD      L,(IX-12)
   \   0934  DD66F5            LD      H,(IX-11)
   \   0937  DD4EFC            LD      C,(IX-4)
   \   093A  DD46FD            LD      B,(IX-3)
   \   093D  ED42              SBC     HL,BC
   \   093F  2008              JR      NZ,?0118
   \   0941            ?0117:
   \   0941            ?0931:
   \   0941  010000            LD      BC,0
   \   0944  69                LD      L,C
   \   0945  60                LD      H,B
    964                          if (ncl == scl) return 0;               /* No free cluster */
   \   0946  C31E0A            JP      ?0131
   \   0949            ?0118:
    965                  }
    966          
   \   0949  C39A08            JP      ?0106
   \   094C            ?0105:
   \   094C  21FF0F            LD      HL,4095
   \   094F  E5                PUSH    HL
   \   0950  65                LD      H,L
   \   0951  E5                PUSH    HL
   \   0952  DD6EF4            LD      L,(IX-12)
   \   0955  DD66F5            LD      H,(IX-11)
   \   0958  E5                PUSH    HL
   \   0959  DD6EF2            LD      L,(IX-14)
   \   095C  DD66F3            LD      H,(IX-13)
   \   095F  E5                PUSH    HL
   \   0960  FDE5              PUSH    IY
   \   0962  D1                POP     DE
   \   0963  CD8504            CALL    put_fat
   \   0966  E1                POP     HL
   \   0967  E1                POP     HL
   \   0968  E1                POP     HL
   \   0969  E1                POP     HL
   \   096A  DD77FE            LD      (IX-2),A
    967                  res = put_fat(fs, ncl, 0x0FFFFFFF);     /* Mark the new cluster "last link" */
   \   096D  B7                OR      A
   \   096E  2037              JR      NZ,?0120
   \   0970  DD7E08            LD      A,(IX+8)
   \   0973  DDB609            OR      (IX+9)
   \   0976  DDB60A            OR      (IX+10)
   \   0979  DDB60B            OR      (IX+11)
   \   097C  2829              JR      Z,?0120
   \   097E            ?0122:
   \   097E            ?0121:
   \   097E            ?0119:
    968                  if (res == FR_OK && clst != 0) {
   \   097E  DD6EF4            LD      L,(IX-12)
   \   0981  DD66F5            LD      H,(IX-11)
   \   0984  E5                PUSH    HL
   \   0985  DD6EF2            LD      L,(IX-14)
   \   0988  DD66F3            LD      H,(IX-13)
   \   098B  E5                PUSH    HL
   \   098C  DD6E0A            LD      L,(IX+10)
   \   098F  DD660B            LD      H,(IX+11)
   \   0992  E5                PUSH    HL
   \   0993  DD6E08            LD      L,(IX+8)
   \   0996  DD6609            LD      H,(IX+9)
   \   0999  E5                PUSH    HL
   \   099A  FDE5              PUSH    IY
   \   099C  D1                POP     DE
   \   099D  CD8504            CALL    put_fat
   \   09A0  E1                POP     HL
   \   09A1  E1                POP     HL
   \   09A2  E1                POP     HL
   \   09A3  E1                POP     HL
   \   09A4  DD77FE            LD      (IX-2),A
   \   09A7            ?0120:
    969                          res = put_fat(fs, clst, ncl);   /* Link it to the previous one if needed */
    970                  }
   \   09A7  AF                XOR     A
   \   09A8  DDB6FE            OR      (IX-2)
   \   09AB  2048              JR      NZ,?0124
   \   09AD            ?0123:
    971                  if (res == FR_OK) {
   \   09AD  DD4EF4            LD      C,(IX-12)
   \   09B0  DD46F5            LD      B,(IX-11)
   \   09B3  DD6EF2            LD      L,(IX-14)
   \   09B6  FD750B            LD      (IY+11),L
   \   09B9  DD66F3            LD      H,(IX-13)
   \   09BC  FD740C            LD      (IY+12),H
   \   09BF  FD710D            LD      (IY+13),C
   \   09C2  FD700E            LD      (IY+14),B
    972                          fs->last_clust = ncl;                   /* Update FSINFO */
   \   09C5  FD7E0F            LD      A,(IY+15)
   \   09C8  FDA610            AND     (IY+16)
   \   09CB  FDA611            AND     (IY+17)
   \   09CE  FDA612            AND     (IY+18)
   \   09D1  3C                INC     A
   \   09D2  283E              JR      Z,?0127
   \   09D4            ?0125:
    973                          if (fs->free_clust != 0xFFFFFFFF) {
   \   09D4  FD6E0F            LD      L,(IY+15)
   \   09D7  FD6610            LD      H,(IY+16)
   \   09DA  FD4E11            LD      C,(IY+17)
   \   09DD  FD4612            LD      B,(IY+18)
   \   09E0  CD0000            CALL    ?L_DEC_L03
   \   09E3  FD750F            LD      (IY+15),L
   \   09E6  FD7410            LD      (IY+16),H
   \   09E9  FD7111            LD      (IY+17),C
   \   09EC  FD7012            LD      (IY+18),B
    974                                  fs->free_clust--;
   \   09EF  FD360601          LD      (IY+6),1
   \   09F3            ?0126:
    975                                  fs->fsi_flag = 1;
    976                          }
   \   09F3  181D              JR      ?0127
   \   09F5            ?0124:
    977                  } else {
   \   09F5  47                LD      B,A
   \   09F6  05                DEC     B
   \   09F7  2007              JR      NZ,?0129
   \   09F9  01FFFF            LD      BC,65535
   \   09FC  69                LD      L,C
   \   09FD  60                LD      H,B
   \   09FE  1806              JR      ?0130
   \   0A00            ?0129:
   \   0A00  010000            LD      BC,0
   \   0A03  210100            LD      HL,1
   \   0A06            ?0130:
   \   0A06  DD75F2            LD      (IX-14),L
   \   0A09  DD74F3            LD      (IX-13),H
   \   0A0C  DD71F4            LD      (IX-12),C
   \   0A0F  DD70F5            LD      (IX-11),B
   \   0A12            ?0127:
    978                          ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    979                  }
    980          
   \   0A12  DD4EF4            LD      C,(IX-12)
   \   0A15  DD46F5            LD      B,(IX-11)
   \   0A18  DD6EF2            LD      L,(IX-14)
   \   0A1B  DD66F3            LD      H,(IX-13)
    981                  return ncl;             /* Return new cluster number or error code */
   \   0A1E            ?0131:
   \   0A1E  FDE1              POP     IY
   \   0A20  C30000            JP      ?LEAVE_32_L09
   \   0A23            ?1050:
   \   0A23  DD6EF2            LD      L,(IX-14)
   \   0A26  DD66F3            LD      H,(IX-13)
   \   0A29  DD4EF4            LD      C,(IX-12)
   \   0A2C  DD46F5            LD      B,(IX-11)
   \   0A2F  CD0000            CALL    ?L_INC_L03
   \   0A32  DD75F2            LD      (IX-14),L
   \   0A35  DD74F3            LD      (IX-13),H
   \   0A38  DD71F4            LD      (IX-12),C
   \   0A3B  DD70F5            LD      (IX-11),B
   \   0A3E  C9                RET
    982          }
    983          #endif /* !_FS_READONLY */
    984          
    985          
    986          
    987          /*-----------------------------------------------------------------------*/
    988          /* FAT handling - Convert offset into cluster with link map table        */
    989          /*-----------------------------------------------------------------------*/
    990          
    991          #if _USE_FASTSEEK
   1011          #endif  /* _USE_FASTSEEK */
   1012          
   1013          
   1014          
   1015          /*-----------------------------------------------------------------------*/
   1016          /* Directory handling - Set directory index                              */
   1017          /*-----------------------------------------------------------------------*/
   1018          
   1019          static
   1020          FRESULT dir_sdi (
   1021                  DIR *dj,                /* Pointer to directory object */
   1022                  WORD idx                /* Directory index number */
   1023          )
   \   0A3F            dir_sdi:
   \   0A3F  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   0A42  FCFF              DEFW    -4
   \   0A44  FDE5              PUSH    IY
   \   0A46  D9                EXX
   \   0A47  C5                PUSH    BC
   \   0A48  D5                PUSH    DE
   \   0A49  D9                EXX
   \   0A4A  C5                PUSH    BC
   \   0A4B  D9                EXX
   \   0A4C  D1                POP     DE
   \   0A4D  D9                EXX
   \   0A4E  DD6E02            LD      L,(IX+2)
   \   0A51  DD6603            LD      H,(IX+3)
   \   0A54  E5                PUSH    HL
   \   0A55  FDE1              POP     IY
   1024          {
   1025                  DWORD clst;
   1026                  WORD ic;
   1027          
   1028          
   \   0A57  FD7104            LD      (IY+4),C
   \   0A5A  FD7005            LD      (IY+5),B
   1029                  dj->index = idx;
   \   0A5D  FD4E08            LD      C,(IY+8)
   \   0A60  FD4609            LD      B,(IY+9)
   \   0A63  FD6E06            LD      L,(IY+6)
   \   0A66  DD75FC            LD      (IX-4),L
   \   0A69  FD6607            LD      H,(IY+7)
   \   0A6C  DD74FD            LD      (IX-3),H
   \   0A6F  DD71FE            LD      (IX-2),C
   \   0A72  DD70FF            LD      (IX-1),B
   1030                  clst = dj->sclust;
   \   0A75  3E01              LD      A,1
   \   0A77  AD                XOR     L
   \   0A78  B4                OR      H
   \   0A79  B1                OR      C
   \   0A7A  B0                OR      B
   \   0A7B  2828              JR      Z,?0134
   \   0A7D  FD6E00            LD      L,(IY+0)
   \   0A80  FD6601            LD      H,(IY+1)
   \   0A83  011B00            LD      BC,27
   \   0A86  09                ADD     HL,BC
   \   0A87  4E                LD      C,(HL)
   \   0A88  23                INC     HL
   \   0A89  46                LD      B,(HL)
   \   0A8A  23                INC     HL
   \   0A8B  5E                LD      E,(HL)
   \   0A8C  23                INC     HL
   \   0A8D  56                LD      D,(HL)
   \   0A8E  D5                PUSH    DE
   \   0A8F  C5                PUSH    BC
   \   0A90  A7                AND     A
   \   0A91  DD6EFC            LD      L,(IX-4)
   \   0A94  DD66FD            LD      H,(IX-3)
   \   0A97  C1                POP     BC
   \   0A98  ED42              SBC     HL,BC
   \   0A9A  DD6EFE            LD      L,(IX-2)
   \   0A9D  DD66FF            LD      H,(IX-1)
   \   0AA0  C1                POP     BC
   \   0AA1  ED42              SBC     HL,BC
   \   0AA3  3802              JR      C,?0133
   \   0AA5            ?0134:
   \   0AA5            ?0135:
   \   0AA5            ?0132:
   1031                  if (clst == 1 || clst >= dj->fs->n_fatent)      /* Check start cluster range */
   \   0AA5  1873              JR      ?0933
   1032                          return FR_INT_ERR;
   \   0AA7            ?0133:
   \   0AA7  DD7EFC            LD      A,(IX-4)
   \   0AAA  DDB6FD            OR      (IX-3)
   \   0AAD  DDB6FE            OR      (IX-2)
   \   0AB0  DDB6FF            OR      (IX-1)
   \   0AB3  2029              JR      NZ,?0137
   \   0AB5  FD6E00            LD      L,(IY+0)
   \   0AB8  FD6601            LD      H,(IY+1)
   \   0ABB  7E                LD      A,(HL)
   \   0ABC  FE03              CP      3
   \   0ABE  201E              JR      NZ,?0137
   \   0AC0            ?0139:
   \   0AC0            ?0138:
   \   0AC0            ?0136:
   1033                  if (!clst && dj->fs->fs_type == FS_FAT32)       /* Replace cluster# 0 with root cluster# if in FAT32 */
   \   0AC0  FD6E00            LD      L,(IY+0)
   \   0AC3  FD6601            LD      H,(IY+1)
   \   0AC6  012700            LD      BC,39
   \   0AC9  09                ADD     HL,BC
   \   0ACA  5E                LD      E,(HL)
   \   0ACB  23                INC     HL
   \   0ACC  56                LD      D,(HL)
   \   0ACD  23                INC     HL
   \   0ACE  4E                LD      C,(HL)
   \   0ACF  23                INC     HL
   \   0AD0  46                LD      B,(HL)
   \   0AD1  EB                EX      DE,HL
   \   0AD2  DD75FC            LD      (IX-4),L
   \   0AD5  DD74FD            LD      (IX-3),H
   \   0AD8  DD71FE            LD      (IX-2),C
   \   0ADB  DD70FF            LD      (IX-1),B
   \   0ADE            ?0137:
   1034                          clst = dj->fs->dirbase;
   1035          
   \   0ADE  DD7EFC            LD      A,(IX-4)
   \   0AE1  DDB6FD            OR      (IX-3)
   \   0AE4  DDB6FE            OR      (IX-2)
   \   0AE7  DDB6FF            OR      (IX-1)
   \   0AEA  2047              JR      NZ,?0141
   \   0AEC            ?0140:
   1036                  if (clst == 0) {        /* Static table (root-dir in FAT12/16) */
   \   0AEC  DD4EFE            LD      C,(IX-2)
   \   0AEF  DD46FF            LD      B,(IX-1)
   \   0AF2  DD6EFC            LD      L,(IX-4)
   \   0AF5  FD750A            LD      (IY+10),L
   \   0AF8  DD66FD            LD      H,(IX-3)
   \   0AFB  FD740B            LD      (IY+11),H
   \   0AFE  FD710C            LD      (IY+12),C
   \   0B01  FD700D            LD      (IY+13),B
   1037                          dj->clust = clst;
   \   0B04  FD6E00            LD      L,(IY+0)
   \   0B07  FD6601            LD      H,(IY+1)
   \   0B0A  010900            LD      BC,9
   \   0B0D  09                ADD     HL,BC
   \   0B0E  4E                LD      C,(HL)
   \   0B0F  23                INC     HL
   \   0B10  46                LD      B,(HL)
   \   0B11  D9                EXX
   \   0B12  D5                PUSH    DE
   \   0B13  D9                EXX
   \   0B14  E1                POP     HL
   \   0B15  A7                AND     A
   \   0B16  ED42              SBC     HL,BC
   \   0B18  3803              JR      C,?0143
   \   0B1A            ?0142:
   1038                          if (idx >= dj->fs->n_rootdir)           /* Index is out of range */
   \   0B1A            ?0933:
   \   0B1A  C3B50B            JP      ?0152
   1039                                  return FR_INT_ERR;
   \   0B1D            ?0143:
   \   0B1D  FD6E00            LD      L,(IY+0)
   \   0B20  FD6601            LD      H,(IY+1)
   \   0B23  012700            LD      BC,39
   \   0B26  09                ADD     HL,BC
   \   0B27  4E                LD      C,(HL)
   \   0B28  23                INC     HL
   \   0B29  46                LD      B,(HL)
   \   0B2A  23                INC     HL
   \   0B2B  5E                LD      E,(HL)
   \   0B2C  23                INC     HL
   \   0B2D  56                LD      D,(HL)
   \   0B2E  D5                PUSH    DE
   \   0B2F  C5                PUSH    BC
   \   0B30  C3EC0B            JP      ?0932
   1040                          dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);       /* Sector# */
   1041                  }
   \   0B33            ?0141:
   1042                  else {                          /* Dynamic table (sub-dirs or root-dir in FAT32) */
   \   0B33  FD6E00            LD      L,(IY+0)
   \   0B36  FD6601            LD      H,(IY+1)
   \   0B39  23                INC     HL
   \   0B3A  23                INC     HL
   \   0B3B  23                INC     HL
   \   0B3C  6E                LD      L,(HL)
   \   0B3D  2600              LD      H,0
   \   0B3F  29                ADD     HL,HL
   \   0B40  29                ADD     HL,HL
   \   0B41  29                ADD     HL,HL
   \   0B42  29                ADD     HL,HL
   \   0B43  E5                PUSH    HL
   \   0B44  D9                EXX
   \   0B45  C1                POP     BC
   \   0B46            ?0935:
   \   0B46            ?0146:
   1043                          ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;       /* Entries per cluster */
   \   0B46  C5                PUSH    BC
   \   0B47  D9                EXX
   \   0B48  C1                POP     BC
   \   0B49  D9                EXX
   \   0B4A  D5                PUSH    DE
   \   0B4B  D9                EXX
   \   0B4C  E1                POP     HL
   \   0B4D  A7                AND     A
   \   0B4E  ED42              SBC     HL,BC
   \   0B50  3871              JR      C,?0145
   \   0B52            ?0147:
   1044                          while (idx >= ic) {     /* Follow cluster chain */
   \   0B52  DD6EFE            LD      L,(IX-2)
   \   0B55  DD66FF            LD      H,(IX-1)
   \   0B58  E5                PUSH    HL
   \   0B59  DD6EFC            LD      L,(IX-4)
   \   0B5C  DD66FD            LD      H,(IX-3)
   \   0B5F  E5                PUSH    HL
   \   0B60  CD380C            CALL    ?1049
   \   0B63  F1                POP     AF
   \   0B64  F1                POP     AF
   \   0B65  DD75FC            LD      (IX-4),L
   \   0B68  DD74FD            LD      (IX-3),H
   \   0B6B  DD71FE            LD      (IX-2),C
   \   0B6E  DD70FF            LD      (IX-1),B
   1045                                  clst = get_fat(dj->fs, clst);                           /* Get next cluster */
   \   0B71  7D                LD      A,L
   \   0B72  A4                AND     H
   \   0B73  A1                AND     C
   \   0B74  A0                AND     B
   \   0B75  3C                INC     A
   \   0B76  2005              JR      NZ,?0149
   \   0B78            ?0148:
   \   0B78  3E01              LD      A,1
   1046                                  if (clst == 0xFFFFFFFF) return FR_DISK_ERR;     /* Disk error */
   \   0B7A  C32F0C            JP      ?0154
   \   0B7D            ?0149:
   \   0B7D  010200            LD      BC,2
   \   0B80  ED42              SBC     HL,BC
   \   0B82  DD6EFE            LD      L,(IX-2)
   \   0B85  DD66FF            LD      H,(IX-1)
   \   0B88  0B                DEC     BC
   \   0B89  0B                DEC     BC
   \   0B8A  ED42              SBC     HL,BC
   \   0B8C  3827              JR      C,?0152
   \   0B8E  FD6E00            LD      L,(IY+0)
   \   0B91  FD6601            LD      H,(IY+1)
   \   0B94  0E1B              LD      C,27
   \   0B96  09                ADD     HL,BC
   \   0B97  4E                LD      C,(HL)
   \   0B98  23                INC     HL
   \   0B99  46                LD      B,(HL)
   \   0B9A  23                INC     HL
   \   0B9B  5E                LD      E,(HL)
   \   0B9C  23                INC     HL
   \   0B9D  56                LD      D,(HL)
   \   0B9E  D5                PUSH    DE
   \   0B9F  C5                PUSH    BC
   \   0BA0  A7                AND     A
   \   0BA1  DD6EFC            LD      L,(IX-4)
   \   0BA4  DD66FD            LD      H,(IX-3)
   \   0BA7  C1                POP     BC
   \   0BA8  ED42              SBC     HL,BC
   \   0BAA  DD6EFE            LD      L,(IX-2)
   \   0BAD  DD66FF            LD      H,(IX-1)
   \   0BB0  C1                POP     BC
   \   0BB1  ED42              SBC     HL,BC
   \   0BB3  3804              JR      C,?0151
   \   0BB5            ?0152:
   \   0BB5            ?0153:
   \   0BB5            ?0150:
   1047                                  if (clst < 2 || clst >= dj->fs->n_fatent)       /* Reached to end of table or int error */
   \   0BB5  3E02              LD      A,2
   1048                                          return FR_INT_ERR;
   \   0BB7  1876              JR      ?0154
   \   0BB9            ?0151:
   \   0BB9  D9                EXX
   \   0BBA  C5                PUSH    BC
   \   0BBB  EB                EX      DE,HL
   \   0BBC  D1                POP     DE
   \   0BBD  A7                AND     A
   \   0BBE  ED52              SBC     HL,DE
   \   0BC0  EB                EX      DE,HL
   \   0BC1  1883              JR      ?0935
   1049                                  idx -= ic;
   1050                          }
   \   0BC3            ?0145:
   \   0BC3  DD4EFE            LD      C,(IX-2)
   \   0BC6  DD46FF            LD      B,(IX-1)
   \   0BC9  DD6EFC            LD      L,(IX-4)
   \   0BCC  FD750A            LD      (IY+10),L
   \   0BCF  DD66FD            LD      H,(IX-3)
   \   0BD2  FD740B            LD      (IY+11),H
   \   0BD5  FD710C            LD      (IY+12),C
   \   0BD8  FD700D            LD      (IY+13),B
   1051                          dj->clust = clst;
   \   0BDB  69                LD      L,C
   \   0BDC  60                LD      H,B
   \   0BDD  C5                PUSH    BC
   \   0BDE  DD6EFC            LD      L,(IX-4)
   \   0BE1  DD66FD            LD      H,(IX-3)
   \   0BE4  E5                PUSH    HL
   \   0BE5  CD410C            CALL    ?1052
   \   0BE8  F1                POP     AF
   \   0BE9  F1                POP     AF
   \   0BEA  C5                PUSH    BC
   \   0BEB  E5                PUSH    HL
   \   0BEC            ?0932:
   \   0BEC  0604              LD      B,4
   \   0BEE  D9                EXX
   \   0BEF  D5                PUSH    DE
   \   0BF0  D9                EXX
   \   0BF1  D1                POP     DE
   \   0BF2  CD6604            CALL    ?1044
   \   0BF5  C1                POP     BC
   \   0BF6  09                ADD     HL,BC
   \   0BF7  EB                EX      DE,HL
   \   0BF8  C1                POP     BC
   \   0BF9  ED4A              ADC     HL,BC
   \   0BFB  4D                LD      C,L
   \   0BFC  44                LD      B,H
   \   0BFD  EB                EX      DE,HL
   \   0BFE  FD750E            LD      (IY+14),L
   \   0C01  FD740F            LD      (IY+15),H
   \   0C04  FD7110            LD      (IY+16),C
   \   0C07  FD7011            LD      (IY+17),B
   \   0C0A            ?0144:
   1052                          dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);      /* Sector# */
   1053                  }
   1054          
   \   0C0A  FD6E00            LD      L,(IY+0)
   \   0C0D  FD6601            LD      H,(IY+1)
   \   0C10  013300            LD      BC,51
   \   0C13  09                ADD     HL,BC
   \   0C14  E5                PUSH    HL
   \   0C15  D9                EXX
   \   0C16  D5                PUSH    DE
   \   0C17  D9                EXX
   \   0C18  C1                POP     BC
   \   0C19  79                LD      A,C
   \   0C1A  E60F              AND     15
   \   0C1C  6F                LD      L,A
   \   0C1D  2600              LD      H,0
   \   0C1F  29                ADD     HL,HL
   \   0C20  29                ADD     HL,HL
   \   0C21  29                ADD     HL,HL
   \   0C22  29                ADD     HL,HL
   \   0C23  29                ADD     HL,HL
   \   0C24  4D                LD      C,L
   \   0C25  44                LD      B,H
   \   0C26  E1                POP     HL
   \   0C27  09                ADD     HL,BC
   \   0C28  FD7512            LD      (IY+18),L
   \   0C2B  FD7413            LD      (IY+19),H
   1055                  dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR; /* Ptr to the entry in the sector */
   1056          
   \   0C2E  AF                XOR     A
   1057                  return FR_OK;   /* Seek succeeded */
   \   0C2F            ?0154:
   \   0C2F  D9                EXX
   \   0C30  D1                POP     DE
   \   0C31  C1                POP     BC
   \   0C32  D9                EXX
   \   0C33  FDE1              POP     IY
   \   0C35  C30000            JP      ?LEAVE_DIRECT_L09
   \   0C38            ?1049:
   \   0C38  FD5E00            LD      E,(IY+0)
   \   0C3B  FD5601            LD      D,(IY+1)
   \   0C3E  C3B602            JP      get_fat
   \   0C41            ?1052:
   \   0C41  FD5E00            LD      E,(IY+0)
   \   0C44  FD5601            LD      D,(IY+1)
   \   0C47  C33902            JP      clust2sect
   1058          }
   1059          
   1060          
   1061          
   1062          
   1063          /*-----------------------------------------------------------------------*/
   1064          /* Directory handling - Move directory index next                        */
   1065          /*-----------------------------------------------------------------------*/
   1066          
   1067          static
   1068          FRESULT dir_next (      /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   1069                  DIR *dj,                /* Pointer to directory object */
   1070                  int stretch             /* 0: Do not stretch table, 1: Stretch table if needed */
   1071          )
   \   0C4A            dir_next:
   \   0C4A  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   0C4D  F8FF              DEFW    65528
   \   0C4F  FDE5              PUSH    IY
   \   0C51  D9                EXX
   \   0C52  C5                PUSH    BC
   \   0C53  D9                EXX
   \   0C54  DD6E02            LD      L,(IX+2)
   \   0C57  DD6603            LD      H,(IX+3)
   \   0C5A  E5                PUSH    HL
   \   0C5B  FDE1              POP     IY
   1072          {
   1073                  DWORD clst;
   1074                  WORD i;
   1075          
   1076          
   \   0C5D  FD6E04            LD      L,(IY+4)
   \   0C60  FD6605            LD      H,(IY+5)
   \   0C63  23                INC     HL
   \   0C64  E5                PUSH    HL
   \   0C65  D9                EXX
   \   0C66  C1                POP     BC
   \   0C67  D9                EXX
   1077                  i = dj->index + 1;
   \   0C68  7D                LD      A,L
   \   0C69  B4                OR      H
   \   0C6A  2853              JR      Z,?0939
   \   0C6C  FD7E0E            LD      A,(IY+14)
   \   0C6F  FDB60F            OR      (IY+15)
   \   0C72  FDB610            OR      (IY+16)
   \   0C75  FDB611            OR      (IY+17)
   \   0C78  2845              JR      Z,?0939
   \   0C7A            ?0157:
   \   0C7A            ?0158:
   \   0C7A            ?0155:
   1078                  if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
   1079                          return FR_NO_FILE;
   1080          
   \   0C7A            ?0156:
   \   0C7A  7D                LD      A,L
   \   0C7B  E60F              AND     15
   \   0C7D  C2680E            JP      NZ,?0167
   \   0C80            ?0159:
   1081                  if (!(i % (SS(dj->fs) / SZ_DIR))) {     /* Sector changed? */
   \   0C80  FD6E0E            LD      L,(IY+14)
   \   0C83  FD660F            LD      H,(IY+15)
   \   0C86  FD4E10            LD      C,(IY+16)
   \   0C89  FD4611            LD      B,(IY+17)
   \   0C8C  CD0000            CALL    ?L_INC_L03
   \   0C8F  FD750E            LD      (IY+14),L
   \   0C92  FD740F            LD      (IY+15),H
   \   0C95  FD7110            LD      (IY+16),C
   \   0C98  FD7011            LD      (IY+17),B
   1082                          dj->sect++;                                     /* Next sector */
   1083          
   \   0C9B  FD7E0A            LD      A,(IY+10)
   \   0C9E  FDB60B            OR      (IY+11)
   \   0CA1  FDB60C            OR      (IY+12)
   \   0CA4  FDB60D            OR      (IY+13)
   \   0CA7  201C              JR      NZ,?0162
   \   0CA9            ?0161:
   1084                          if (dj->clust == 0) {   /* Static table */
   \   0CA9  FD6E00            LD      L,(IY+0)
   \   0CAC  FD6601            LD      H,(IY+1)
   \   0CAF  010900            LD      BC,9
   \   0CB2  09                ADD     HL,BC
   \   0CB3  4E                LD      C,(HL)
   \   0CB4  23                INC     HL
   \   0CB5  46                LD      B,(HL)
   \   0CB6  D9                EXX
   \   0CB7  C5                PUSH    BC
   \   0CB8  D9                EXX
   \   0CB9  E1                POP     HL
   \   0CBA  A7                AND     A
   \   0CBB  ED42              SBC     HL,BC
   \   0CBD  3803              JR      C,?0164
   \   0CBF            ?0163:
   1085                                  if (i >= dj->fs->n_rootdir)     /* Report EOT when end of table */
   \   0CBF            ?0939:
   \   0CBF  C3550D            JP      ?0940
   1086                                          return FR_NO_FILE;
   \   0CC2            ?0164:
   1087                          }
   \   0CC2  C3680E            JP      ?0167
   \   0CC5            ?0162:
   1088                          else {                                  /* Dynamic table */
   \   0CC5  0604              LD      B,4
   \   0CC7  D9                EXX
   \   0CC8  C5                PUSH    BC
   \   0CC9  D9                EXX
   \   0CCA  D1                POP     DE
   \   0CCB  CD0000            CALL    ?US_RSH_L02
   \   0CCE  FD6E00            LD      L,(IY+0)
   \   0CD1  FD6601            LD      H,(IY+1)
   \   0CD4  23                INC     HL
   \   0CD5  23                INC     HL
   \   0CD6  23                INC     HL
   \   0CD7  4E                LD      C,(HL)
   \   0CD8  0600              LD      B,0
   \   0CDA  0B                DEC     BC
   \   0CDB  7B                LD      A,E
   \   0CDC  A1                AND     C
   \   0CDD  67                LD      H,A
   \   0CDE  7A                LD      A,D
   \   0CDF  A0                AND     B
   \   0CE0  B4                OR      H
   \   0CE1  C2680E            JP      NZ,?0167
   \   0CE4            ?0166:
   1089                                  if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
   \   0CE4  FD6E0C            LD      L,(IY+12)
   \   0CE7  FD660D            LD      H,(IY+13)
   \   0CEA  E5                PUSH    HL
   \   0CEB  FD6E0A            LD      L,(IY+10)
   \   0CEE  FD660B            LD      H,(IY+11)
   \   0CF1  E5                PUSH    HL
   \   0CF2  CD380C            CALL    ?1049
   \   0CF5  F1                POP     AF
   \   0CF6  F1                POP     AF
   \   0CF7  DD75F8            LD      (IX-8),L
   \   0CFA  DD74F9            LD      (IX-7),H
   \   0CFD  DD71FA            LD      (IX-6),C
   \   0D00  DD70FB            LD      (IX-5),B
   1090                                          clst = get_fat(dj->fs, dj->clust);                              /* Get next cluster */
   \   0D03  C5                PUSH    BC
   \   0D04  E5                PUSH    HL
   \   0D05  A7                AND     A
   \   0D06  210100            LD      HL,1
   \   0D09  C1                POP     BC
   \   0D0A  ED42              SBC     HL,BC
   \   0D0C  210000            LD      HL,0
   \   0D0F  C1                POP     BC
   \   0D10  ED42              SBC     HL,BC
   \   0D12  3078              JR      NC,?0941
   \   0D14            ?0168:
   1091                                          if (clst <= 1) return FR_INT_ERR;
   \   0D14            ?0169:
   \   0D14  DD7EF8            LD      A,(IX-8)
   \   0D17  DDA6F9            AND     (IX-7)
   \   0D1A  DDA6FA            AND     (IX-6)
   \   0D1D  DDA6FB            AND     (IX-5)
   \   0D20  3C                INC     A
   \   0D21  CA160E            JP      Z,?0944
   \   0D24            ?0170:
   1092                                          if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   \   0D24            ?0171:
   \   0D24  FD6E00            LD      L,(IY+0)
   \   0D27  FD6601            LD      H,(IY+1)
   \   0D2A  011B00            LD      BC,27
   \   0D2D  09                ADD     HL,BC
   \   0D2E  4E                LD      C,(HL)
   \   0D2F  23                INC     HL
   \   0D30  46                LD      B,(HL)
   \   0D31  23                INC     HL
   \   0D32  5E                LD      E,(HL)
   \   0D33  23                INC     HL
   \   0D34  56                LD      D,(HL)
   \   0D35  D5                PUSH    DE
   \   0D36  C5                PUSH    BC
   \   0D37  A7                AND     A
   \   0D38  DD6EF8            LD      L,(IX-8)
   \   0D3B  DD66F9            LD      H,(IX-7)
   \   0D3E  C1                POP     BC
   \   0D3F  ED42              SBC     HL,BC
   \   0D41  DD6EFA            LD      L,(IX-6)
   \   0D44  DD66FB            LD      H,(IX-5)
   \   0D47  C1                POP     BC
   \   0D48  ED42              SBC     HL,BC
   \   0D4A  DA350E            JP      C,?0173
   \   0D4D            ?0172:
   1093                                          if (clst >= dj->fs->n_fatent) {                                 /* When it reached end of dynamic table */
   1094          #if !_FS_READONLY
   1095                                                  BYTE c;
   \   0D4D  DD7E04            LD      A,(IX+4)
   \   0D50  DDB605            OR      (IX+5)
   \   0D53  2005              JR      NZ,?0175
   \   0D55            ?0174:
   \   0D55            ?0940:
   \   0D55  3E04              LD      A,4
   1096                                                  if (!stretch) return FR_NO_FILE;                        /* When do not stretch, report EOT */
   \   0D57  C3970E            JP      ?0190
   \   0D5A            ?0175:
   \   0D5A  FD6E0C            LD      L,(IY+12)
   \   0D5D  FD660D            LD      H,(IY+13)
   \   0D60  E5                PUSH    HL
   \   0D61  FD6E0A            LD      L,(IY+10)
   \   0D64  FD660B            LD      H,(IY+11)
   \   0D67  E5                PUSH    HL
   \   0D68  CD9F0E            CALL    ?1053
   \   0D6B  F1                POP     AF
   \   0D6C  F1                POP     AF
   \   0D6D  DD75F8            LD      (IX-8),L
   \   0D70  DD74F9            LD      (IX-7),H
   \   0D73  DD71FA            LD      (IX-6),C
   \   0D76  DD70FB            LD      (IX-5),B
   1097                                                  clst = create_chain(dj->fs, dj->clust);         /* Stretch cluster chain */
   \   0D79  7D                LD      A,L
   \   0D7A  B4                OR      H
   \   0D7B  B1                OR      C
   \   0D7C  B0                OR      B
   \   0D7D  2005              JR      NZ,?0177
   \   0D7F            ?0176:
   \   0D7F  3E07              LD      A,7
   1098                                                  if (clst == 0) return FR_DENIED;                        /* No free cluster */
   \   0D81  C3970E            JP      ?0190
   \   0D84            ?0177:
   \   0D84  3E01              LD      A,1
   \   0D86  AD                XOR     L
   \   0D87  B4                OR      H
   \   0D88  B1                OR      C
   \   0D89  B0                OR      B
   \   0D8A  2005              JR      NZ,?0179
   \   0D8C            ?0178:
   \   0D8C            ?0941:
   \   0D8C  3E02              LD      A,2
   1099                                                  if (clst == 1) return FR_INT_ERR;
   \   0D8E  C3970E            JP      ?0190
   \   0D91            ?0179:
   \   0D91  7D                LD      A,L
   \   0D92  A4                AND     H
   \   0D93  A1                AND     C
   \   0D94  A0                AND     B
   \   0D95  3C                INC     A
   \   0D96  2813              JR      Z,?0943
   \   0D98            ?0180:
   1100                                                  if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1101                                                  /* Clean-up stretched table */
   \   0D98            ?0181:
   \   0D98  210000            LD      HL,0
   \   0D9B  E5                PUSH    HL
   \   0D9C  E5                PUSH    HL
   \   0D9D  FD5E00            LD      E,(IY+0)
   \   0DA0  FD5601            LD      D,(IY+1)
   \   0DA3  CD0000            CALL    move_window
   \   0DA6  E1                POP     HL
   \   0DA7  E1                POP     HL
   \   0DA8  B7                OR      A
   \   0DA9  2802              JR      Z,?0183
   \   0DAB            ?0182:
   \   0DAB            ?0943:
   \   0DAB  1869              JR      ?0944
   1102                                                  if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
   \   0DAD            ?0183:
   \   0DAD  010002            LD      BC,512
   \   0DB0  FD6E00            LD      L,(IY+0)
   \   0DB3  FD6601            LD      H,(IY+1)
   \   0DB6  113300            LD      DE,51
   \   0DB9  19                ADD     HL,DE
   \   0DBA  EB                EX      DE,HL
   \   0DBB  69                LD      L,C
   \   0DBC  CD0000            CALL    ?MEMSET_L11
   1103                                                  memset(dj->fs->win, 0, SS(dj->fs));                     /* Clear window buffer */
   \   0DBF  DD6EFA            LD      L,(IX-6)
   \   0DC2  DD66FB            LD      H,(IX-5)
   \   0DC5  E5                PUSH    HL
   \   0DC6  DD6EF8            LD      L,(IX-8)
   \   0DC9  DD66F9            LD      H,(IX-7)
   \   0DCC  E5                PUSH    HL
   \   0DCD  CD410C            CALL    ?1052
   \   0DD0  F1                POP     AF
   \   0DD1  F1                POP     AF
   \   0DD2  E5                PUSH    HL
   \   0DD3  FD6E00            LD      L,(IY+0)
   \   0DD6  FD6601            LD      H,(IY+1)
   \   0DD9  112F00            LD      DE,47
   \   0DDC  19                ADD     HL,DE
   \   0DDD  D1                POP     DE
   \   0DDE  73                LD      (HL),E
   \   0DDF  23                INC     HL
   \   0DE0  72                LD      (HL),D
   \   0DE1  23                INC     HL
   \   0DE2  71                LD      (HL),C
   \   0DE3  23                INC     HL
   \   0DE4  70                LD      (HL),B
   1104                                                  dj->fs->winsect = clust2sect(dj->fs, clst);     /* Cluster start sector */
   \   0DE5  DD36FE00          LD      (IX-2),0
   \   0DE9            ?0185:
   \   0DE9  FD6E00            LD      L,(IY+0)
   \   0DEC  FD6601            LD      H,(IY+1)
   \   0DEF  23                INC     HL
   \   0DF0  23                INC     HL
   \   0DF1  23                INC     HL
   \   0DF2  DD7EFE            LD      A,(IX-2)
   \   0DF5  BE                CP      (HL)
   \   0DF6  FD6E00            LD      L,(IY+0)
   \   0DF9  FD6601            LD      H,(IY+1)
   \   0DFC  302D              JR      NC,?0184
   \   0DFE            ?0186:
   1105                                                  for (c = 0; c < dj->fs->csize; c++) {           /* Fill the new cluster with 0 */
   \   0DFE  010500            LD      BC,5
   \   0E01  09                ADD     HL,BC
   \   0E02  3601              LD      (HL),1
   1106                                                          dj->fs->wflag = 1;
   \   0E04  68                LD      L,B
   \   0E05  60                LD      H,B
   \   0E06  E5                PUSH    HL
   \   0E07  E5                PUSH    HL
   \   0E08  FD5E00            LD      E,(IY+0)
   \   0E0B  FD5601            LD      D,(IY+1)
   \   0E0E  CD0000            CALL    move_window
   \   0E11  E1                POP     HL
   \   0E12  E1                POP     HL
   \   0E13  B7                OR      A
   \   0E14  2804              JR      Z,?0189
   \   0E16            ?0188:
   \   0E16            ?0944:
   \   0E16  3E01              LD      A,1
   1107                                                          if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   \   0E18  187D              JR      ?0190
   \   0E1A            ?0189:
   \   0E1A  FD6E00            LD      L,(IY+0)
   \   0E1D  FD6601            LD      H,(IY+1)
   \   0E20  0E2F              LD      C,47
   \   0E22  09                ADD     HL,BC
   \   0E23  CD0000            CALL    ?L_INCASG_L03
   \   0E26  DD34FE            INC     (IX-2)
   1108                                                          dj->fs->winsect++;
   1109                                                  }
   \   0E29  18BE              JR      ?0185
   \   0E2B            ?0184:
   \   0E2B  012F00            LD      BC,47
   \   0E2E  09                ADD     HL,BC
   \   0E2F  5F                LD      E,A
   \   0E30  48                LD      C,B
   \   0E31  51                LD      D,C
   \   0E32  CD0000            CALL    ?L_SUBASG_L03
   \   0E35            ?0173:
   1110                                                  dj->fs->winsect -= c;                                           /* Rewind window address */
   1111          #else
   1113          #endif
   1114                                          }
   \   0E35  DD4EFA            LD      C,(IX-6)
   \   0E38  DD46FB            LD      B,(IX-5)
   \   0E3B  DD6EF8            LD      L,(IX-8)
   \   0E3E  FD750A            LD      (IY+10),L
   \   0E41  DD66F9            LD      H,(IX-7)
   \   0E44  FD740B            LD      (IY+11),H
   \   0E47  FD710C            LD      (IY+12),C
   \   0E4A  FD700D            LD      (IY+13),B
   1115                                          dj->clust = clst;                               /* Initialize data for new cluster */
   \   0E4D  69                LD      L,C
   \   0E4E  60                LD      H,B
   \   0E4F  C5                PUSH    BC
   \   0E50  DD6EF8            LD      L,(IX-8)
   \   0E53  DD66F9            LD      H,(IX-7)
   \   0E56  E5                PUSH    HL
   \   0E57  CD410C            CALL    ?1052
   \   0E5A  F1                POP     AF
   \   0E5B  F1                POP     AF
   \   0E5C  FD750E            LD      (IY+14),L
   \   0E5F  FD740F            LD      (IY+15),H
   \   0E62  FD7110            LD      (IY+16),C
   \   0E65  FD7011            LD      (IY+17),B
   \   0E68            ?0167:
   \   0E68            ?0165:
   \   0E68            ?0160:
   1116                                          dj->sect = clust2sect(dj->fs, clst);
   1117                                  }
   1118                          }
   1119                  }
   1120          
   \   0E68  D9                EXX
   \   0E69  C5                PUSH    BC
   \   0E6A  D9                EXX
   \   0E6B  E1                POP     HL
   \   0E6C  FD7504            LD      (IY+4),L
   \   0E6F  FD7405            LD      (IY+5),H
   1121                  dj->index = i;
   \   0E72  FD6E00            LD      L,(IY+0)
   \   0E75  FD6601            LD      H,(IY+1)
   \   0E78  013300            LD      BC,51
   \   0E7B  09                ADD     HL,BC
   \   0E7C  E5                PUSH    HL
   \   0E7D  D9                EXX
   \   0E7E  C5                PUSH    BC
   \   0E7F  D9                EXX
   \   0E80  C1                POP     BC
   \   0E81  79                LD      A,C
   \   0E82  E60F              AND     15
   \   0E84  6F                LD      L,A
   \   0E85  2600              LD      H,0
   \   0E87  29                ADD     HL,HL
   \   0E88  29                ADD     HL,HL
   \   0E89  29                ADD     HL,HL
   \   0E8A  29                ADD     HL,HL
   \   0E8B  29                ADD     HL,HL
   \   0E8C  4D                LD      C,L
   \   0E8D  44                LD      B,H
   \   0E8E  E1                POP     HL
   \   0E8F  09                ADD     HL,BC
   \   0E90  FD7512            LD      (IY+18),L
   \   0E93  FD7413            LD      (IY+19),H
   1122                  dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1123          
   \   0E96  AF                XOR     A
   1124                  return FR_OK;
   \   0E97            ?0190:
   \   0E97  D9                EXX
   \   0E98  C1                POP     BC
   \   0E99  D9                EXX
   \   0E9A  FDE1              POP     IY
   \   0E9C  C30000            JP      ?LEAVE_DIRECT_L09
   \   0E9F            ?1053:
   \   0E9F  FD5E00            LD      E,(IY+0)
   \   0EA2  FD5601            LD      D,(IY+1)
   \   0EA5  C3B007            JP      create_chain
   1125          }
   1126          
   1127          
   1128          
   1129          
   1130          /*-----------------------------------------------------------------------*/
   1131          /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
   1132          /*-----------------------------------------------------------------------*/
   1133          #if _USE_LFN
   1201          #if !_FS_READONLY
   1230          #endif
   1231          #endif
   1232          
   1233          
   1234          
   1235          /*-----------------------------------------------------------------------*/
   1236          /* Create numbered name                                                  */
   1237          /*-----------------------------------------------------------------------*/
   1238          #if _USE_LFN
   1277          #endif
   1278          
   1279          
   1280          
   1281          
   1282          /*-----------------------------------------------------------------------*/
   1283          /* Calculate sum of an SFN                                               */
   1284          /*-----------------------------------------------------------------------*/
   1285          #if _USE_LFN
   1297          #endif
   1298          
   1299          
   1300          
   1301          
   1302          /*-----------------------------------------------------------------------*/
   1303          /* Directory handling - Find an object in the directory                  */
   1304          /*-----------------------------------------------------------------------*/
   1305          
   1306          static
   1307          FRESULT dir_find (
   1308                  DIR *dj                 /* Pointer to the directory object linked to the file name */
   1309          )
   \   0EA8            dir_find:
   \   0EA8  C5                PUSH    BC
   \   0EA9  FDE5              PUSH    IY
   \   0EAB  DDE5              PUSH    IX
   \   0EAD  D9                EXX
   \   0EAE  C5                PUSH    BC
   \   0EAF  D9                EXX
   \   0EB0  F5                PUSH    AF
   1310          {
   1311                  FRESULT res;
   1312                  BYTE c, *dir;
   1313          #if _USE_LFN
   1315          #endif
   1316          
   \   0EB1  CD1B0F            CALL    ?1054
   1317                  res = dir_sdi(dj, 0);                   /* Rewind directory object */
   \   0EB4  2050              JR      NZ,?0193
   \   0EB6            ?0191:
   1318                  if (res != FR_OK) return res;
   1319          
   1320          #if _USE_LFN
   1322          #endif
   \   0EB6            ?0192:
   \   0EB6            ?0195:
   1323                  do {
   \   0EB6  DD6E10            LD      L,(IX+16)
   \   0EB9  DD6611            LD      H,(IX+17)
   \   0EBC  E5                PUSH    HL
   \   0EBD  DD6E0E            LD      L,(IX+14)
   \   0EC0  DD660F            LD      H,(IX+15)
   \   0EC3  E5                PUSH    HL
   \   0EC4  CD120F            CALL    ?1045
   \   0EC7  E1                POP     HL
   \   0EC8  E1                POP     HL
   \   0EC9  FD6F              LD      IYL,A
   1324                          res = move_window(dj->fs, dj->sect);
   \   0ECB  B7                OR      A
   \   0ECC  2038              JR      NZ,?0193
   \   0ECE            ?0196:
   \   0ECE            ?0197:
   1325                          if (res != FR_OK) break;
   \   0ECE  D9                EXX
   \   0ECF  DD4E12            LD      C,(IX+18)
   \   0ED2  DD4613            LD      B,(IX+19)
   1326                          dir = dj->dir;                                  /* Ptr to the directory entry of current index */
   \   0ED5  C5                PUSH    BC
   \   0ED6  D9                EXX
   \   0ED7  E1                POP     HL
   \   0ED8  46                LD      B,(HL)
   1327                          c = dir[DIR_Name];
   \   0ED9  B0                OR      B
   \   0EDA  2005              JR      NZ,?0199
   \   0EDC            ?0198:
   \   0EDC  FD2E04            LD      IYL,4
   \   0EDF  1825              JR      ?0193
   \   0EE1            ?0199:
   1328                          if (c == 0) { res = FR_NO_FILE; break; }        /* Reached to end of table */
   1329          #if _USE_LFN    /* LFN configuration */
   1350          #else           /* Non LFN configuration */
   \   0EE1  210B00            LD      HL,11
   \   0EE4  D9                EXX
   \   0EE5  C5                PUSH    BC
   \   0EE6  D9                EXX
   \   0EE7  C1                POP     BC
   \   0EE8  09                ADD     HL,BC
   \   0EE9  CB5E              BIT     3,(HL)
   \   0EEB  2014              JR      NZ,?0201
   \   0EED  010B00            LD      BC,11
   \   0EF0  D9                EXX
   \   0EF1  C5                PUSH    BC
   \   0EF2  D9                EXX
   \   0EF3  D1                POP     DE
   \   0EF4  DD6E14            LD      L,(IX+20)
   \   0EF7  DD6615            LD      H,(IX+21)
   \   0EFA  CD0000            CALL    ?MEMCMP_L11
   \   0EFD  7D                LD      A,L
   \   0EFE  B4                OR      H
   \   0EFF  2805              JR      Z,?0193
   \   0F01            ?0203:
   \   0F01            ?0202:
   \   0F01            ?0200:
   1351                          if (!(dir[DIR_Attr] & AM_VOL) && !memcmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   \   0F01            ?0201:
   1352                                  break;
   1353          #endif
   \   0F01  CD280F            CALL    ?1056
   1354                          res = dir_next(dj, 0);          /* Next entry */
   \   0F04  28B0              JR      Z,?0192
   \   0F06            ?0193:
   1355                  } while (res == FR_OK);
   1356          
   \   0F06  FD7D              LD      A,IYL
   1357                  return res;
   \   0F08            ?0204:
   \   0F08  E1                POP     HL
   \   0F09            ?1034:
   \   0F09  D9                EXX
   \   0F0A  C1                POP     BC
   \   0F0B  D9                EXX
   \   0F0C  DDE1              POP     IX
   \   0F0E  FDE1              POP     IY
   \   0F10  C1                POP     BC
   \   0F11  C9                RET
   \   0F12            ?1045:
   \   0F12  DD5E00            LD      E,(IX+0)
   \   0F15  DD5601            LD      D,(IX+1)
   \   0F18  C30000            JP      move_window
   \   0F1B            ?1054:
   \   0F1B  D5                PUSH    DE
   \   0F1C  DDE1              POP     IX
   \   0F1E  010000            LD      BC,0
   \   0F21            ?1055:
   \   0F21  CD3F0A            CALL    dir_sdi
   \   0F24  FD6F              LD      IYL,A
   \   0F26  B7                OR      A
   \   0F27  C9                RET
   \   0F28            ?1056:
   \   0F28  010000            LD      BC,0
   \   0F2B            ?1057:
   \   0F2B  DDE5              PUSH    IX
   \   0F2D  D1                POP     DE
   \   0F2E  CD4A0C            CALL    dir_next
   \   0F31  FD6F              LD      IYL,A
   \   0F33  B7                OR      A
   \   0F34  C9                RET
   1358          }
   1359          
   1360          
   1361          
   1362          
   1363          /*-----------------------------------------------------------------------*/
   1364          /* Read an object from the directory                                     */
   1365          /*-----------------------------------------------------------------------*/
   1366          #if _FS_MINIMIZE <= 1
   1367          static
   1368          FRESULT dir_read (
   1369                  DIR *dj                 /* Pointer to the directory object that pointing the entry to be read */
   1370          )
   \   0F35            dir_read:
   \   0F35  C5                PUSH    BC
   \   0F36  FDE5              PUSH    IY
   \   0F38  DDE5              PUSH    IX
   \   0F3A  D9                EXX
   \   0F3B  C5                PUSH    BC
   \   0F3C  D9                EXX
   \   0F3D  D5                PUSH    DE
   \   0F3E  DDE1              POP     IX
   1371          {
   1372                  FRESULT res;
   1373                  BYTE c, *dir;
   1374          #if _USE_LFN
   1376          #endif
   1377          
   \   0F40  FD2E04            LD      IYL,4
   \   0F43            ?0206:
   1378                  res = FR_NO_FILE;
   \   0F43  DD7E0E            LD      A,(IX+14)
   \   0F46  DDB60F            OR      (IX+15)
   \   0F49  DDB610            OR      (IX+16)
   \   0F4C  DDB611            OR      (IX+17)
   \   0F4F  2845              JR      Z,?0205
   \   0F51            ?0207:
   1379                  while (dj->sect) {
   \   0F51  DD6E10            LD      L,(IX+16)
   \   0F54  DD6611            LD      H,(IX+17)
   \   0F57  E5                PUSH    HL
   \   0F58  DD6E0E            LD      L,(IX+14)
   \   0F5B  DD660F            LD      H,(IX+15)
   \   0F5E  E5                PUSH    HL
   \   0F5F  CD120F            CALL    ?1045
   \   0F62  E1                POP     HL
   \   0F63  E1                POP     HL
   \   0F64  FD6F              LD      IYL,A
   1380                          res = move_window(dj->fs, dj->sect);
   \   0F66  B7                OR      A
   \   0F67  202D              JR      NZ,?0205
   \   0F69            ?0208:
   \   0F69            ?0209:
   1381                          if (res != FR_OK) break;
   \   0F69  D9                EXX
   \   0F6A  DD4E12            LD      C,(IX+18)
   \   0F6D  DD4613            LD      B,(IX+19)
   1382                          dir = dj->dir;                                  /* Ptr to the directory entry of current index */
   \   0F70  C5                PUSH    BC
   \   0F71  D9                EXX
   \   0F72  E1                POP     HL
   \   0F73  46                LD      B,(HL)
   \   0F74  FD60              LD      IYH,B
   1383                          c = dir[DIR_Name];
   \   0F76  04                INC     B
   \   0F77  05                DEC     B
   \   0F78  2005              JR      NZ,?0211
   \   0F7A            ?0210:
   \   0F7A  FD2E04            LD      IYL,4
   \   0F7D  1817              JR      ?0205
   \   0F7F            ?0211:
   1384                          if (c == 0) { res = FR_NO_FILE; break; }        /* Reached to end of table */
   1385          #if _USE_LFN    /* LFN configuration */
   1404          #else           /* Non LFN configuration */
   \   0F7F  FD7C              LD      A,IYH
   \   0F81  FEE5              CP      229
   \   0F83  280C              JR      Z,?0213
   \   0F85            ?0216:
   \   0F85            ?0217:
   \   0F85  210B00            LD      HL,11
   \   0F88  D9                EXX
   \   0F89  C5                PUSH    BC
   \   0F8A  D9                EXX
   \   0F8B  C1                POP     BC
   \   0F8C  09                ADD     HL,BC
   \   0F8D  CB5E              BIT     3,(HL)
   \   0F8F  2805              JR      Z,?0205
   \   0F91            ?0215:
   \   0F91            ?0214:
   \   0F91            ?0212:
   1405                          if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
   \   0F91            ?0213:
   1406                                  break;
   1407          #endif
   \   0F91  CD280F            CALL    ?1056
   1408                          res = dir_next(dj, 0);                          /* Next entry */
   \   0F94  28AD              JR      Z,?0206
   \   0F96            ?0218:
   \   0F96            ?0219:
   1409                          if (res != FR_OK) break;
   1410                  }
   1411          
   \   0F96            ?0205:
   \   0F96  FD45              LD      B,IYL
   \   0F98  04                INC     B
   \   0F99  05                DEC     B
   \   0F9A  280D              JR      Z,?0221
   \   0F9C            ?0220:
   \   0F9C  AF                XOR     A
   \   0F9D  DD770E            LD      (IX+14),A
   \   0FA0  DD770F            LD      (IX+15),A
   \   0FA3  DD7710            LD      (IX+16),A
   \   0FA6  DD7711            LD      (IX+17),A
   \   0FA9            ?0221:
   1412                  if (res != FR_OK) dj->sect = 0;
   1413          
   \   0FA9  FD7D              LD      A,IYL
   1414                  return res;
   \   0FAB  C3090F            JP      ?1034
   1415          }
   1416          #endif
   1417          
   1418          
   1419          
   1420          /*-----------------------------------------------------------------------*/
   1421          /* Register an object to the directory                                   */
   1422          /*-----------------------------------------------------------------------*/
   1423          #if !_FS_READONLY
   1424          static
   1425          FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   1426                  DIR *dj                         /* Target directory with object name to be created */
   1427          )
   \   0FAE            dir_register:
   \   0FAE  C5                PUSH    BC
   \   0FAF  FDE5              PUSH    IY
   \   0FB1  DDE5              PUSH    IX
   \   0FB3  D9                EXX
   \   0FB4  C5                PUSH    BC
   \   0FB5  D9                EXX
   \   0FB6  F5                PUSH    AF
   1428          {
   1429                  FRESULT res;
   1430                  BYTE c, *dir;
   1431          #if _USE_LFN    /* LFN configuration */
   1494          #else   /* Non LFN configuration */
   \   0FB7  CD1B0F            CALL    ?1054
   1495                  res = dir_sdi(dj, 0);
   \   0FBA  2030              JR      NZ,?0224
   \   0FBC            ?0222:
   \   0FBC            ?0226:
   1496                  if (res == FR_OK) {
   1497                          do {    /* Find a blank entry for the SFN */
   \   0FBC  DD6E10            LD      L,(IX+16)
   \   0FBF  DD6611            LD      H,(IX+17)
   \   0FC2  E5                PUSH    HL
   \   0FC3  DD6E0E            LD      L,(IX+14)
   \   0FC6  DD660F            LD      H,(IX+15)
   \   0FC9  E5                PUSH    HL
   \   0FCA  CD120F            CALL    ?1045
   \   0FCD  E1                POP     HL
   \   0FCE  E1                POP     HL
   \   0FCF  FD6F              LD      IYL,A
   1498                                  res = move_window(dj->fs, dj->sect);
   \   0FD1  B7                OR      A
   \   0FD2  2018              JR      NZ,?0224
   \   0FD4            ?0227:
   \   0FD4            ?0228:
   1499                                  if (res != FR_OK) break;
   \   0FD4  DD6E12            LD      L,(IX+18)
   \   0FD7  DD6613            LD      H,(IX+19)
   \   0FDA  46                LD      B,(HL)
   \   0FDB  78                LD      A,B
   1500                                  c = *dj->dir;
   \   0FDC  FEE5              CP      229
   \   0FDE  280C              JR      Z,?0224
   \   0FE0  AF                XOR     A
   \   0FE1  B0                OR      B
   \   0FE2  2808              JR      Z,?0224
   \   0FE4            ?0231:
   \   0FE4            ?0232:
   \   0FE4            ?0229:
   \   0FE4            ?0230:
   1501                                  if (c == DDE || c == 0) break;  /* Is it a blank entry? */
   \   0FE4  010100            LD      BC,1
   \   0FE7  CD2B0F            CALL    ?1057
   1502                                  res = dir_next(dj, 1);                  /* Next entry with table stretch */
   \   0FEA  28D0              JR      Z,?0222
   \   0FEC            ?0224:
   \   0FEC            ?0223:
   1503                          } while (res == FR_OK);
   1504                  }
   1505          #endif
   1506          
   \   0FEC  FD45              LD      B,IYL
   \   0FEE  04                INC     B
   \   0FEF  05                DEC     B
   \   0FF0  2040              JR      NZ,?0236
   \   0FF2            ?0233:
   1507                  if (res == FR_OK) {             /* Initialize the SFN entry */
   \   0FF2  DD6E10            LD      L,(IX+16)
   \   0FF5  DD6611            LD      H,(IX+17)
   \   0FF8  E5                PUSH    HL
   \   0FF9  DD6E0E            LD      L,(IX+14)
   \   0FFC  DD660F            LD      H,(IX+15)
   \   0FFF  E5                PUSH    HL
   \   1000  CD120F            CALL    ?1045
   \   1003  E1                POP     HL
   \   1004  E1                POP     HL
   \   1005  FD6F              LD      IYL,A
   1508                          res = move_window(dj->fs, dj->sect);
   \   1007  B7                OR      A
   \   1008  2028              JR      NZ,?0236
   \   100A            ?0235:
   1509                          if (res == FR_OK) {
   \   100A  D9                EXX
   \   100B  DD4E12            LD      C,(IX+18)
   \   100E  DD4613            LD      B,(IX+19)
   \   1011  D9                EXX
   1510                                  dir = dj->dir;
   \   1012  0E20              LD      C,32
   \   1014  D9                EXX
   \   1015  C5                PUSH    BC
   \   1016  D9                EXX
   \   1017  D1                POP     DE
   \   1018  68                LD      L,B
   \   1019  CD0000            CALL    ?MEMSET_L11
   1511                                  memset(dir, 0, SZ_DIR); /* Clean the entry */
   \   101C  010B00            LD      BC,11
   \   101F  DD6E14            LD      L,(IX+20)
   \   1022  DD6615            LD      H,(IX+21)
   \   1025  EDB0              LDIR
   1512                                  memcpy(dir, dj->fn, 11);        /* Put SFN */
   1513          #if _USE_LFN
   1515          #endif
   \   1027  DD6E00            LD      L,(IX+0)
   \   102A  DD6601            LD      H,(IX+1)
   \   102D  0E05              LD      C,5
   \   102F  09                ADD     HL,BC
   \   1030  3601              LD      (HL),1
   \   1032            ?0236:
   \   1032            ?0234:
   1516                                  dj->fs->wflag = 1;
   1517                          }
   1518                  }
   1519          
   \   1032  FD7D              LD      A,IYL
   1520                  return res;
   \   1034  E1                POP     HL
   \   1035  C3090F            JP      ?1034
   1521          }
   1522          #endif /* !_FS_READONLY */
   1523          
   1524          
   1525          
   1526          
   1527          /*-----------------------------------------------------------------------*/
   1528          /* Remove an object from the directory                                   */
   1529          /*-----------------------------------------------------------------------*/
   1530          #if !_FS_READONLY && !_FS_MINIMIZE
   1531          static
   1532          FRESULT dir_remove (    /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   1533                  DIR *dj                         /* Directory object pointing the entry to be removed */
   1534          )
   \   1038            dir_remove:
   \   1038  C5                PUSH    BC
   \   1039  FDE5              PUSH    IY
   \   103B  DDE5              PUSH    IX
   \   103D  D5                PUSH    DE
   \   103E  DDE1              POP     IX
   1535          {
   1536                  FRESULT res;
   1537          #if _USE_LFN    /* LFN configuration */
   1554          #else                   /* Non LFN configuration */
   \   1040  210400            LD      HL,4
   \   1043  19                ADD     HL,DE
   \   1044  4E                LD      C,(HL)
   \   1045  23                INC     HL
   \   1046  46                LD      B,(HL)
   \   1047  CD3F0A            CALL    dir_sdi
   1555                  res = dir_sdi(dj, dj->index);
   \   104A  B7                OR      A
   \   104B  202A              JR      NZ,?0242
   \   104D            ?0239:
   1556                  if (res == FR_OK) {
   \   104D  DD6E10            LD      L,(IX+16)
   \   1050  DD6611            LD      H,(IX+17)
   \   1053  E5                PUSH    HL
   \   1054  DD6E0E            LD      L,(IX+14)
   \   1057  DD660F            LD      H,(IX+15)
   \   105A  E5                PUSH    HL
   \   105B  CD120F            CALL    ?1045
   \   105E  E1                POP     HL
   \   105F  E1                POP     HL
   1557                          res = move_window(dj->fs, dj->sect);
   \   1060  B7                OR      A
   \   1061  2014              JR      NZ,?0242
   \   1063            ?0241:
   1558                          if (res == FR_OK) {
   \   1063  DD6E12            LD      L,(IX+18)
   \   1066  DD6613            LD      H,(IX+19)
   \   1069  36E5              LD      (HL),229
   1559                                  *dj->dir = DDE;                 /* Mark the entry "deleted" */
   \   106B  DD6E00            LD      L,(IX+0)
   \   106E  DD6601            LD      H,(IX+1)
   \   1071  010500            LD      BC,5
   \   1074  09                ADD     HL,BC
   \   1075  3601              LD      (HL),1
   \   1077            ?0242:
   \   1077            ?0240:
   1560                                  dj->fs->wflag = 1;
   1561                          }
   1562                  }
   1563          #endif
   1564          
   1565                  return res;
   \   1077  DDE1              POP     IX
   \   1079  FDE1              POP     IY
   \   107B  C1                POP     BC
   \   107C  C9                RET
   1566          }
   1567          #endif /* !_FS_READONLY */
   1568          
   1569          
   1570          
   1571          
   1572          /*-----------------------------------------------------------------------*/
   1573          /* Pick a segment and create the object name in directory form           */
   1574          /*-----------------------------------------------------------------------*/
   1575          
   1576          static
   1577          FRESULT create_name (
   1578                  DIR *dj,                        /* Pointer to the directory object */
   1579                  const TCHAR **path      /* Pointer to pointer to the segment in the path string */
   1580          )
   \   107D            create_name:
   \   107D  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1080  FAFF              DEFW    -6
   \   1082  FDE5              PUSH    IY
   \   1084  D9                EXX
   \   1085  C5                PUSH    BC
   \   1086  D5                PUSH    DE
   \   1087  D9                EXX
   1581          {
   1582          #ifdef _EXCVT
   1584          #endif
   1585          
   1586          #if _USE_LFN    /* LFN configuration */
   1601          #if !_LFN_UNICODE
   1611          #endif
   1618          #if _FS_RPATH
   1627          #endif
   1662          #ifdef _EXCVT
   1665          #else
   1667          #endif
   1707          #else   /* Non-LFN configuration */
   1708                  BYTE b, c, d, *sfn;
   1709                  UINT ni, si, i;
   1710                  const char *p;
   1711          
   1712                  /* Create file name in directory form */
   \   1088  0A                LD      A,(BC)
   \   1089  DD77FC            LD      (IX-4),A
   \   108C  03                INC     BC
   \   108D  0A                LD      A,(BC)
   \   108E  DD77FD            LD      (IX-3),A
   \   1091            ?0244:
   \   1091  DD6EFC            LD      L,(IX-4)
   \   1094  DD66FD            LD      H,(IX-3)
   \   1097  7E                LD      A,(HL)
   \   1098  FE2F              CP      47
   \   109A  2805              JR      Z,?0246
   \   109C  7E                LD      A,(HL)
   \   109D  FE5C              CP      92
   \   109F  200A              JR      NZ,?0243
   \   10A1            ?0246:
   \   10A1            ?0247:
   \   10A1            ?0245:
   \   10A1  DD34FC            INC     (IX-4)
   \   10A4  20EB              JR      NZ,?0244
   \   10A6  DD34FD            INC     (IX-3)
   1713                  for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
   \   10A9  18E6              JR      ?0244
   \   10AB            ?0243:
   \   10AB  211400            LD      HL,20
   \   10AE  DD4E02            LD      C,(IX+2)
   \   10B1  DD4603            LD      B,(IX+3)
   \   10B4  09                ADD     HL,BC
   \   10B5  46                LD      B,(HL)
   \   10B6  23                INC     HL
   \   10B7  66                LD      H,(HL)
   \   10B8  68                LD      L,B
   \   10B9  EB                EX      DE,HL
   1714                  sfn = dj->fn;
   \   10BA  010B00            LD      BC,11
   \   10BD  212000            LD      HL,32
   \   10C0  CD0000            CALL    ?MEMSET_L11
   1715                  memset(sfn, ' ', 11);
   1716                  si = i = b = 0; ni = 8;
   1717          #if _FS_RPATH
   \   10C3  DD74FA            LD      (IX-6),H
   \   10C6  D9                EXX
   \   10C7  110000            LD      DE,0
   \   10CA  010000            LD      BC,0
   \   10CD  D9                EXX
   \   10CE  DD36FE08          LD      (IX-2),8
   \   10D2  DD74FF            LD      (IX-1),H
   \   10D5  DD6EFC            LD      L,(IX-4)
   \   10D8  DD66FD            LD      H,(IX-3)
   \   10DB  7E                LD      A,(HL)
   \   10DC  FE2E              CP      46
   \   10DE  205F              JR      NZ,?0250
   \   10E0            ?0249:
   \   10E0            ?0252:
   1718                  if (p[si] == '.') { /* Is this a dot entry? */
   1719                          for (;;) {
   \   10E0  D9                EXX
   \   10E1  C5                PUSH    BC
   \   10E2  03                INC     BC
   \   10E3  D9                EXX
   \   10E4  E1                POP     HL
   \   10E5  DD4EFC            LD      C,(IX-4)
   \   10E8  DD46FD            LD      B,(IX-3)
   \   10EB  09                ADD     HL,BC
   \   10EC  46                LD      B,(HL)
   \   10ED  FD68              LD      IYL,B
   1720                                  c = (BYTE)p[si++];
   \   10EF  78                LD      A,B
   \   10F0  FE2E              CP      46
   \   10F2  2017              JR      NZ,?0251
   \   10F4  010300            LD      BC,3
   \   10F7  D9                EXX
   \   10F8  C5                PUSH    BC
   \   10F9  D9                EXX
   \   10FA  E1                POP     HL
   \   10FB  A7                AND     A
   \   10FC  ED42              SBC     HL,BC
   \   10FE  300B              JR      NC,?0251
   \   1100            ?0255:
   \   1100            ?0256:
   \   1100            ?0253:
   \   1100            ?0254:
   1721                                  if (c != '.' || si >= 3) break;
   \   1100  D9                EXX
   \   1101  D5                PUSH    DE
   \   1102  13                INC     DE
   \   1103  D9                EXX
   \   1104  E1                POP     HL
   \   1105  19                ADD     HL,DE
   \   1106  FD45              LD      B,IYL
   \   1108  70                LD      (HL),B
   1722                                  sfn[i++] = c;
   1723                          }
   \   1109  18D5              JR      ?0249
   \   110B            ?0251:
   \   110B  FE2F              CP      47
   \   110D  280A              JR      Z,?0258
   \   110F  FE5C              CP      92
   \   1111  2806              JR      Z,?0258
   \   1113  3E20              LD      A,32
   \   1115  FDBD              CP      IYL
   \   1117  386A              JR      C,?0276
   \   1119            ?0260:
   \   1119            ?0259:
   \   1119            ?0257:
   1724                          if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   \   1119            ?0258:
   \   1119  D9                EXX
   \   111A  C5                PUSH    BC
   \   111B  D9                EXX
   \   111C  E1                POP     HL
   \   111D  DD4EFC            LD      C,(IX-4)
   \   1120  DD46FD            LD      B,(IX-3)
   \   1123  09                ADD     HL,BC
   \   1124  E5                PUSH    HL
   \   1125  DD6E04            LD      L,(IX+4)
   \   1128  DD6605            LD      H,(IX+5)
   \   112B  C1                POP     BC
   \   112C  71                LD      (HL),C
   \   112D  23                INC     HL
   \   112E  70                LD      (HL),B
   1725                          *path = &p[si];                                                                 /* Return pointer to the next segment */
   \   112F  210B00            LD      HL,11
   \   1132  19                ADD     HL,DE
   \   1133  3E20              LD      A,32
   \   1135  FDBD              CP      IYL
   \   1137  3802              JR      C,?0262
   \   1139  3E24              LD      A,36
   \   113B            ?0262:
   \   113B  77                LD      (HL),A
   1726                          sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;       /* Set last segment flag if end of path */
   \   113C  C35512            JP      ?0949
   1727                          return FR_OK;
   \   113F            ?0250:
   \   113F            ?0265:
   1728                  }
   1729          #endif
   1730                  for (;;) {
   \   113F  D9                EXX
   \   1140  C5                PUSH    BC
   \   1141  03                INC     BC
   \   1142  D9                EXX
   \   1143  E1                POP     HL
   \   1144  DD4EFC            LD      C,(IX-4)
   \   1147  DD46FD            LD      B,(IX-3)
   \   114A  09                ADD     HL,BC
   \   114B  46                LD      B,(HL)
   \   114C  FD68              LD      IYL,B
   1731                          c = (BYTE)p[si++];
   \   114E  3E20              LD      A,32
   \   1150  B8                CP      B
   \   1151  300A              JR      NC,?0268
   \   1153  FD7D              LD      A,IYL
   \   1155  FE2F              CP      47
   \   1157  2804              JR      Z,?0268
   \   1159  FE5C              CP      92
   \   115B  2003              JR      NZ,?0267
   \   115D            ?0268:
   \   115D            ?0269:
   \   115D            ?0266:
   \   115D  C3EC11            JP      ?0264
   \   1160            ?0267:
   1732                          if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
   \   1160  FE2E              CP      46
   \   1162  280F              JR      Z,?0272
   \   1164  DD4EFE            LD      C,(IX-2)
   \   1167  DD46FF            LD      B,(IX-1)
   \   116A  D9                EXX
   \   116B  D5                PUSH    DE
   \   116C  D9                EXX
   \   116D  E1                POP     HL
   \   116E  A7                AND     A
   \   116F  ED42              SBC     HL,BC
   \   1171  3829              JR      C,?0271
   \   1173            ?0272:
   \   1173            ?0273:
   \   1173            ?0270:
   1733                          if (c == '.' || i >= ni) {
   \   1173  3E08              LD      A,8
   \   1175  DDAEFE            XOR     (IX-2)
   \   1178  DDB6FF            OR      (IX-1)
   \   117B  203B              JR      NZ,?0953
   \   117D  FD7D              LD      A,IYL
   \   117F  FE2E              CP      46
   \   1181  2802              JR      Z,?0275
   \   1183            ?0276:
   \   1183            ?0277:
   \   1183            ?0274:
   \   1183  1833              JR      ?0953
   1734                                  if (ni != 8 || c != '.') return FR_INVALID_NAME;
   \   1185            ?0275:
   1735                                  i = 8; ni = 11;
   \   1185  DDCBFA26          SLA     (IX-6)
   \   1189  DDCBFA26          SLA     (IX-6)
   \   118D  D9                EXX
   \   118E  110800            LD      DE,8
   \   1191  D9                EXX
   \   1192  DD36FE0B          LD      (IX-2),11
   \   1196  DD36FF00          LD      (IX-1),0
   \   119A  18A3              JR      ?0250
   \   119C            ?0271:
   1736                                  b <<= 2; continue;
   1737                          }
   \   119C  FE80              CP      128
   \   119E  3072              JR      NC,?0954
   \   11A0            ?0278:
   1738                          if (c >= 0x80) {                                /* Extended char? */
   1739                                  b |= 3;                                         /* Eliminate NT flag */
   1740          #ifdef _EXCVT
   1742          #else
   1743          #if !_DF1S      /* ASCII only cfg */
   1744                                  return FR_INVALID_NAME;
   1745          #endif
   1746          #endif
   \   11A0            ?0279:
   1747                          }
   \   11A0  AF                XOR     A
   \   11A1  2806              JR      Z,?0281
   \   11A3            ?0280:
   1748                          if (IsDBCS1(c)) {                               /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   \   11A3  D9                EXX
   \   11A4  C5                PUSH    BC
   \   11A5  D9                EXX
   \   11A6  E1                POP     HL
   1749                                  d = (BYTE)p[si++];                      /* Get 2nd byte */
   \   11A7  1869              JR      ?0954
   \   11A9            ?0284:
   \   11A9            ?0285:
   \   11A9            ?0282:
   1750                                  if (!IsDBCS2(d) || i >= ni - 1) /* Reject invalid DBC */
   1751                                          return FR_INVALID_NAME;
   \   11A9            ?0283:
   1752                                  sfn[i++] = c;
   1753                                  sfn[i++] = d;
   \   11A9            ?0281:
   1754                          } else {                                                /* Single byte code */
   \   11A9  D5                PUSH    DE
   \   11AA  FD4D              LD      C,IYL
   \   11AC  59                LD      E,C
   \   11AD  210000            LD      HL,?0289
   \   11B0  CD0000            CALL    ?STRCHR_L11
   \   11B3  7D                LD      A,L
   \   11B4  B4                OR      H
   \   11B5  D1                POP     DE
   \   11B6  2802              JR      Z,?0288
   \   11B8            ?0287:
   1755                                  if (strchr("\"*+,:;<=>\?[]|\x7F", c))   /* Reject illegal chrs for SFN */
   \   11B8            ?0953:
   \   11B8  1858              JR      ?0954
   1756                                          return FR_INVALID_NAME;
   \   11BA            ?0288:
   \   11BA  FD7D              LD      A,IYL
   \   11BC  FE41              CP      65
   \   11BE  380B              JR      C,?0291
   \   11C0  3E5A              LD      A,90
   \   11C2  B9                CP      C
   \   11C3  3806              JR      C,?0291
   \   11C5            ?0293:
   \   11C5            ?0292:
   \   11C5            ?0290:
   1757                                  if (IsUpper(c)) {                       /* ASCII large capital? */
   \   11C5  DDCBFACE          SET     1,(IX-6)
   1758                                          b |= 2;
   \   11C9  1815              JR      ?0296
   \   11CB            ?0291:
   1759                                  } else {
   \   11CB  FD7D              LD      A,IYL
   \   11CD  FE61              CP      97
   \   11CF  380F              JR      C,?0296
   \   11D1  3E7A              LD      A,122
   \   11D3  B9                CP      C
   \   11D4  380A              JR      C,?0296
   \   11D6            ?0298:
   \   11D6            ?0297:
   \   11D6            ?0295:
   1760                                          if (IsLower(c)) {               /* ASCII small capital? */
   \   11D6  DDCBFAC6          SET     0,(IX-6)
   \   11DA  FD7D              LD      A,IYL
   \   11DC  D620              SUB     32
   \   11DE  FD6F              LD      IYL,A
   \   11E0            ?0296:
   \   11E0            ?0294:
   1761                                                  b |= 1; c -= 0x20;
   1762                                          }
   1763                                  }
   \   11E0  D9                EXX
   \   11E1  D5                PUSH    DE
   \   11E2  13                INC     DE
   \   11E3  D9                EXX
   \   11E4  E1                POP     HL
   \   11E5  19                ADD     HL,DE
   \   11E6  FD45              LD      B,IYL
   \   11E8  70                LD      (HL),B
   \   11E9            ?0286:
   1764                                  sfn[i++] = c;
   1765                          }
   1766                  }
   \   11E9  C33F11            JP      ?0250
   \   11EC            ?0264:
   \   11EC  D9                EXX
   \   11ED  C5                PUSH    BC
   \   11EE  D9                EXX
   \   11EF  E1                POP     HL
   \   11F0  DD46FD            LD      B,(IX-3)
   \   11F3  09                ADD     HL,BC
   \   11F4  E5                PUSH    HL
   \   11F5  DD6E04            LD      L,(IX+4)
   \   11F8  DD6605            LD      H,(IX+5)
   \   11FB  C1                POP     BC
   \   11FC  71                LD      (HL),C
   \   11FD  23                INC     HL
   \   11FE  70                LD      (HL),B
   1767                  *path = &p[si];                                         /* Return pointer to the next segment */
   \   11FF  3E20              LD      A,32
   \   1201  FDBD              CP      IYL
   \   1203  3804              JR      C,?0300
   \   1205  3E04              LD      A,4
   \   1207  1801              JR      ?0301
   \   1209            ?0300:
   \   1209  AF                XOR     A
   \   120A            ?0301:
   \   120A  FD6F              LD      IYL,A
   1768                  c = (c <= ' ') ? NS_LAST : 0;           /* Set last segment flag if end of path */
   1769          
   \   120C  D9                EXX
   \   120D  7B                LD      A,E
   \   120E  B2                OR      D
   \   120F  D9                EXX
   \   1210  2004              JR      NZ,?0303
   \   1212            ?0302:
   \   1212            ?0954:
   \   1212  3E06              LD      A,6
   1770                  if (!i) return FR_INVALID_NAME;         /* Reject nul string */
   \   1214  1840              JR      ?0312
   \   1216            ?0303:
   \   1216  6B                LD      L,E
   \   1217  62                LD      H,D
   \   1218  7E                LD      A,(HL)
   \   1219  FEE5              CP      229
   \   121B  2002              JR      NZ,?0305
   \   121D            ?0304:
   \   121D  3605              LD      (HL),5
   \   121F            ?0305:
   1771                  if (sfn[0] == DDE) sfn[0] = NDDE;       /* When first char collides with DDE, replace it with 0x05 */
   1772          
   \   121F  3E08              LD      A,8
   \   1221  DDAEFE            XOR     (IX-2)
   \   1224  DDB6FF            OR      (IX-1)
   \   1227  2008              JR      NZ,?0307
   \   1229            ?0306:
   \   1229  DDCBFA26          SLA     (IX-6)
   \   122D  DDCBFA26          SLA     (IX-6)
   \   1231            ?0307:
   1773                  if (ni == 8) b <<= 2;
   \   1231  DD7EFA            LD      A,(IX-6)
   \   1234  E603              AND     3
   \   1236  3D                DEC     A
   \   1237  2006              JR      NZ,?0309
   \   1239            ?0308:
   \   1239  FD7D              LD      A,IYL
   \   123B  F610              OR      16
   \   123D  FD6F              LD      IYL,A
   \   123F            ?0309:
   1774                  if ((b & 0x03) == 0x01) c |= NS_EXT;    /* NT flag (Name extension has only small capital) */
   \   123F  DD7EFA            LD      A,(IX-6)
   \   1242  E60C              AND     12
   \   1244  FE04              CP      4
   \   1246  2006              JR      NZ,?0311
   \   1248            ?0310:
   \   1248  FD7D              LD      A,IYL
   \   124A  F608              OR      8
   \   124C  FD6F              LD      IYL,A
   \   124E            ?0311:
   1775                  if ((b & 0x0C) == 0x04) c |= NS_BODY;   /* NT flag (Name body has only small capital) */
   1776          
   \   124E  210B00            LD      HL,11
   \   1251  19                ADD     HL,DE
   \   1252  FD45              LD      B,IYL
   \   1254  70                LD      (HL),B
   1777                  sfn[NS] = c;            /* Store NT flag, File name is created */
   1778          
   \   1255            ?0949:
   \   1255  AF                XOR     A
   1779                  return FR_OK;
   1780          #endif
   \   1256            ?0312:
   \   1256  C32F0C            JP      ?0154
   1781          }
   1782          
   1783          
   1784          
   1785          
   1786          /*-----------------------------------------------------------------------*/
   1787          /* Get file information from directory entry                             */
   1788          /*-----------------------------------------------------------------------*/
   1789          #if _FS_MINIMIZE <= 1
   1790          static
   1791          void get_fileinfo (             /* No return code */
   1792                  DIR *dj,                        /* Pointer to the directory object */
   1793                  FILINFO *fno            /* Pointer to the file information to be filled */
   1794          )
   \   1259            get_fileinfo:
   \   1259  FDE5              PUSH    IY
   \   125B  DDE5              PUSH    IX
   \   125D  D9                EXX
   \   125E  C5                PUSH    BC
   \   125F  D5                PUSH    DE
   \   1260  D9                EXX
   \   1261  D5                PUSH    DE
   \   1262  F5                PUSH    AF
   \   1263  C5                PUSH    BC
   \   1264  FDE1              POP     IY
   1795          {
   1796                  UINT i;
   1797                  BYTE nt, *dir;
   1798                  TCHAR *p, c;
   1799          
   1800          
   \   1266  210900            LD      HL,9
   \   1269  09                ADD     HL,BC
   \   126A  E5                PUSH    HL
   \   126B  D9                EXX
   \   126C  C1                POP     BC
   \   126D  D9                EXX
   1801                  p = fno->fname;
   \   126E  6B                LD      L,E
   \   126F  62                LD      H,D
   \   1270  010E00            LD      BC,14
   \   1273  09                ADD     HL,BC
   \   1274  7E                LD      A,(HL)
   \   1275  23                INC     HL
   \   1276  B6                OR      (HL)
   \   1277  23                INC     HL
   \   1278  B6                OR      (HL)
   \   1279  23                INC     HL
   \   127A  B6                OR      (HL)
   \   127B  CA8413            JP      Z,?0314
   \   127E            ?0313:
   1802                  if (dj->sect) {
   \   127E  4B                LD      C,E
   \   127F  42                LD      B,D
   \   1280  211200            LD      HL,18
   \   1283  09                ADD     HL,BC
   \   1284  46                LD      B,(HL)
   \   1285  23                INC     HL
   \   1286  66                LD      H,(HL)
   \   1287  68                LD      L,B
   \   1288  E5                PUSH    HL
   \   1289  DDE1              POP     IX
   1803                          dir = dj->dir;
   \   128B  010C00            LD      BC,12
   \   128E  09                ADD     HL,BC
   \   128F  46                LD      B,(HL)
   \   1290  210100            LD      HL,1
   \   1293  39                ADD     HL,SP
   \   1294  70                LD      (HL),B
   1804                          nt = dir[DIR_NTres];            /* NT flag */
   \   1295  D9                EXX
   \   1296  110000            LD      DE,0
   \   1299            ?0959:
   \   1299  D9                EXX
   \   129A            ?0316:
   \   129A  010800            LD      BC,8
   \   129D  D9                EXX
   \   129E  D5                PUSH    DE
   \   129F  D9                EXX
   \   12A0  E1                POP     HL
   \   12A1  A7                AND     A
   \   12A2  ED42              SBC     HL,BC
   \   12A4  3047              JR      NC,?0315
   \   12A6            ?0317:
   1805                          for (i = 0; i < 8; i++) {       /* Copy name body */
   \   12A6  D9                EXX
   \   12A7  D5                PUSH    DE
   \   12A8  D9                EXX
   \   12A9  E1                POP     HL
   \   12AA  DDE5              PUSH    IX
   \   12AC  C1                POP     BC
   \   12AD  09                ADD     HL,BC
   \   12AE  46                LD      B,(HL)
   \   12AF  210000            LD      HL,0
   \   12B2  39                ADD     HL,SP
   \   12B3  70                LD      (HL),B
   1806                                  c = dir[i];
   \   12B4  78                LD      A,B
   \   12B5  FE20              CP      32
   \   12B7  2834              JR      Z,?0315
   \   12B9            ?0319:
   \   12B9            ?0320:
   1807                                  if (c == ' ') break;
   \   12B9  FE05              CP      5
   \   12BB  2002              JR      NZ,?0322
   \   12BD            ?0321:
   \   12BD  36E5              LD      (HL),229
   \   12BF            ?0322:
   1808                                  if (c == NDDE) c = (TCHAR)DDE;
   \   12BF  AF                XOR     A
   \   12C0  281C              JR      Z,?0324
   \   12C2  23                INC     HL
   \   12C3  CB5E              BIT     3,(HL)
   \   12C5  2817              JR      Z,?0324
   \   12C7  2B                DEC     HL
   \   12C8  7E                LD      A,(HL)
   \   12C9  EE80              XOR     128
   \   12CB  FEC1              CP      193
   \   12CD  380F              JR      C,?0324
   \   12CF  3E5A              LD      A,90
   \   12D1  96                SUB     (HL)
   \   12D2  E2D712            JP      PO,?0957
   \   12D5  EE80              XOR     128
   \   12D7            ?0957:
   \   12D7  FADE12            JP      M,?0324
   \   12DA            ?0328:
   \   12DA            ?0327:
   \   12DA            ?0326:
   \   12DA            ?0325:
   \   12DA            ?0323:
   \   12DA  7E                LD      A,(HL)
   \   12DB  C620              ADD     A,32
   \   12DD  77                LD      (HL),A
   \   12DE            ?0324:
   1809                                  if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   1810          #if _LFN_UNICODE
   1815          #endif
   \   12DE  D9                EXX
   \   12DF  C5                PUSH    BC
   \   12E0  03                INC     BC
   \   12E1  D9                EXX
   \   12E2  210200            LD      HL,2
   \   12E5  39                ADD     HL,SP
   \   12E6  46                LD      B,(HL)
   \   12E7  E1                POP     HL
   \   12E8  70                LD      (HL),B
   \   12E9  D9                EXX
   \   12EA  13                INC     DE
   \   12EB  18AC              JR      ?0959
   1816                                  *p++ = c;
   1817                          }
   \   12ED            ?0315:
   \   12ED  DD7E08            LD      A,(IX+8)
   \   12F0  FE20              CP      32
   \   12F2  2859              JR      Z,?0331
   \   12F4            ?0329:
   1818                          if (dir[8] != ' ') {            /* Copy name extension */
   \   12F4  D9                EXX
   \   12F5  C5                PUSH    BC
   \   12F6  03                INC     BC
   \   12F7  D9                EXX
   \   12F8  E1                POP     HL
   \   12F9  362E              LD      (HL),46
   1819                                  *p++ = '.';
   \   12FB  D9                EXX
   \   12FC  110800            LD      DE,8
   \   12FF            ?0960:
   \   12FF  D9                EXX
   \   1300            ?0332:
   \   1300  010B00            LD      BC,11
   \   1303  D9                EXX
   \   1304  D5                PUSH    DE
   \   1305  D9                EXX
   \   1306  E1                POP     HL
   \   1307  A7                AND     A
   \   1308  ED42              SBC     HL,BC
   \   130A  3041              JR      NC,?0331
   \   130C            ?0333:
   1820                                  for (i = 8; i < 11; i++) {
   \   130C  D9                EXX
   \   130D  D5                PUSH    DE
   \   130E  D9                EXX
   \   130F  E1                POP     HL
   \   1310  DDE5              PUSH    IX
   \   1312  C1                POP     BC
   \   1313  09                ADD     HL,BC
   \   1314  46                LD      B,(HL)
   \   1315  210000            LD      HL,0
   \   1318  39                ADD     HL,SP
   \   1319  70                LD      (HL),B
   1821                                          c = dir[i];
   \   131A  78                LD      A,B
   \   131B  FE20              CP      32
   \   131D  282E              JR      Z,?0331
   \   131F            ?0335:
   \   131F            ?0336:
   1822                                          if (c == ' ') break;
   \   131F  AF                XOR     A
   \   1320  281C              JR      Z,?0338
   \   1322  23                INC     HL
   \   1323  CB66              BIT     4,(HL)
   \   1325  2817              JR      Z,?0338
   \   1327  78                LD      A,B
   \   1328  EE80              XOR     128
   \   132A  FEC1              CP      193
   \   132C  3810              JR      C,?0338
   \   132E  3E5A              LD      A,90
   \   1330  90                SUB     B
   \   1331  E23613            JP      PO,?0958
   \   1334  EE80              XOR     128
   \   1336            ?0958:
   \   1336  FA3E13            JP      M,?0338
   \   1339            ?0342:
   \   1339            ?0341:
   \   1339            ?0340:
   \   1339            ?0339:
   \   1339            ?0337:
   \   1339  2B                DEC     HL
   \   133A  78                LD      A,B
   \   133B  C620              ADD     A,32
   \   133D  77                LD      (HL),A
   \   133E            ?0338:
   1823                                          if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   1824          #if _LFN_UNICODE
   1829          #endif
   \   133E  D9                EXX
   \   133F  C5                PUSH    BC
   \   1340  03                INC     BC
   \   1341  D9                EXX
   \   1342  210200            LD      HL,2
   \   1345  39                ADD     HL,SP
   \   1346  46                LD      B,(HL)
   \   1347  E1                POP     HL
   \   1348  70                LD      (HL),B
   \   1349  D9                EXX
   \   134A  13                INC     DE
   \   134B  18B2              JR      ?0960
   1830                                          *p++ = c;
   1831                                  }
   \   134D            ?0331:
   \   134D            ?0330:
   1832                          }
   \   134D  DD460B            LD      B,(IX+11)
   \   1350  FD7008            LD      (IY+8),B
   1833                          fno->fattrib = dir[DIR_Attr];                           /* Attribute */
   \   1353  DD4E1E            LD      C,(IX+30)
   \   1356  DD461F            LD      B,(IX+31)
   \   1359  DD6E1C            LD      L,(IX+28)
   \   135C  DD661D            LD      H,(IX+29)
   \   135F  E5                PUSH    HL
   \   1360  FDE5              PUSH    IY
   \   1362  D1                POP     DE
   \   1363  EB                EX      DE,HL
   \   1364  D1                POP     DE
   \   1365  73                LD      (HL),E
   \   1366  23                INC     HL
   \   1367  72                LD      (HL),D
   \   1368  23                INC     HL
   \   1369  71                LD      (HL),C
   \   136A  23                INC     HL
   \   136B  70                LD      (HL),B
   1834                          fno->fsize = LD_DWORD(dir+DIR_FileSize);        /* Size */
   \   136C  DD6E18            LD      L,(IX+24)
   \   136F  FD7504            LD      (IY+4),L
   \   1372  DD6619            LD      H,(IX+25)
   \   1375  FD7405            LD      (IY+5),H
   1835                          fno->fdate = LD_WORD(dir+DIR_WrtDate);          /* Date */
   \   1378  DD6E16            LD      L,(IX+22)
   \   137B  FD7506            LD      (IY+6),L
   \   137E  DD6617            LD      H,(IX+23)
   \   1381  FD7407            LD      (IY+7),H
   \   1384            ?0314:
   1836                          fno->ftime = LD_WORD(dir+DIR_WrtTime);          /* Time */
   1837                  }
   \   1384  D9                EXX
   \   1385  C5                PUSH    BC
   \   1386  D9                EXX
   \   1387  E1                POP     HL
   \   1388  3600              LD      (HL),0
   1838                  *p = 0;         /* Terminate SFN str by a \0 */
   1839          
   1840          #if _USE_LFN
   1849          #if !_LFN_UNICODE
   1854          #endif
   1861          #endif
   \   138A  E1                POP     HL
   \   138B  E1                POP     HL
   \   138C  D9                EXX
   \   138D  D1                POP     DE
   \   138E  C1                POP     BC
   \   138F  D9                EXX
   \   1390  DDE1              POP     IX
   \   1392  FDE1              POP     IY
   \   1394  C9                RET
   1862          }
   1863          #endif /* _FS_MINIMIZE <= 1 */
   1864          
   1865          
   1866          
   1867          
   1868          /*-----------------------------------------------------------------------*/
   1869          /* Follow a file path                                                    */
   1870          /*-----------------------------------------------------------------------*/
   1871          
   1872          static
   1873          FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   1874                  DIR *dj,                        /* Directory object to return last directory and found object */
   1875                  const TCHAR *path       /* Full-path string to find a file or directory */
   1876          )
   \   1395            follow_path:
   \   1395  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1398  FEFF              DEFW    -2
   \   139A  FDE5              PUSH    IY
   \   139C  D9                EXX
   \   139D  C5                PUSH    BC
   \   139E  D9                EXX
   \   139F  DD6E02            LD      L,(IX+2)
   \   13A2  DD6603            LD      H,(IX+3)
   \   13A5  E5                PUSH    HL
   \   13A6  FDE1              POP     IY
   1877          {
   1878                  FRESULT res;
   1879                  BYTE *dir, ns;
   1880          
   1881          
   1882          #if _FS_RPATH
   \   13A8  0A                LD      A,(BC)
   \   13A9  FE2F              CP      47
   \   13AB  2807              JR      Z,?0345
   \   13AD  69                LD      L,C
   \   13AE  60                LD      H,B
   \   13AF  7E                LD      A,(HL)
   \   13B0  FE5C              CP      92
   \   13B2  2017              JR      NZ,?0344
   \   13B4            ?0345:
   \   13B4            ?0346:
   \   13B4            ?0343:
   1883                  if (*path == '/' || *path == '\\') { /* There is a heading separator */
   \   13B4  DD3404            INC     (IX+4)
   \   13B7  2003              JR      NZ,?0962
   \   13B9  DD3405            INC     (IX+5)
   \   13BC            ?0962:
   \   13BC  AF                XOR     A
   \   13BD  FD7706            LD      (IY+6),A
   \   13C0  FD7707            LD      (IY+7),A
   \   13C3  FD7708            LD      (IY+8),A
   \   13C6  FD7709            LD      (IY+9),A
   1884                          path++; dj->sclust = 0;         /* Strip it and start from the root dir */
   \   13C9  181E              JR      ?0347
   \   13CB            ?0344:
   1885                  } else {                                                        /* No heading separator */
   \   13CB  FD6E00            LD      L,(IY+0)
   \   13CE  FD6601            LD      H,(IY+1)
   \   13D1  011700            LD      BC,23
   \   13D4  09                ADD     HL,BC
   \   13D5  5E                LD      E,(HL)
   \   13D6  23                INC     HL
   \   13D7  56                LD      D,(HL)
   \   13D8  23                INC     HL
   \   13D9  4E                LD      C,(HL)
   \   13DA  23                INC     HL
   \   13DB  46                LD      B,(HL)
   \   13DC  EB                EX      DE,HL
   \   13DD  FD7506            LD      (IY+6),L
   \   13E0  FD7407            LD      (IY+7),H
   \   13E3  FD7108            LD      (IY+8),C
   \   13E6  FD7009            LD      (IY+9),B
   \   13E9            ?0347:
   1886                          dj->sclust = dj->fs->cdir;      /* Start from the current dir */
   1887                  }
   1888          #else
   1892          #endif
   1893          
   \   13E9  DD6E04            LD      L,(IX+4)
   \   13EC  DD6605            LD      H,(IX+5)
   \   13EF  7E                LD      A,(HL)
   \   13F0  FE20              CP      32
   \   13F2  3016              JR      NC,?0349
   \   13F4            ?0348:
   1894                  if ((UINT)*path < ' ') {                        /* Nul path means the start directory itself */
   \   13F4  010000            LD      BC,0
   \   13F7  FDE5              PUSH    IY
   \   13F9  D1                POP     DE
   \   13FA  CD3F0A            CALL    dir_sdi
   \   13FD  DD77FE            LD      (IX-2),A
   1895                          res = dir_sdi(dj, 0);
   \   1400  AF                XOR     A
   \   1401  FD7712            LD      (IY+18),A
   \   1404  FD7713            LD      (IY+19),A
   1896                          dj->dir = 0;
   1897          
   \   1407  C39014            JP      ?0351
   \   140A            ?0349:
   \   140A            ?0352:
   1898                  } else {                                                        /* Follow path */
   1899                          for (;;) {
   \   140A  210A00            LD      HL,10
   \   140D  39                ADD     HL,SP
   \   140E  4D                LD      C,L
   \   140F  44                LD      B,H
   \   1410  FDE5              PUSH    IY
   \   1412  D1                POP     DE
   \   1413  CD7D10            CALL    create_name
   \   1416  DD77FE            LD      (IX-2),A
   1900                                  res = create_name(dj, &path);   /* Get a segment */
   \   1419  B7                OR      A
   \   141A  2074              JR      NZ,?0351
   \   141C            ?0353:
   \   141C            ?0354:
   1901                                  if (res != FR_OK) break;
   \   141C  FDE5              PUSH    IY
   \   141E  D1                POP     DE
   \   141F  CDA80E            CALL    dir_find
   \   1422  DD77FE            LD      (IX-2),A
   1902                                  res = dir_find(dj);                             /* Find it */
   \   1425  FD6E14            LD      L,(IY+20)
   \   1428  FD6615            LD      H,(IY+21)
   \   142B  010B00            LD      BC,11
   \   142E  09                ADD     HL,BC
   \   142F  46                LD      B,(HL)
   1903                                  ns = *(dj->fn+NS);
   \   1430  B7                OR      A
   \   1431  282A              JR      Z,?0356
   \   1433            ?0355:
   1904                                  if (res != FR_OK) {                             /* Failed to find the object */
   \   1433  FE04              CP      4
   \   1435  2059              JR      NZ,?0351
   \   1437            ?0357:
   \   1437            ?0358:
   1905                                          if (res != FR_NO_FILE) break;   /* Abort if any hard error occured */
   1906                                          /* Object not found */
   \   1437  CB68              BIT     5,B
   \   1439  281C              JR      Z,?0360
   \   143B            ?0362:
   \   143B            ?0361:
   \   143B            ?0359:
   1907                                          if (_FS_RPATH && (ns & NS_DOT)) {       /* If dot entry is not exit */
   \   143B  AF                XOR     A
   \   143C  FD7706            LD      (IY+6),A
   \   143F  FD7707            LD      (IY+7),A
   \   1442  FD7708            LD      (IY+8),A
   \   1445  FD7709            LD      (IY+9),A
   \   1448  FD7712            LD      (IY+18),A
   \   144B  FD7713            LD      (IY+19),A
   1908                                                  dj->sclust = 0; dj->dir = 0;    /* It is the root dir */
   \   144E  DD77FE            LD      (IX-2),A
   1909                                                  res = FR_OK;
   \   1451  CB50              BIT     2,B
   \   1453  203B              JR      NZ,?0351
   \   1455            ?0363:
   \   1455  18B3              JR      ?0349
   \   1457            ?0364:
   1910                                                  if (!(ns & NS_LAST)) continue;
   \   1457            ?0360:
   1911                                          } else {                                                        /* Could not find the object */
   \   1457  CB50              BIT     2,B
   \   1459  2035              JR      NZ,?0351
   \   145B            ?0366:
   \   145B  1817              JR      ?0964
   \   145D            ?0367:
   \   145D            ?0365:
   1912                                                  if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1913                                          }
   \   145D            ?0356:
   1914                                          break;
   1915                                  }
   \   145D  CB50              BIT     2,B
   \   145F  202F              JR      NZ,?0351
   \   1461            ?0368:
   \   1461            ?0369:
   1916                                  if (ns & NS_LAST) break;                        /* Last segment match. Function completed. */
   \   1461  D9                EXX
   \   1462  FD4E12            LD      C,(IY+18)
   \   1465  FD4613            LD      B,(IY+19)
   \   1468  D9                EXX
   1917                                  dir = dj->dir;                                          /* There is next segment. Follow the sub directory */
   \   1469  69                LD      L,C
   \   146A  67                LD      H,A
   \   146B  D9                EXX
   \   146C  C5                PUSH    BC
   \   146D  D9                EXX
   \   146E  C1                POP     BC
   \   146F  09                ADD     HL,BC
   \   1470  CB66              BIT     4,(HL)
   \   1472  2006              JR      NZ,?0371
   \   1474            ?0370:
   1918                                  if (!(dir[DIR_Attr] & AM_DIR)) {        /* Cannot follow because it is a file */
   \   1474            ?0964:
   \   1474  DD36FE05          LD      (IX-2),5
   \   1478  1816              JR      ?0351
   \   147A            ?0371:
   1919                                          res = FR_NO_PATH; break;
   1920                                  }
   \   147A  D9                EXX
   \   147B  C5                PUSH    BC
   \   147C  D9                EXX
   \   147D  D1                POP     DE
   \   147E  CD0000            CALL    LD_CLUST
   \   1481  FD7506            LD      (IY+6),L
   \   1484  FD7407            LD      (IY+7),H
   \   1487  FD7108            LD      (IY+8),C
   \   148A  FD7009            LD      (IY+9),B
   1921                                  dj->sclust = LD_CLUST(dir);
   1922                          }
   \   148D  C30A14            JP      ?0349
   \   1490            ?0351:
   \   1490            ?0350:
   1923                  }
   1924          
   \   1490  DD7EFE            LD      A,(IX-2)
   1925                  return res;
   \   1493  C3970E            JP      ?0190
   1926          }
   1927          
   1928          
   1929          
   1930          
   1931          /*-----------------------------------------------------------------------*/
   1932          /* Load boot record and check if it is an FAT boot record                */
   1933          /*-----------------------------------------------------------------------*/
   1934          
   1935          static
   1936          BYTE check_fs ( /* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
   1937                  FATFS *fs,      /* File system object */
   1938                  DWORD sect      /* Sector# (lba) to check if it is an FAT boot record or not */
   1939          )
   \   1496            check_fs:
   \   1496  C5                PUSH    BC
   \   1497  DDE5              PUSH    IX
   \   1499  D5                PUSH    DE
   \   149A  DDE1              POP     IX
   \   149C  EB                EX      DE,HL
   \   149D  23                INC     HL
   \   149E  7E                LD      A,(HL)
   \   149F  320000            LD      (dio_par),A
   \   14A2  213300            LD      HL,51
   \   14A5  DDE5              PUSH    IX
   \   14A7  C1                POP     BC
   \   14A8  09                ADD     HL,BC
   \   14A9  220100            LD      (dio_par+1),HL
   \   14AC  210600            LD      HL,6
   \   14AF  39                ADD     HL,SP
   1940          {       SET_DIO_PAR(fs->drv, fs->win, sect,1);
   \   14B0  CD4601            CALL    ?1041
   \   14B3  2804              JR      Z,?0373
   \   14B5            ?0372:
   1941                  if (disk_read() != RES_OK)      /* Load boot record */
   \   14B5  3E03              LD      A,3
   1942                          return 3;
   \   14B7  1852              JR      ?0380
   \   14B9            ?0373:
   \   14B9  213102            LD      HL,561
   \   14BC  DDE5              PUSH    IX
   \   14BE  C1                POP     BC
   \   14BF  09                ADD     HL,BC
   \   14C0  46                LD      B,(HL)
   \   14C1  23                INC     HL
   \   14C2  66                LD      H,(HL)
   \   14C3  68                LD      L,B
   \   14C4  0155AA            LD      BC,43605
   \   14C7  A7                AND     A
   \   14C8  ED42              SBC     HL,BC
   \   14CA  2804              JR      Z,?0375
   \   14CC            ?0374:
   1943                  if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)               /* Check record signature (always placed at offset 510 even if the sector size is >512) */
   \   14CC  3E02              LD      A,2
   1944                          return 2;
   1945          
   \   14CE  183B              JR      ?0380
   \   14D0            ?0375:
   \   14D0  DD5E6B            LD      E,(IX+107)
   \   14D3  DD6E69            LD      L,(IX+105)
   \   14D6  DD666A            LD      H,(IX+106)
   \   14D9  57                LD      D,A
   \   14DA  014641            LD      BC,16710
   \   14DD  A7                AND     A
   \   14DE  ED42              SBC     HL,BC
   \   14E0  2008              JR      NZ,?0377
   \   14E2  EB                EX      DE,HL
   \   14E3  015400            LD      BC,84
   \   14E6  ED42              SBC     HL,BC
   \   14E8  2821              JR      Z,?0380
   \   14EA            ?0376:
   1946                  if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) /* Check "FAT" string */
   1947                          return 0;
   \   14EA            ?0377:
   \   14EA  218500            LD      HL,133
   \   14ED  DDE5              PUSH    IX
   \   14EF  C1                POP     BC
   \   14F0  09                ADD     HL,BC
   \   14F1  4E                LD      C,(HL)
   \   14F2  23                INC     HL
   \   14F3  46                LD      B,(HL)
   \   14F4  23                INC     HL
   \   14F5  5E                LD      E,(HL)
   \   14F6  69                LD      L,C
   \   14F7  60                LD      H,B
   \   14F8  57                LD      D,A
   \   14F9  014641            LD      BC,16710
   \   14FC  A7                AND     A
   \   14FD  ED42              SBC     HL,BC
   \   14FF  2008              JR      NZ,?0379
   \   1501  EB                EX      DE,HL
   \   1502  015400            LD      BC,84
   \   1505  ED42              SBC     HL,BC
   \   1507  2802              JR      Z,?0380
   \   1509            ?0378:
   1948                  if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1949                          return 0;
   1950          
   \   1509            ?0379:
   \   1509  3E01              LD      A,1
   1951                  return 1;
   \   150B            ?0380:
   \   150B  DDE1              POP     IX
   \   150D  C1                POP     BC
   \   150E  C9                RET
   1952          }
   1953          
   1954          
   1955          
   1956          
   1957          /*-----------------------------------------------------------------------*/
   1958          /* Check if the file system object is valid or not                       */
   1959          /*-----------------------------------------------------------------------*/
   1960          
   1961          static
   1962          FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   1963                  const TCHAR **path,     /* Pointer to pointer to the path name (drive number) */
   1964                  FATFS **rfs,            /* Pointer to pointer to the found file system object */
   1965                  BYTE chk_wp                     /* !=0: Check media write protection for write access */
   1966          )
   \   150F            chk_mounted:
   \   150F  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1512  E0FF              DEFW    -32
   \   1514  FDE5              PUSH    IY
   \   1516  D9                EXX
   \   1517  C5                PUSH    BC
   \   1518  D5                PUSH    DE
   \   1519  D9                EXX
   1967          {
   1968                  BYTE fmt, b, *tbl;
   1969                  UINT vol;
   1970                  DSTATUS stat;
   1971                  DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
   1972                  WORD nrsv;
   \   151A  DD6E02            LD      L,(IX+2)
   \   151D  DD6603            LD      H,(IX+3)
   \   1520  56                LD      D,(HL)
   \   1521  23                INC     HL
   \   1522  66                LD      H,(HL)
   \   1523  6A                LD      L,D
   \   1524  DD75E6            LD      (IX-26),L
   \   1527  DD74E7            LD      (IX-25),H
   1973                  const TCHAR *p = *path;
   1974                  FATFS *fs;
   1975          
   1976                  /* Get logical drive number from the path name */
   \   152A  5E                LD      E,(HL)
   \   152B  7B                LD      A,E
   \   152C  07                RLCA
   \   152D  9F                SBC     A,A
   \   152E  57                LD      D,A
   \   152F  21D0FF            LD      HL,65488
   \   1532  19                ADD     HL,DE
   \   1533  E5                PUSH    HL
   \   1534  D9                EXX
   \   1535  C1                POP     BC
   \   1536  D9                EXX
   1977                  vol = p[0] - '0';                                       /* Is there a drive number? */
   \   1537  EB                EX      DE,HL
   \   1538  210900            LD      HL,9
   \   153B  A7                AND     A
   \   153C  ED52              SBC     HL,DE
   \   153E  3829              JR      C,?0382
   \   1540  DD6EE6            LD      L,(IX-26)
   \   1543  DD66E7            LD      H,(IX-25)
   \   1546  23                INC     HL
   \   1547  7E                LD      A,(HL)
   \   1548  FE3A              CP      58
   \   154A  201D              JR      NZ,?0382
   \   154C            ?0384:
   \   154C            ?0383:
   \   154C            ?0381:
   1978                  if (vol <= 9 && p[1] == ':') {          /* Found a drive number, get and strip it */
   \   154C  210C00            LD      HL,12
   \   154F  39                ADD     HL,SP
   \   1550  7E                LD      A,(HL)
   \   1551  C602              ADD     A,2
   \   1553  77                LD      (HL),A
   \   1554  23                INC     HL
   \   1555  7E                LD      A,(HL)
   \   1556  CE00              ADC     A,0
   \   1558  DD6EE6            LD      L,(IX-26)
   \   155B  67                LD      H,A
   \   155C  E5                PUSH    HL
   \   155D  DD6E02            LD      L,(IX+2)
   \   1560  DD6603            LD      H,(IX+3)
   \   1563  C1                POP     BC
   \   1564  71                LD      (HL),C
   \   1565  23                INC     HL
   \   1566  70                LD      (HL),B
   1979                          p += 2; *path = p;                              /* Return pointer to the path name */
   \   1567  180A              JR      ?0385
   \   1569            ?0382:
   1980                  } else {                                                        /* No drive number is given */
   1981          #if _FS_RPATH
   \   1569  ED4B0000          LD      BC,(CurrVol)
   \   156D  0600              LD      B,0
   \   156F  C5                PUSH    BC
   \   1570  D9                EXX
   \   1571  C1                POP     BC
   \   1572  D9                EXX
   \   1573            ?0385:
   1982                          vol = CurrVol;                                  /* Use current drive */
   1983          #else
   1985          #endif
   1986                  }
   1987          
   1988                  /* Check if the logical drive is valid or not */
   \   1573  010200            LD      BC,2
   \   1576  D9                EXX
   \   1577  C5                PUSH    BC
   \   1578  D9                EXX
   \   1579  E1                POP     HL
   \   157A  A7                AND     A
   \   157B  ED42              SBC     HL,BC
   \   157D  3805              JR      C,?0387
   \   157F            ?0386:
   1989                  if (vol >= _VOLUMES)                            /* Is the drive number valid? */
   \   157F  3E0B              LD      A,11
   1990                          return FR_INVALID_DRIVE;
   \   1581  C3011B            JP      ?0456
   \   1584            ?0387:
   \   1584  D9                EXX
   \   1585  C5                PUSH    BC
   \   1586  D9                EXX
   \   1587  E1                POP     HL
   \   1588  29                ADD     HL,HL
   \   1589  010000            LD      BC,FatFs
   \   158C  09                ADD     HL,BC
   \   158D  46                LD      B,(HL)
   \   158E  23                INC     HL
   \   158F  66                LD      H,(HL)
   \   1590  68                LD      L,B
   \   1591  E5                PUSH    HL
   \   1592  FDE1              POP     IY
   \   1594  E5                PUSH    HL
   \   1595  DD6E04            LD      L,(IX+4)
   \   1598  DD6605            LD      H,(IX+5)
   \   159B  C1                POP     BC
   \   159C  71                LD      (HL),C
   \   159D  23                INC     HL
   \   159E  70                LD      (HL),B
   1991                  *rfs = fs = FatFs[vol];                         /* Return pointer to the corresponding file system object */
   \   159F  FD7D              LD      A,IYL
   \   15A1  FDB4              OR      IYH
   \   15A3  2005              JR      NZ,?0389
   \   15A5            ?0388:
   \   15A5  3E0C              LD      A,12
   1992                  if (!fs) return FR_NOT_ENABLED;         /* Is the file system object available? */
   1993          
   \   15A7  C3011B            JP      ?0456
   \   15AA            ?0389:
   1994                  ENTER_FF(fs);                                           /* Lock file system */
   1995          
   \   15AA  AF                XOR     A
   \   15AB  FDB600            OR      (IY+0)
   \   15AE  281B              JR      Z,?0393
   \   15B0            ?0390:
   1996                  if (fs->fs_type) {                                      /* If the logical drive has been mounted */
   \   15B0  FD4E01            LD      C,(IY+1)
   \   15B3  0600              LD      B,0
   \   15B5  210000            LD      HL,ds_m
   \   15B8  09                ADD     HL,BC
   \   15B9  46                LD      B,(HL)
   1997                          stat = disk_status(fs->drv);
   \   15BA  CB40              BIT     0,B
   \   15BC  200D              JR      NZ,?0393
   \   15BE            ?0392:
   1998                          if (!(stat & STA_NOINIT)) {             /* and the physical drive is kept initialized (has not been changed), */
   1999          #if !_FS_READONLY
   \   15BE  AF                XOR     A
   \   15BF  DDB608            OR      (IX+8)
   \   15C2  2804              JR      Z,?0395
   \   15C4  CB50              BIT     2,B
   \   15C6  202E              JR      NZ,?0969
   \   15C8            ?0397:
   \   15C8            ?0396:
   \   15C8            ?0394:
   2000                                  if (chk_wp && (stat & STA_PROTECT))     /* Check write protection if needed */
   2001                                          return FR_WRITE_PROTECTED;
   2002          #endif
   \   15C8            ?0395:
   \   15C8  C3001B            JP      ?0968
   2003                                  return FR_OK;                           /* The file system object is valid */
   \   15CB            ?0393:
   \   15CB            ?0391:
   2004                          }
   2005                  }
   2006          
   2007                  /* The logical drive must be mounted. */
   2008                  /* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
   2009          
   \   15CB  FD360000          LD      (IY+0),0
   2010                  fs->fs_type = 0;                                        /* Clear the file system object */
   2011                  //Dimkam fs->drv = (BYTE)LD2PD(vol);                    /* Bind the logical drive and a physical drive */
   \   15CF  213300            LD      HL,51
   \   15D2  FDE5              PUSH    IY
   \   15D4  C1                POP     BC
   \   15D5  09                ADD     HL,BC
   \   15D6  4D                LD      C,L
   \   15D7  44                LD      B,H
   \   15D8  FD5E01            LD      E,(IY+1)
   \   15DB  CD0000            CALL    disk_initialize
   \   15DE  DD77FE            LD      (IX-2),A
   2012                  stat = disk_initialize(fs->drv,fs->win);        /* Initialize low level disk I/O layer */
   \   15E1  CB47              BIT     0,A
   \   15E3  2805              JR      Z,?0399
   \   15E5            ?0398:
   2013                  if (stat & STA_NOINIT)                          /* Check if the initialization succeeded */
   \   15E5  3E03              LD      A,3
   2014                          return FR_NOT_READY;                    /* Failed to initialize due to no media or hard error */
   2015          #if _MAX_SS != 512                                              /* Get disk sector size (variable sector size cfg only) */
   2018          #endif
   2019          #if !_FS_READONLY
   \   15E7  C3011B            JP      ?0456
   \   15EA            ?0399:
   \   15EA  AF                XOR     A
   \   15EB  DDB608            OR      (IX+8)
   \   15EE  280B              JR      Z,?0401
   \   15F0  DDCBFE56          BIT     2,(IX-2)
   \   15F4  2805              JR      Z,?0401
   \   15F6            ?0403:
   \   15F6            ?0402:
   \   15F6            ?0400:
   2020                  if (chk_wp && (stat & STA_PROTECT))     /* Check disk write protection if needed */
   \   15F6            ?0969:
   \   15F6  3E0A              LD      A,10
   2021                          return FR_WRITE_PROTECTED;
   2022          #endif
   2023                  /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   \   15F8  C3011B            JP      ?0456
   \   15FB            ?0401:
   \   15FB  AF                XOR     A
   \   15FC  DD77E8            LD      (IX-24),A
   \   15FF  DD77E9            LD      (IX-23),A
   \   1602  DD77EA            LD      (IX-22),A
   \   1605  DD77EB            LD      (IX-21),A
   \   1608  6F                LD      L,A
   \   1609  67                LD      H,A
   \   160A  E5                PUSH    HL
   \   160B  E5                PUSH    HL
   \   160C  FDE5              PUSH    IY
   \   160E  D1                POP     DE
   \   160F  CD9614            CALL    check_fs
   \   1612  E1                POP     HL
   \   1613  E1                POP     HL
   \   1614  DD77E0            LD      (IX-32),A
   2024                  fmt = check_fs(fs, bsect = 0);          /* Check sector 0 if it is a VBR */
   \   1617  3D                DEC     A
   \   1618  2045              JR      NZ,?0407
   \   161A            ?0404:
   2025                  if (fmt == 1) {                                         /* Not an FAT-VBR, the disk may be partitioned */
   2026                          /* Check the partition listed in top of the partition table */
   2027                          //DimkaM tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
   \   161A  FD6E02            LD      L,(IY+2)
   \   161D  67                LD      H,A
   \   161E  29                ADD     HL,HL
   \   161F  29                ADD     HL,HL
   \   1620  29                ADD     HL,HL
   \   1621  29                ADD     HL,HL
   \   1622  FDE5              PUSH    IY
   \   1624  C1                POP     BC
   \   1625  09                ADD     HL,BC
   \   1626  01F101            LD      BC,497
   \   1629  09                ADD     HL,BC
   \   162A  E5                PUSH    HL
   \   162B  D9                EXX
   \   162C  D1                POP     DE
   \   162D  D9                EXX
   2028                          tbl = &fs->win[MBR_Table + fs->part * SZ_PTE];/* Partition table */
   \   162E  010400            LD      BC,4
   \   1631  09                ADD     HL,BC
   \   1632  7E                LD      A,(HL)
   \   1633  B7                OR      A
   \   1634  2829              JR      Z,?0407
   \   1636            ?0406:
   2029                          if (tbl[4]) {                                                                   /* Is the partition existing? */
   \   1636  210800            LD      HL,8
   \   1639  D9                EXX
   \   163A  D5                PUSH    DE
   \   163B  D9                EXX
   \   163C  C1                POP     BC
   \   163D  09                ADD     HL,BC
   \   163E  5E                LD      E,(HL)
   \   163F  23                INC     HL
   \   1640  56                LD      D,(HL)
   \   1641  23                INC     HL
   \   1642  4E                LD      C,(HL)
   \   1643  23                INC     HL
   \   1644  46                LD      B,(HL)
   \   1645  EB                EX      DE,HL
   \   1646  DD75E8            LD      (IX-24),L
   \   1649  DD74E9            LD      (IX-23),H
   \   164C  DD71EA            LD      (IX-22),C
   \   164F  DD70EB            LD      (IX-21),B
   2030                                  bsect = LD_DWORD(&tbl[8]);                                      /* Partition offset in LBA */
   \   1652  C5                PUSH    BC
   \   1653  E5                PUSH    HL
   \   1654  FDE5              PUSH    IY
   \   1656  D1                POP     DE
   \   1657  CD9614            CALL    check_fs
   \   165A  E1                POP     HL
   \   165B  E1                POP     HL
   \   165C  DD77E0            LD      (IX-32),A
   \   165F            ?0407:
   \   165F            ?0405:
   2031                                  fmt = check_fs(fs, bsect);                                      /* Check the partition */
   2032                          }
   2033                  }
   \   165F  DD7EE0            LD      A,(IX-32)
   \   1662  FE03              CP      3
   \   1664  2005              JR      NZ,?0409
   \   1666            ?0408:
   \   1666  3E01              LD      A,1
   2034                  if (fmt == 3) return FR_DISK_ERR;
   \   1668  C3011B            JP      ?0456
   \   166B            ?0409:
   \   166B  AF                XOR     A
   \   166C  DDB6E0            OR      (IX-32)
   \   166F  2072              JR      NZ,?0971
   \   1671            ?0410:
   2035                  if (fmt) return FR_NO_FILESYSTEM;                                       /* No FAT volume is found */
   2036          
   2037                  /* Following code initializes the file system object */
   2038          
   \   1671            ?0411:
   \   1671  213300            LD      HL,51
   \   1674  FDE5              PUSH    IY
   \   1676  C1                POP     BC
   \   1677  09                ADD     HL,BC
   \   1678  010B00            LD      BC,11
   \   167B  09                ADD     HL,BC
   \   167C  3E02              LD      A,2
   \   167E  23                INC     HL
   \   167F  AE                XOR     (HL)
   \   1680  2B                DEC     HL
   \   1681  B6                OR      (HL)
   \   1682  205F              JR      NZ,?0971
   \   1684            ?0412:
   2039                  if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))          /* (BPB_BytsPerSec must be equal to the physical sector size) */
   2040                          return FR_NO_FILESYSTEM;
   2041          
   \   1684            ?0413:
   \   1684  213300            LD      HL,51
   \   1687  FDE5              PUSH    IY
   \   1689  C1                POP     BC
   \   168A  09                ADD     HL,BC
   \   168B  011600            LD      BC,22
   \   168E  09                ADD     HL,BC
   \   168F  46                LD      B,(HL)
   \   1690  23                INC     HL
   \   1691  66                LD      H,(HL)
   \   1692  68                LD      L,B
   \   1693  DD75E2            LD      (IX-30),L
   \   1696  4F                LD      C,A
   \   1697  47                LD      B,A
   \   1698  DD74E3            LD      (IX-29),H
   \   169B  DD71E4            LD      (IX-28),C
   \   169E  DD70E5            LD      (IX-27),B
   2042                  fasize = LD_WORD(fs->win+BPB_FATSz16);                          /* Number of sectors per FAT */
   \   16A1  7D                LD      A,L
   \   16A2  B4                OR      H
   \   16A3  201F              JR      NZ,?0415
   \   16A5            ?0414:
   \   16A5  213300            LD      HL,51
   \   16A8  FDE5              PUSH    IY
   \   16AA  C1                POP     BC
   \   16AB  09                ADD     HL,BC
   \   16AC  012400            LD      BC,36
   \   16AF  09                ADD     HL,BC
   \   16B0  5E                LD      E,(HL)
   \   16B1  23                INC     HL
   \   16B2  56                LD      D,(HL)
   \   16B3  23                INC     HL
   \   16B4  4E                LD      C,(HL)
   \   16B5  23                INC     HL
   \   16B6  46                LD      B,(HL)
   \   16B7  EB                EX      DE,HL
   \   16B8  DD75E2            LD      (IX-30),L
   \   16BB  DD74E3            LD      (IX-29),H
   \   16BE  DD71E4            LD      (IX-28),C
   \   16C1  DD70E5            LD      (IX-27),B
   \   16C4            ?0415:
   2043                  if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   \   16C4  FD751F            LD      (IY+31),L
   \   16C7  FD7420            LD      (IY+32),H
   \   16CA  FD7121            LD      (IY+33),C
   \   16CD  FD7022            LD      (IY+34),B
   2044                  fs->fsize = fasize;
   2045          
   \   16D0  FD4643            LD      B,(IY+67)
   \   16D3  DD70E1            LD      (IX-31),B
   \   16D6  FD7004            LD      (IY+4),B
   2046                  fs->n_fats = b = fs->win[BPB_NumFATs];                          /* Number of FAT copies */
   \   16D9  05                DEC     B
   \   16DA  2809              JR      Z,?0417
   \   16DC  DD46E1            LD      B,(IX-31)
   \   16DF  05                DEC     B
   \   16E0  05                DEC     B
   \   16E1  2802              JR      Z,?0417
   \   16E3            ?0419:
   \   16E3            ?0418:
   \   16E3            ?0416:
   \   16E3            ?0971:
   \   16E3  1838              JR      ?0973
   2047                  if (b != 1 && b != 2) return FR_NO_FILESYSTEM;          /* (Must be 1 or 2) */
   \   16E5            ?0417:
   \   16E5  210800            LD      HL,8
   \   16E8  39                ADD     HL,SP
   \   16E9  DD5EE1            LD      E,(IX-31)
   \   16EC  48                LD      C,B
   \   16ED  51                LD      D,C
   \   16EE  CD0000            CALL    ?L_MULASG_L03
   2048                  fasize *= b;                                                                            /* Number of sectors for FAT area */
   2049          
   \   16F1  FD4640            LD      B,(IY+64)
   \   16F4  FD7003            LD      (IY+3),B
   2050                  fs->csize = b = fs->win[BPB_SecPerClus];                        /* Number of sectors per cluster */
   \   16F7  AF                XOR     A
   \   16F8  B0                OR      B
   \   16F9  287D              JR      Z,?0974
   \   16FB  C6FF              ADD     A,255
   \   16FD  A0                AND     B
   \   16FE  2078              JR      NZ,?0974
   \   1700            ?0422:
   \   1700            ?0423:
   \   1700            ?0420:
   2051                  if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;       /* (Must be power of 2) */
   2052          
   \   1700            ?0421:
   \   1700  213300            LD      HL,51
   \   1703  FDE5              PUSH    IY
   \   1705  C1                POP     BC
   \   1706  09                ADD     HL,BC
   \   1707  111100            LD      DE,17
   \   170A  19                ADD     HL,DE
   \   170B  56                LD      D,(HL)
   \   170C  FD7209            LD      (IY+9),D
   \   170F  23                INC     HL
   \   1710  66                LD      H,(HL)
   \   1711  FD740A            LD      (IY+10),H
   2053                  fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);        /* Number of root directory entries */
   \   1714  210900            LD      HL,9
   \   1717  09                ADD     HL,BC
   \   1718  7E                LD      A,(HL)
   \   1719  E60F              AND     15
   \   171B  2802              JR      Z,?0425
   \   171D            ?0424:
   \   171D            ?0973:
   \   171D  1859              JR      ?0974
   2054                  if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM; /* (BPB_RootEntCnt must be sector aligned) */
   2055          
   \   171F            ?0425:
   \   171F  213300            LD      HL,51
   \   1722  FDE5              PUSH    IY
   \   1724  C1                POP     BC
   \   1725  09                ADD     HL,BC
   \   1726  011300            LD      BC,19
   \   1729  09                ADD     HL,BC
   \   172A  46                LD      B,(HL)
   \   172B  23                INC     HL
   \   172C  66                LD      H,(HL)
   \   172D  68                LD      L,B
   \   172E  DD75F0            LD      (IX-16),L
   \   1731  4F                LD      C,A
   \   1732  47                LD      B,A
   \   1733  DD74F1            LD      (IX-15),H
   \   1736  DD71F2            LD      (IX-14),C
   \   1739  DD70F3            LD      (IX-13),B
   2056                  tsect = LD_WORD(fs->win+BPB_TotSec16);                          /* Number of sectors on the volume */
   \   173C  7D                LD      A,L
   \   173D  B4                OR      H
   \   173E  201F              JR      NZ,?0427
   \   1740            ?0426:
   \   1740  213300            LD      HL,51
   \   1743  FDE5              PUSH    IY
   \   1745  C1                POP     BC
   \   1746  09                ADD     HL,BC
   \   1747  012000            LD      BC,32
   \   174A  09                ADD     HL,BC
   \   174B  5E                LD      E,(HL)
   \   174C  23                INC     HL
   \   174D  56                LD      D,(HL)
   \   174E  23                INC     HL
   \   174F  4E                LD      C,(HL)
   \   1750  23                INC     HL
   \   1751  46                LD      B,(HL)
   \   1752  EB                EX      DE,HL
   \   1753  DD75F0            LD      (IX-16),L
   \   1756  DD74F1            LD      (IX-15),H
   \   1759  DD71F2            LD      (IX-14),C
   \   175C  DD70F3            LD      (IX-13),B
   \   175F            ?0427:
   2057                  if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2058          
   \   175F  213300            LD      HL,51
   \   1762  FDE5              PUSH    IY
   \   1764  C1                POP     BC
   \   1765  09                ADD     HL,BC
   \   1766  010E00            LD      BC,14
   \   1769  09                ADD     HL,BC
   \   176A  46                LD      B,(HL)
   \   176B  23                INC     HL
   \   176C  66                LD      H,(HL)
   \   176D  68                LD      L,B
   \   176E  DD75F4            LD      (IX-12),L
   \   1771  DD74F5            LD      (IX-11),H
   2059                  nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);                         /* Number of reserved sectors */
   \   1774  7D                LD      A,L
   \   1775  B4                OR      H
   \   1776  2002              JR      NZ,?0429
   \   1778            ?0428:
   \   1778            ?0974:
   \   1778  1849              JR      ?0975
   2060                  if (!nrsv) return FR_NO_FILESYSTEM;                                     /* (BPB_RsvdSecCnt must not be 0) */
   2061          
   2062                  /* Determine the FAT sub type */
   \   177A            ?0429:
   \   177A  FD5E09            LD      E,(IY+9)
   \   177D  FD560A            LD      D,(IY+10)
   \   1780  0604              LD      B,4
   \   1782  CD0000            CALL    ?US_RSH_L02
   \   1785  19                ADD     HL,DE
   \   1786  010000            LD      BC,0
   \   1789  C5                PUSH    BC
   \   178A  E5                PUSH    HL
   \   178B  DD6EE2            LD      L,(IX-30)
   \   178E  DD66E3            LD      H,(IX-29)
   \   1791  C1                POP     BC
   \   1792  09                ADD     HL,BC
   \   1793  EB                EX      DE,HL
   \   1794  DD6EE4            LD      L,(IX-28)
   \   1797  DD66E5            LD      H,(IX-27)
   \   179A  C1                POP     BC
   \   179B  ED4A              ADC     HL,BC
   \   179D  4D                LD      C,L
   \   179E  44                LD      B,H
   \   179F  EB                EX      DE,HL
   \   17A0  DD75F6            LD      (IX-10),L
   \   17A3  DD74F7            LD      (IX-9),H
   \   17A6  DD71F8            LD      (IX-8),C
   \   17A9  DD70F9            LD      (IX-7),B
   2063                  sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);     /* RSV+FAT+DIR */
   \   17AC  C5                PUSH    BC
   \   17AD  E5                PUSH    HL
   \   17AE  A7                AND     A
   \   17AF  DD6EF0            LD      L,(IX-16)
   \   17B2  DD66F1            LD      H,(IX-15)
   \   17B5  C1                POP     BC
   \   17B6  ED42              SBC     HL,BC
   \   17B8  DD6EF2            LD      L,(IX-14)
   \   17BB  DD66F3            LD      H,(IX-13)
   \   17BE  C1                POP     BC
   \   17BF  ED42              SBC     HL,BC
   \   17C1  3002              JR      NC,?0431
   \   17C3            ?0430:
   \   17C3            ?0975:
   \   17C3  183B              JR      ?0976
   2064                  if (tsect < sysect) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
   \   17C5            ?0431:
   \   17C5  FD6E03            LD      L,(IY+3)
   \   17C8  010000            LD      BC,0
   \   17CB  61                LD      H,C
   \   17CC  C5                PUSH    BC
   \   17CD  E5                PUSH    HL
   \   17CE  DD6EF0            LD      L,(IX-16)
   \   17D1  DD66F1            LD      H,(IX-15)
   \   17D4  DD4EF6            LD      C,(IX-10)
   \   17D7  DD46F7            LD      B,(IX-9)
   \   17DA  ED42              SBC     HL,BC
   \   17DC  EB                EX      DE,HL
   \   17DD  DD6EF2            LD      L,(IX-14)
   \   17E0  DD66F3            LD      H,(IX-13)
   \   17E3  DD4EF8            LD      C,(IX-8)
   \   17E6  DD46F9            LD      B,(IX-7)
   \   17E9  ED42              SBC     HL,BC
   \   17EB  CD061B            CALL    ?1058
   \   17EE  DD75EC            LD      (IX-20),L
   \   17F1  DD74ED            LD      (IX-19),H
   \   17F4  DD71EE            LD      (IX-18),C
   \   17F7  DD70EF            LD      (IX-17),B
   2065                  nclst = (tsect - sysect) / fs->csize;                           /* Number of clusters */
   \   17FA  7D                LD      A,L
   \   17FB  B4                OR      H
   \   17FC  B1                OR      C
   \   17FD  B0                OR      B
   \   17FE  2003              JR      NZ,?0433
   \   1800            ?0432:
   \   1800            ?0976:
   \   1800  C3C419            JP      ?0979
   2066                  if (!nclst) return FR_NO_FILESYSTEM;                            /* (Invalid volume size) */
   \   1803            ?0433:
   \   1803  DD36E001          LD      (IX-32),1
   2067                  fmt = FS_FAT12;
   \   1807  01F60F            LD      BC,4086
   \   180A  ED42              SBC     HL,BC
   \   180C  DD6EEE            LD      L,(IX-18)
   \   180F  DD66EF            LD      H,(IX-17)
   \   1812  010000            LD      BC,0
   \   1815  ED42              SBC     HL,BC
   \   1817  3804              JR      C,?0435
   \   1819            ?0434:
   \   1819  DD36E002          LD      (IX-32),2
   \   181D            ?0435:
   2068                  if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   \   181D  A7                AND     A
   \   181E  DD6EEC            LD      L,(IX-20)
   \   1821  DD66ED            LD      H,(IX-19)
   \   1824  01F6FF            LD      BC,65526
   \   1827  ED42              SBC     HL,BC
   \   1829  DD6EEE            LD      L,(IX-18)
   \   182C  DD66EF            LD      H,(IX-17)
   \   182F  010000            LD      BC,0
   \   1832  ED42              SBC     HL,BC
   \   1834  3804              JR      C,?0437
   \   1836            ?0436:
   \   1836  DD36E003          LD      (IX-32),3
   \   183A            ?0437:
   2069                  if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2070          
   2071                  /* Boundaries and Limits */
   \   183A  69                LD      L,C
   \   183B  60                LD      H,B
   \   183C  C5                PUSH    BC
   \   183D  23                INC     HL
   \   183E  23                INC     HL
   \   183F  E5                PUSH    HL
   \   1840  DD6EEC            LD      L,(IX-20)
   \   1843  DD66ED            LD      H,(IX-19)
   \   1846  C1                POP     BC
   \   1847  09                ADD     HL,BC
   \   1848  EB                EX      DE,HL
   \   1849  DD6EEE            LD      L,(IX-18)
   \   184C  DD66EF            LD      H,(IX-17)
   \   184F  C1                POP     BC
   \   1850  ED4A              ADC     HL,BC
   \   1852  4D                LD      C,L
   \   1853  44                LD      B,H
   \   1854  EB                EX      DE,HL
   \   1855  FD751B            LD      (IY+27),L
   \   1858  FD741C            LD      (IY+28),H
   \   185B  FD711D            LD      (IY+29),C
   \   185E  FD701E            LD      (IY+30),B
   2072                  fs->n_fatent = nclst + 2;                                                       /* Number of FAT entries */
   \   1861  DD6EF8            LD      L,(IX-8)
   \   1864  DD66F9            LD      H,(IX-7)
   \   1867  E5                PUSH    HL
   \   1868  DD6EF6            LD      L,(IX-10)
   \   186B  DD66F7            LD      H,(IX-9)
   \   186E  E5                PUSH    HL
   \   186F  DD6EE8            LD      L,(IX-24)
   \   1872  DD66E9            LD      H,(IX-23)
   \   1875  C1                POP     BC
   \   1876  09                ADD     HL,BC
   \   1877  EB                EX      DE,HL
   \   1878  DD6EEA            LD      L,(IX-22)
   \   187B  DD66EB            LD      H,(IX-21)
   \   187E  C1                POP     BC
   \   187F  ED4A              ADC     HL,BC
   \   1881  4D                LD      C,L
   \   1882  44                LD      B,H
   \   1883  EB                EX      DE,HL
   \   1884  FD752B            LD      (IY+43),L
   \   1887  FD742C            LD      (IY+44),H
   \   188A  FD712D            LD      (IY+45),C
   \   188D  FD702E            LD      (IY+46),B
   2073                  fs->database = bsect + sysect;                                          /* Data start sector */
   \   1890  DD6EF4            LD      L,(IX-12)
   \   1893  DD66F5            LD      H,(IX-11)
   \   1896  010000            LD      BC,0
   \   1899  C5                PUSH    BC
   \   189A  E5                PUSH    HL
   \   189B  DD6EE8            LD      L,(IX-24)
   \   189E  DD66E9            LD      H,(IX-23)
   \   18A1  C1                POP     BC
   \   18A2  09                ADD     HL,BC
   \   18A3  EB                EX      DE,HL
   \   18A4  DD6EEA            LD      L,(IX-22)
   \   18A7  DD66EB            LD      H,(IX-21)
   \   18AA  C1                POP     BC
   \   18AB  ED4A              ADC     HL,BC
   \   18AD  4D                LD      C,L
   \   18AE  44                LD      B,H
   \   18AF  EB                EX      DE,HL
   \   18B0  FD7523            LD      (IY+35),L
   \   18B3  FD7424            LD      (IY+36),H
   \   18B6  FD7125            LD      (IY+37),C
   \   18B9  FD7026            LD      (IY+38),B
   2074                  fs->fatbase = bsect + nrsv;                                             /* FAT start sector */
   \   18BC  DD7EE0            LD      A,(IX-32)
   \   18BF  FE03              CP      3
   \   18C1  FD7E09            LD      A,(IY+9)
   \   18C4  2037              JR      NZ,?0439
   \   18C6            ?0438:
   2075                  if (fmt == FS_FAT32) {
   \   18C6  FDB60A            OR      (IY+10)
   \   18C9  2037              JR      NZ,?0978
   \   18CB            ?0440:
   2076                          if (fs->n_rootdir) return FR_NO_FILESYSTEM;             /* (BPB_RootEntCnt must be 0) */
   \   18CB            ?0441:
   \   18CB  213300            LD      HL,51
   \   18CE  FDE5              PUSH    IY
   \   18D0  C1                POP     BC
   \   18D1  09                ADD     HL,BC
   \   18D2  112C00            LD      DE,44
   \   18D5  19                ADD     HL,DE
   \   18D6  4E                LD      C,(HL)
   \   18D7  23                INC     HL
   \   18D8  46                LD      B,(HL)
   \   18D9  23                INC     HL
   \   18DA  5E                LD      E,(HL)
   \   18DB  23                INC     HL
   \   18DC  56                LD      D,(HL)
   \   18DD  FD7127            LD      (IY+39),C
   \   18E0  FD7028            LD      (IY+40),B
   \   18E3  FD7329            LD      (IY+41),E
   \   18E6  FD722A            LD      (IY+42),D
   2077                          fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
   \   18E9  FD4E1D            LD      C,(IY+29)
   \   18EC  FD461E            LD      B,(IY+30)
   \   18EF  FD6E1B            LD      L,(IY+27)
   \   18F2  FD661C            LD      H,(IY+28)
   \   18F5  3E02              LD      A,2
   \   18F7  CD0000            CALL    ?L_LSH_L03
   \   18FA  C37F19            JP      ?0447
   2078                          szbfat = fs->n_fatent * 4;                                              /* (Required FAT size) */
   \   18FD            ?0439:
   2079                  } else {
   \   18FD  FDB60A            OR      (IY+10)
   \   1900  2003              JR      NZ,?0444
   \   1902            ?0443:
   \   1902            ?0978:
   \   1902  C3C419            JP      ?0979
   2080                          if (!fs->n_rootdir)     return FR_NO_FILESYSTEM;        /* (BPB_RootEntCnt must not be 0) */
   \   1905            ?0444:
   \   1905  FD6E25            LD      L,(IY+37)
   \   1908  FD6626            LD      H,(IY+38)
   \   190B  E5                PUSH    HL
   \   190C  FD6E23            LD      L,(IY+35)
   \   190F  FD6624            LD      H,(IY+36)
   \   1912  E5                PUSH    HL
   \   1913  DD6EE2            LD      L,(IX-30)
   \   1916  DD66E3            LD      H,(IX-29)
   \   1919  C1                POP     BC
   \   191A  09                ADD     HL,BC
   \   191B  EB                EX      DE,HL
   \   191C  DD6EE4            LD      L,(IX-28)
   \   191F  DD66E5            LD      H,(IX-27)
   \   1922  C1                POP     BC
   \   1923  ED4A              ADC     HL,BC
   \   1925  4D                LD      C,L
   \   1926  44                LD      B,H
   \   1927  EB                EX      DE,HL
   \   1928  FD7527            LD      (IY+39),L
   \   192B  FD7428            LD      (IY+40),H
   \   192E  FD7129            LD      (IY+41),C
   \   1931  FD702A            LD      (IY+42),B
   2081                          fs->dirbase = fs->fatbase + fasize;                             /* Root directory start sector */
   2082                          szbfat = (fmt == FS_FAT16) ?                                    /* (Required FAT size) */
   \   1934  DD46E0            LD      B,(IX-32)
   \   1937  05                DEC     B
   \   1938  05                DEC     B
   \   1939  2013              JR      NZ,?0446
   \   193B  FD4E1D            LD      C,(IY+29)
   \   193E  FD461E            LD      B,(IY+30)
   \   1941  FD6E1B            LD      L,(IY+27)
   \   1944  FD661C            LD      H,(IY+28)
   \   1947  29                ADD     HL,HL
   \   1948  CB11              RL      C
   \   194A  CB10              RL      B
   \   194C  1831              JR      ?0447
   \   194E            ?0446:
   \   194E  FD6E1D            LD      L,(IY+29)
   \   1951  FD661E            LD      H,(IY+30)
   \   1954  E5                PUSH    HL
   \   1955  FD6E1B            LD      L,(IY+27)
   \   1958  FD661C            LD      H,(IY+28)
   \   195B  E5                PUSH    HL
   \   195C  010000            LD      BC,0
   \   195F  210300            LD      HL,3
   \   1962  CD0000            CALL    ?L_MUL_L03
   \   1965  3E01              LD      A,1
   \   1967  CD0000            CALL    ?UL_RSH_L03
   \   196A  C5                PUSH    BC
   \   196B  E5                PUSH    HL
   \   196C  FD7E1B            LD      A,(IY+27)
   \   196F  E601              AND     1
   \   1971  6F                LD      L,A
   \   1972  2600              LD      H,0
   \   1974  5C                LD      E,H
   \   1975  53                LD      D,E
   \   1976  C1                POP     BC
   \   1977  09                ADD     HL,BC
   \   1978  EB                EX      DE,HL
   \   1979  C1                POP     BC
   \   197A  ED4A              ADC     HL,BC
   \   197C  4D                LD      C,L
   \   197D  44                LD      B,H
   \   197E  EB                EX      DE,HL
   \   197F            ?0447:
   \   197F  DD75FA            LD      (IX-6),L
   \   1982  DD74FB            LD      (IX-5),H
   \   1985  DD71FC            LD      (IX-4),C
   \   1988  DD70FD            LD      (IX-3),B
   \   198B            ?0442:
   2083                                  fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2084                  }
   \   198B  210000            LD      HL,0
   \   198E  E5                PUSH    HL
   \   198F  21FF01            LD      HL,511
   \   1992  E5                PUSH    HL
   \   1993  DD6EFA            LD      L,(IX-6)
   \   1996  DD66FB            LD      H,(IX-5)
   \   1999  C1                POP     BC
   \   199A  09                ADD     HL,BC
   \   199B  EB                EX      DE,HL
   \   199C  DD6EFC            LD      L,(IX-4)
   \   199F  DD66FD            LD      H,(IX-3)
   \   19A2  C1                POP     BC
   \   19A3  ED4A              ADC     HL,BC
   \   19A5  4D                LD      C,L
   \   19A6  44                LD      B,H
   \   19A7  EB                EX      DE,HL
   \   19A8  3E09              LD      A,9
   \   19AA  CD0000            CALL    ?UL_RSH_L03
   \   19AD  C5                PUSH    BC
   \   19AE  E5                PUSH    HL
   \   19AF  A7                AND     A
   \   19B0  FD6E1F            LD      L,(IY+31)
   \   19B3  FD6620            LD      H,(IY+32)
   \   19B6  C1                POP     BC
   \   19B7  ED42              SBC     HL,BC
   \   19B9  FD6E21            LD      L,(IY+33)
   \   19BC  FD6622            LD      H,(IY+34)
   \   19BF  C1                POP     BC
   \   19C0  ED42              SBC     HL,BC
   \   19C2  3005              JR      NC,?0449
   \   19C4            ?0448:
   2085                  if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))       /* (BPB_FATSz must not be less than required) */
   \   19C4            ?0979:
   \   19C4  3E0D              LD      A,13
   2086                          return FR_NO_FILESYSTEM;
   2087          
   2088          #if !_FS_READONLY
   2089                  /* Initialize cluster allocation information */
   \   19C6  C3011B            JP      ?0456
   \   19C9            ?0449:
   \   19C9  06FF              LD      B,255
   \   19CB  FD700F            LD      (IY+15),B
   \   19CE  FD7010            LD      (IY+16),B
   \   19D1  FD7011            LD      (IY+17),B
   \   19D4  FD7012            LD      (IY+18),B
   2090                  fs->free_clust = 0xFFFFFFFF;
   \   19D7  AF                XOR     A
   \   19D8  FD770B            LD      (IY+11),A
   \   19DB  FD770C            LD      (IY+12),A
   \   19DE  FD770D            LD      (IY+13),A
   \   19E1  FD770E            LD      (IY+14),A
   2091                  fs->last_clust = 0;
   2092          
   2093                  /* Get fsinfo if available */
   \   19E4  DD7EE0            LD      A,(IX-32)
   \   19E7  FE03              CP      3
   \   19E9  C2D11A            JP      NZ,?0453
   \   19EC            ?0450:
   2094                  if (fmt == FS_FAT32) {
   \   19EC  FD360600          LD      (IY+6),0
   2095                          fs->fsi_flag = 0;
   \   19F0  213300            LD      HL,51
   \   19F3  FDE5              PUSH    IY
   \   19F5  C1                POP     BC
   \   19F6  09                ADD     HL,BC
   \   19F7  113000            LD      DE,48
   \   19FA  19                ADD     HL,DE
   \   19FB  56                LD      D,(HL)
   \   19FC  23                INC     HL
   \   19FD  66                LD      H,(HL)
   \   19FE  6A                LD      L,D
   \   19FF  010000            LD      BC,0
   \   1A02  C5                PUSH    BC
   \   1A03  E5                PUSH    HL
   \   1A04  DD6EE8            LD      L,(IX-24)
   \   1A07  DD66E9            LD      H,(IX-23)
   \   1A0A  C1                POP     BC
   \   1A0B  09                ADD     HL,BC
   \   1A0C  EB                EX      DE,HL
   \   1A0D  DD6EEA            LD      L,(IX-22)
   \   1A10  DD66EB            LD      H,(IX-21)
   \   1A13  C1                POP     BC
   \   1A14  ED4A              ADC     HL,BC
   \   1A16  4D                LD      C,L
   \   1A17  44                LD      B,H
   \   1A18  EB                EX      DE,HL
   \   1A19  FD7513            LD      (IY+19),L
   \   1A1C  FD7414            LD      (IY+20),H
   \   1A1F  FD7115            LD      (IY+21),C
   \   1A22  FD7016            LD      (IY+22),B
   2096                          fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   \   1A25  FD7E01            LD      A,(IY+1)
   \   1A28  320000            LD      (dio_par),A
   \   1A2B  213300            LD      HL,51
   \   1A2E  FDE5              PUSH    IY
   \   1A30  C1                POP     BC
   \   1A31  09                ADD     HL,BC
   \   1A32  220100            LD      (dio_par+1),HL
   \   1A35  211300            LD      HL,19
   \   1A38  09                ADD     HL,BC
   2097                          SET_DIO_PAR(fs->drv, fs->win, fs->fsi_sector,1);
   2098                          if (disk_read() == RES_OK &&
   2099                                  LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2100                                  LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   \   1A39  CD4601            CALL    ?1041
   \   1A3C  C2D11A            JP      NZ,?0453
   \   1A3F  213300            LD      HL,51
   \   1A42  FDE5              PUSH    IY
   \   1A44  C1                POP     BC
   \   1A45  09                ADD     HL,BC
   \   1A46  01FE01            LD      BC,510
   \   1A49  09                ADD     HL,BC
   \   1A4A  46                LD      B,(HL)
   \   1A4B  23                INC     HL
   \   1A4C  66                LD      H,(HL)
   \   1A4D  68                LD      L,B
   \   1A4E  0155AA            LD      BC,43605
   \   1A51  A7                AND     A
   \   1A52  ED42              SBC     HL,BC
   \   1A54  207B              JR      NZ,?0453
   \   1A56  FD6E33            LD      L,(IY+51)
   \   1A59  FD6634            LD      H,(IY+52)
   \   1A5C  015252            LD      BC,21074
   \   1A5F  A7                AND     A
   \   1A60  ED42              SBC     HL,BC
   \   1A62  206D              JR      NZ,?0453
   \   1A64  FD6E35            LD      L,(IY+53)
   \   1A67  FD6636            LD      H,(IY+54)
   \   1A6A  016141            LD      BC,16737
   \   1A6D  ED42              SBC     HL,BC
   \   1A6F  2060              JR      NZ,?0453
   \   1A71  213300            LD      HL,51
   \   1A74  FDE5              PUSH    IY
   \   1A76  C1                POP     BC
   \   1A77  09                ADD     HL,BC
   \   1A78  01E401            LD      BC,484
   \   1A7B  09                ADD     HL,BC
   \   1A7C  4E                LD      C,(HL)
   \   1A7D  23                INC     HL
   \   1A7E  46                LD      B,(HL)
   \   1A7F  23                INC     HL
   \   1A80  5E                LD      E,(HL)
   \   1A81  23                INC     HL
   \   1A82  56                LD      D,(HL)
   \   1A83  69                LD      L,C
   \   1A84  60                LD      H,B
   \   1A85  017272            LD      BC,29298
   \   1A88  A7                AND     A
   \   1A89  ED42              SBC     HL,BC
   \   1A8B  2044              JR      NZ,?0453
   \   1A8D  EB                EX      DE,HL
   \   1A8E  014161            LD      BC,24897
   \   1A91  ED42              SBC     HL,BC
   \   1A93  203C              JR      NZ,?0453
   \   1A95            ?0455:
   \   1A95            ?0454:
   \   1A95            ?0452:
   2101                                  LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   \   1A95  213300            LD      HL,51
   \   1A98  FDE5              PUSH    IY
   \   1A9A  C1                POP     BC
   \   1A9B  09                ADD     HL,BC
   \   1A9C  11EC01            LD      DE,492
   \   1A9F  19                ADD     HL,DE
   \   1AA0  4E                LD      C,(HL)
   \   1AA1  23                INC     HL
   \   1AA2  46                LD      B,(HL)
   \   1AA3  23                INC     HL
   \   1AA4  5E                LD      E,(HL)
   \   1AA5  23                INC     HL
   \   1AA6  56                LD      D,(HL)
   \   1AA7  FD710B            LD      (IY+11),C
   \   1AAA  FD700C            LD      (IY+12),B
   \   1AAD  FD730D            LD      (IY+13),E
   \   1AB0  FD720E            LD      (IY+14),D
   2102                                          fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   \   1AB3  213300            LD      HL,51
   \   1AB6  FDE5              PUSH    IY
   \   1AB8  C1                POP     BC
   \   1AB9  09                ADD     HL,BC
   \   1ABA  11E801            LD      DE,488
   \   1ABD  19                ADD     HL,DE
   \   1ABE  4E                LD      C,(HL)
   \   1ABF  23                INC     HL
   \   1AC0  46                LD      B,(HL)
   \   1AC1  23                INC     HL
   \   1AC2  5E                LD      E,(HL)
   \   1AC3  23                INC     HL
   \   1AC4  56                LD      D,(HL)
   \   1AC5  FD710F            LD      (IY+15),C
   \   1AC8  FD7010            LD      (IY+16),B
   \   1ACB  FD7311            LD      (IY+17),E
   \   1ACE  FD7212            LD      (IY+18),D
   \   1AD1            ?0453:
   \   1AD1            ?0451:
   2103                                          fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2104                          }
   2105                  }
   2106          #endif
   \   1AD1  DD46E0            LD      B,(IX-32)
   \   1AD4  FD7000            LD      (IY+0),B
   2107                  fs->fs_type = fmt;              /* FAT sub-type */
   \   1AD7  2A0000            LD      HL,(Fsid)
   \   1ADA  23                INC     HL
   \   1ADB  220000            LD      (Fsid),HL
   \   1ADE  FD7507            LD      (IY+7),L
   \   1AE1  FD7408            LD      (IY+8),H
   2108                  fs->id = ++Fsid;                /* File system mount ID */
   \   1AE4  AF                XOR     A
   \   1AE5  FD772F            LD      (IY+47),A
   \   1AE8  FD7730            LD      (IY+48),A
   \   1AEB  FD7731            LD      (IY+49),A
   \   1AEE  FD7732            LD      (IY+50),A
   2109                  fs->winsect = 0;                /* Invalidate sector cache */
   \   1AF1  FD7705            LD      (IY+5),A
   2110                  fs->wflag = 0;
   2111          #if _FS_RPATH
   \   1AF4  FD7717            LD      (IY+23),A
   \   1AF7  FD7718            LD      (IY+24),A
   \   1AFA  FD7719            LD      (IY+25),A
   \   1AFD  FD771A            LD      (IY+26),A
   2112                  fs->cdir = 0;                   /* Current directory (root dir) */
   2113          #endif
   2114          #if _FS_SHARE                           /* Clear file lock semaphores */
   2116          #endif
   2117          
   \   1B00            ?0968:
   \   1B00  AF                XOR     A
   2118                  return FR_OK;
   \   1B01            ?0456:
   \   1B01  C32F0C            JP      ?0154
   \   1B04            ?1059:
   \   1B04  ED4A              ADC     HL,BC
   \   1B06            ?1058:
   \   1B06  4D                LD      C,L
   \   1B07  44                LD      B,H
   \   1B08  EB                EX      DE,HL
   \   1B09  C30000            JP      ?UL_DIV_L03
   2119          }
   2120          
   2121          
   2122          
   2123          
   2124          /*-----------------------------------------------------------------------*/
   2125          /* Check if the file/dir object is valid or not                          */
   2126          /*-----------------------------------------------------------------------*/
   2127          
   2128          static
   2129          FRESULT validate (      /* FR_OK(0): The object is valid, !=0: Invalid */
   2130                  FATFS *fs,              /* Pointer to the file system object */
   2131                  WORD id                 /* Member id of the target object to be checked */
   2132          )
   \   1B0C            validate:
   \   1B0C  DDE5              PUSH    IX
   \   1B0E  C5                PUSH    BC
   \   1B0F  D5                PUSH    DE
   \   1B10  DDE1              POP     IX
   2133          {
   \   1B12  7B                LD      A,E
   \   1B13  B2                OR      D
   \   1B14  2810              JR      Z,?0459
   \   1B16  AF                XOR     A
   \   1B17  DDB600            OR      (IX+0)
   \   1B1A  280A              JR      Z,?0459
   \   1B1C  DD6E07            LD      L,(IX+7)
   \   1B1F  DD6608            LD      H,(IX+8)
   \   1B22  ED42              SBC     HL,BC
   \   1B24  2804              JR      Z,?0458
   \   1B26            ?0459:
   \   1B26            ?0460:
   \   1B26            ?0457:
   2134                  if (!fs || !fs->fs_type || fs->id != id)
   \   1B26  3E09              LD      A,9
   2135                          return FR_INVALID_OBJECT;
   2136          
   \   1B28  1812              JR      ?0463
   \   1B2A            ?0458:
   2137                  ENTER_FF(fs);           /* Lock file system */
   2138          
   \   1B2A  DD4E01            LD      C,(IX+1)
   \   1B2D  0600              LD      B,0
   \   1B2F  210000            LD      HL,ds_m
   \   1B32  09                ADD     HL,BC
   \   1B33  CB46              BIT     0,(HL)
   \   1B35  2804              JR      Z,?0462
   \   1B37            ?0461:
   2139                  if (disk_status(fs->drv) & STA_NOINIT)
   \   1B37  3E03              LD      A,3
   2140                          return FR_NOT_READY;
   2141          
   \   1B39  1801              JR      ?0463
   \   1B3B            ?0462:
   \   1B3B  AF                XOR     A
   2142                  return FR_OK;
   \   1B3C            ?0463:
   \   1B3C  E1                POP     HL
   \   1B3D  DDE1              POP     IX
   \   1B3F  C9                RET
   2143          }
   2144          
   2145          
   2146          
   2147          
   2148          /*--------------------------------------------------------------------------
   2149          
   2150             Public Functions
   2151          
   2152          --------------------------------------------------------------------------*/
   2153          
   2154          
   2155          
   2156          /*-----------------------------------------------------------------------*/
   2157          /* Mount/Unmount a Logical Drive                                         */
   2158          /*-----------------------------------------------------------------------*/
   2159          
   2160          FRESULT f_mount (
   2161                  BYTE vol,               /* Logical drive number to be mounted/unmounted */
   2162                  FATFS *fs               /* Pointer to new file system object (NULL for unmount)*/
   2163          )
   \   1B40            f_mount:
   \   1B40  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1B43  0000              DEFW    0
   \   1B45  FDE5              PUSH    IY
   \   1B47  59                LD      E,C
   \   1B48  50                LD      D,B
   2164          {
   2165                  FATFS *rfs;
   2166          
   2167          
   \   1B49  DD7E02            LD      A,(IX+2)
   \   1B4C  FE02              CP      2
   \   1B4E  3804              JR      C,?0465
   \   1B50            ?0464:
   2168                  if (vol >= _VOLUMES)                    /* Check if the drive number is valid */
   \   1B50  3E0B              LD      A,11
   2169                          return FR_INVALID_DRIVE;
   \   1B52  182D              JR      ?0470
   \   1B54            ?0465:
   \   1B54  6F                LD      L,A
   \   1B55  2600              LD      H,0
   \   1B57  29                ADD     HL,HL
   \   1B58  010000            LD      BC,FatFs
   \   1B5B  09                ADD     HL,BC
   \   1B5C  46                LD      B,(HL)
   \   1B5D  23                INC     HL
   \   1B5E  66                LD      H,(HL)
   \   1B5F  68                LD      L,B
   \   1B60  E5                PUSH    HL
   \   1B61  FDE1              POP     IY
   2170                  rfs = FatFs[vol];                               /* Get current fs object */
   2171          
   \   1B63  7D                LD      A,L
   \   1B64  B4                OR      H
   \   1B65  2804              JR      Z,?0467
   \   1B67            ?0466:
   2172                  if (rfs) {
   2173          #if _FS_SHARE
   2175          #endif
   2176          #if _FS_REENTRANT                                       /* Discard sync object of the current volume */
   2178          #endif
   \   1B67  FD360000          LD      (IY+0),0
   \   1B6B            ?0467:
   2179                          rfs->fs_type = 0;                       /* Clear old fs object */
   2180                  }
   2181          
   \   1B6B  7B                LD      A,E
   \   1B6C  B2                OR      D
   \   1B6D  2804              JR      Z,?0469
   \   1B6F            ?0468:
   2182                  if (fs) {
   \   1B6F  6B                LD      L,E
   \   1B70  62                LD      H,D
   \   1B71  3600              LD      (HL),0
   \   1B73            ?0469:
   2183                          fs->fs_type = 0;                        /* Clear new fs object */
   2184          #if _FS_REENTRANT                                       /* Create sync object for the new volume */
   2186          #endif
   2187                  }
   \   1B73  DD6E02            LD      L,(IX+2)
   \   1B76  2600              LD      H,0
   \   1B78  29                ADD     HL,HL
   \   1B79  010000            LD      BC,FatFs
   \   1B7C  09                ADD     HL,BC
   \   1B7D  73                LD      (HL),E
   \   1B7E  23                INC     HL
   \   1B7F  72                LD      (HL),D
   2188                  FatFs[vol] = fs;                                /* Register new fs object */
   2189          
   \   1B80  AF                XOR     A
   2190                  return FR_OK;
   \   1B81            ?0470:
   \   1B81  FDE1              POP     IY
   \   1B83  C30000            JP      ?LEAVE_DIRECT_L09
   2191          }
   2192          
   2193          
   2194          
   2195          
   2196          /*-----------------------------------------------------------------------*/
   2197          /* Open or Create a File                                                 */
   2198          /*-----------------------------------------------------------------------*/
   2199          
   2200          FRESULT f_open (
   2201                  FIL *fp,                        /* Pointer to the blank file object */
   2202                  const TCHAR *path,      /* Pointer to the file name */
   2203                  BYTE mode                       /* Access mode and file open mode flags */
   2204          )
   \   1B86            f_open:
   \   1B86  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1B89  D2FF              DEFW    65490
   \   1B8B  FDE5              PUSH    IY
   \   1B8D  D9                EXX
   \   1B8E  C5                PUSH    BC
   \   1B8F  DD4E02            LD      C,(IX+2)
   \   1B92  DD4603            LD      B,(IX+3)
   2205          {
   2206                  FRESULT res;
   2207                  DIR dj;
   2208                  BYTE *dir;
   2209                  DEF_NAMEBUF;
   2210          
   2211          
   \   1B95  C5                PUSH    BC
   \   1B96  D9                EXX
   \   1B97  E1                POP     HL
   \   1B98  AF                XOR     A
   \   1B99  77                LD      (HL),A
   \   1B9A  23                INC     HL
   \   1B9B  77                LD      (HL),A
   2212                  fp->fs = 0;                     /* Clear file object */
   2213          
   2214          #if !_FS_READONLY
   \   1B9C  DD7E08            LD      A,(IX+8)
   \   1B9F  E61F              AND     31
   \   1BA1  DD7708            LD      (IX+8),A
   2215                  mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   \   1BA4  CB87              RES     0,A
   \   1BA6  4F                LD      C,A
   \   1BA7  C5                PUSH    BC
   \   1BA8  210700            LD      HL,7
   \   1BAB  39                ADD     HL,SP
   \   1BAC  4D                LD      C,L
   \   1BAD  44                LD      B,H
   \   1BAE  213800            LD      HL,56
   \   1BB1  39                ADD     HL,SP
   \   1BB2  CD221E            CALL    ?1060
   \   1BB5  E1                POP     HL
   \   1BB6  DD77D2            LD      (IX-46),A
   2216                  res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2217          #else
   2220          #endif
   \   1BB9  211D00            LD      HL,29
   \   1BBC  39                ADD     HL,SP
   \   1BBD  DD75E7            LD      (IX-25),L
   \   1BC0  DD74E8            LD      (IX-24),H
   2221                  INIT_BUF(dj);
   \   1BC3  B7                OR      A
   \   1BC4  2011              JR      NZ,?0472
   \   1BC6            ?0471:
   2222                  if (res == FR_OK)
   \   1BC6  DD4E04            LD      C,(IX+4)
   \   1BC9  DD4605            LD      B,(IX+5)
   \   1BCC  210500            LD      HL,5
   \   1BCF  39                ADD     HL,SP
   \   1BD0  EB                EX      DE,HL
   \   1BD1  CD9513            CALL    follow_path
   \   1BD4  DD77D2            LD      (IX-46),A
   \   1BD7            ?0472:
   2223                          res = follow_path(&dj, path);   /* Follow the file path */
   \   1BD7  DD6EE5            LD      L,(IX-27)
   \   1BDA  DD66E6            LD      H,(IX-26)
   \   1BDD  E5                PUSH    HL
   \   1BDE  FDE1              POP     IY
   2224                  dir = dj.dir;
   2225          
   2226          #if !_FS_READONLY       /* R/W configuration */
   \   1BE0  AF                XOR     A
   \   1BE1  DDB6D2            OR      (IX-46)
   \   1BE4  200A              JR      NZ,?0476
   \   1BE6            ?0473:
   2227                  if (res == FR_OK) {
   \   1BE6  FD7D              LD      A,IYL
   \   1BE8  FDB4              OR      IYH
   \   1BEA  2004              JR      NZ,?0476
   \   1BEC            ?0475:
   2228                          if (!dir)       /* Current dir itself */
   \   1BEC  DD36D206          LD      (IX-46),6
   \   1BF0            ?0476:
   \   1BF0            ?0474:
   2229                                  res = FR_INVALID_NAME;
   2230          #if _FS_SHARE
   2233          #endif
   2234                  }
   2235                  /* Create or Open a file */
   \   1BF0  DD7E08            LD      A,(IX+8)
   \   1BF3  E61C              AND     28
   \   1BF5  CA331D            JP      Z,?0478
   \   1BF8            ?0477:
   2236                  if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2237                          DWORD dw, cl;
   2238          
   \   1BF8  AF                XOR     A
   \   1BF9  DDB6D2            OR      (IX-46)
   \   1BFC  281E              JR      Z,?0480
   \   1BFE            ?0479:
   2239                          if (res != FR_OK) {                                     /* No file, create new */
   \   1BFE  FE04              CP      4
   \   1C00  200B              JR      NZ,?0482
   \   1C02            ?0481:
   2240                                  if (res == FR_NO_FILE)                  /* There is no file to open, create a new entry */
   2241          #if _FS_SHARE
   2243          #else
   \   1C02  210500            LD      HL,5
   \   1C05  39                ADD     HL,SP
   \   1C06  EB                EX      DE,HL
   \   1C07  CDAE0F            CALL    dir_register
   \   1C0A  DD77D2            LD      (IX-46),A
   \   1C0D            ?0482:
   2244                                          res = dir_register(&dj);
   2245          #endif
   \   1C0D  DDCB08DE          SET     3,(IX+8)
   2246                                  mode |= FA_CREATE_ALWAYS;               /* File is created */
   \   1C11  DD6EE5            LD      L,(IX-27)
   \   1C14  DD66E6            LD      H,(IX-26)
   \   1C17  E5                PUSH    HL
   \   1C18  FDE1              POP     IY
   2247                                  dir = dj.dir;                                   /* New entry */
   2248                          }
   \   1C1A  1817              JR      ?0488
   \   1C1C            ?0480:
   2249                          else {                                                          /* Any object is already existing */
   \   1C1C  FD7E0B            LD      A,(IY+11)
   \   1C1F  E611              AND     17
   \   1C21  2806              JR      Z,?0485
   \   1C23            ?0484:
   2250                                  if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {        /* Cannot overwrite it (R/O or DIR) */
   \   1C23  DD36D207          LD      (IX-46),7
   2251                                          res = FR_DENIED;
   \   1C27  180A              JR      ?0488
   \   1C29            ?0485:
   2252                                  } else {
   \   1C29  DDCB0856          BIT     2,(IX+8)
   \   1C2D  2804              JR      Z,?0488
   \   1C2F            ?0487:
   2253                                          if (mode & FA_CREATE_NEW)       /* Cannot create as new file */
   \   1C2F  DD36D208          LD      (IX-46),8
   \   1C33            ?0488:
   \   1C33            ?0486:
   \   1C33            ?0483:
   2254                                                  res = FR_EXIST;
   2255                                  }
   2256                          }
   \   1C33  AF                XOR     A
   \   1C34  DDB6D2            OR      (IX-46)
   \   1C37  C2541D            JP      NZ,?0504
   \   1C3A  DDCB085E          BIT     3,(IX+8)
   \   1C3E  CA541D            JP      Z,?0504
   \   1C41            ?0492:
   \   1C41            ?0491:
   \   1C41            ?0489:
   2257                          if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {        /* Truncate it if overwrite mode */
   \   1C41  212900            LD      HL,41
   \   1C44  39                ADD     HL,SP
   \   1C45  EB                EX      DE,HL
   \   1C46  CD0000            CALL    get_fattime
   2258                                  get_fattime(&dw);                                       /* Created time */
   \   1C49  DD4EF9            LD      C,(IX-7)
   \   1C4C  DD46FA            LD      B,(IX-6)
   \   1C4F  DD6EF7            LD      L,(IX-9)
   \   1C52  FD750E            LD      (IY+14),L
   \   1C55  DD66F8            LD      H,(IX-8)
   \   1C58  FD740F            LD      (IY+15),H
   \   1C5B  FD7110            LD      (IY+16),C
   \   1C5E  FD7011            LD      (IY+17),B
   2259                                  ST_DWORD(dir+DIR_CrtTime, dw);
   \   1C61  FD360B00          LD      (IY+11),0
   2260                                  dir[DIR_Attr] = 0;                                      /* Reset attribute */
   \   1C65  AF                XOR     A
   \   1C66  FD771C            LD      (IY+28),A
   \   1C69  FD771D            LD      (IY+29),A
   \   1C6C  FD771E            LD      (IY+30),A
   \   1C6F  FD771F            LD      (IY+31),A
   2261                                  ST_DWORD(dir+DIR_FileSize, 0);          /* size = 0 */
   \   1C72  FDE5              PUSH    IY
   \   1C74  D1                POP     DE
   \   1C75  CD0000            CALL    LD_CLUST
   \   1C78  DD75FB            LD      (IX-5),L
   \   1C7B  DD74FC            LD      (IX-4),H
   \   1C7E  DD71FD            LD      (IX-3),C
   \   1C81  DD70FE            LD      (IX-2),B
   2262                                  cl = LD_CLUST(dir);                                     /* Get start cluster */
   \   1C84  AF                XOR     A
   \   1C85  FD771A            LD      (IY+26),A
   \   1C88  FD771B            LD      (IY+27),A
   \   1C8B  FD7714            LD      (IY+20),A
   \   1C8E  FD7715            LD      (IY+21),A
   2263                                  ST_CLUST(dir, 0);                                       /* cluster = 0 */
   \   1C91  210500            LD      HL,5
   \   1C94  DD4ED3            LD      C,(IX-45)
   \   1C97  DD46D4            LD      B,(IX-44)
   \   1C9A  09                ADD     HL,BC
   \   1C9B  3601              LD      (HL),1
   2264                                  dj.fs->wflag = 1;
   \   1C9D  DD7EFB            LD      A,(IX-5)
   \   1CA0  DDB6FC            OR      (IX-4)
   \   1CA3  DDB6FD            OR      (IX-3)
   \   1CA6  DDB6FE            OR      (IX-2)
   \   1CA9  CA541D            JP      Z,?0504
   \   1CAC            ?0493:
   2265                                  if (cl) {                                                       /* Remove the cluster chain if exist */
   \   1CAC  212F00            LD      HL,47
   \   1CAF  DD4ED3            LD      C,(IX-45)
   \   1CB2  DD46D4            LD      B,(IX-44)
   \   1CB5  09                ADD     HL,BC
   \   1CB6  5E                LD      E,(HL)
   \   1CB7  23                INC     HL
   \   1CB8  56                LD      D,(HL)
   \   1CB9  23                INC     HL
   \   1CBA  4E                LD      C,(HL)
   \   1CBB  23                INC     HL
   \   1CBC  46                LD      B,(HL)
   \   1CBD  EB                EX      DE,HL
   \   1CBE  DD75F7            LD      (IX-9),L
   \   1CC1  DD74F8            LD      (IX-8),H
   \   1CC4  DD71F9            LD      (IX-7),C
   \   1CC7  DD70FA            LD      (IX-6),B
   2266                                          dw = dj.fs->winsect;
   \   1CCA  DD6EFD            LD      L,(IX-3)
   \   1CCD  DD66FE            LD      H,(IX-2)
   \   1CD0  E5                PUSH    HL
   \   1CD1  DD6EFB            LD      L,(IX-5)
   \   1CD4  DD66FC            LD      H,(IX-4)
   \   1CD7  E5                PUSH    HL
   \   1CD8  DD5ED3            LD      E,(IX-45)
   \   1CDB  DD56D4            LD      D,(IX-44)
   \   1CDE  CD8E06            CALL    remove_chain
   \   1CE1  E1                POP     HL
   \   1CE2  E1                POP     HL
   \   1CE3  DD77D2            LD      (IX-46),A
   2267                                          res = remove_chain(dj.fs, cl);
   \   1CE6  B7                OR      A
   \   1CE7  206B              JR      NZ,?0504
   \   1CE9            ?0495:
   2268                                          if (res == FR_OK) {
   \   1CE9  210B00            LD      HL,11
   \   1CEC  DD4ED3            LD      C,(IX-45)
   \   1CEF  DD46D4            LD      B,(IX-44)
   \   1CF2  09                ADD     HL,BC
   \   1CF3  E5                PUSH    HL
   \   1CF4  01FFFF            LD      BC,65535
   \   1CF7  C5                PUSH    BC
   \   1CF8  C5                PUSH    BC
   \   1CF9  DD6EFB            LD      L,(IX-5)
   \   1CFC  DD66FC            LD      H,(IX-4)
   \   1CFF  C1                POP     BC
   \   1D00  09                ADD     HL,BC
   \   1D01  EB                EX      DE,HL
   \   1D02  DD6EFD            LD      L,(IX-3)
   \   1D05  DD66FE            LD      H,(IX-2)
   \   1D08  C1                POP     BC
   \   1D09  ED4A              ADC     HL,BC
   \   1D0B  4D                LD      C,L
   \   1D0C  44                LD      B,H
   \   1D0D  E1                POP     HL
   \   1D0E  73                LD      (HL),E
   \   1D0F  23                INC     HL
   \   1D10  72                LD      (HL),D
   \   1D11  23                INC     HL
   \   1D12  71                LD      (HL),C
   \   1D13  23                INC     HL
   \   1D14  70                LD      (HL),B
   2269                                                  dj.fs->last_clust = cl - 1;     /* Reuse the cluster hole */
   \   1D15  DD6EF9            LD      L,(IX-7)
   \   1D18  DD66FA            LD      H,(IX-6)
   \   1D1B  E5                PUSH    HL
   \   1D1C  DD6EF7            LD      L,(IX-9)
   \   1D1F  DD66F8            LD      H,(IX-8)
   \   1D22  E5                PUSH    HL
   \   1D23  DD5ED3            LD      E,(IX-45)
   \   1D26  DD56D4            LD      D,(IX-44)
   \   1D29  CD0000            CALL    move_window
   \   1D2C  E1                POP     HL
   \   1D2D  E1                POP     HL
   \   1D2E  DD77D2            LD      (IX-46),A
   \   1D31            ?0496:
   \   1D31            ?0494:
   \   1D31            ?0490:
   2270                                                  res = move_window(dj.fs, dw);
   2271                                          }
   2272                                  }
   2273                          }
   2274                  }
   \   1D31  1821              JR      ?0504
   \   1D33            ?0478:
   2275                  else {  /* Open an existing file */
   \   1D33  DDB6D2            OR      (IX-46)
   \   1D36  201C              JR      NZ,?0504
   \   1D38            ?0498:
   2276                          if (res == FR_OK) {                                             /* Follow succeeded */
   \   1D38  FDCB0B66          BIT     4,(IY+11)
   \   1D3C  2806              JR      Z,?0501
   \   1D3E            ?0500:
   2277                                  if (dir[DIR_Attr] & AM_DIR) {           /* It is a directory */
   \   1D3E  DD36D204          LD      (IX-46),4
   2278                                          res = FR_NO_FILE;
   \   1D42  1810              JR      ?0504
   \   1D44            ?0501:
   2279                                  } else {
   \   1D44  DDCB084E          BIT     1,(IX+8)
   \   1D48  280A              JR      Z,?0504
   \   1D4A  FDCB0B46          BIT     0,(IY+11)
   \   1D4E  2804              JR      Z,?0504
   \   1D50            ?0506:
   \   1D50            ?0505:
   \   1D50            ?0503:
   2280                                          if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   \   1D50  DD36D207          LD      (IX-46),7
   \   1D54            ?0504:
   \   1D54            ?0502:
   \   1D54            ?0499:
   \   1D54            ?0497:
   2281                                                  res = FR_DENIED;
   2282                                  }
   2283                          }
   2284                  }
   \   1D54  AF                XOR     A
   \   1D55  DDB6D2            OR      (IX-46)
   \   1D58  203B              JR      NZ,?0508
   \   1D5A            ?0507:
   2285                  if (res == FR_OK) {
   \   1D5A  DDCB085E          BIT     3,(IX+8)
   \   1D5E  2804              JR      Z,?0510
   \   1D60            ?0509:
   2286                          if (mode & FA_CREATE_ALWAYS)                    /* Set file change flag if created or overwritten */
   \   1D60  DDCB08EE          SET     5,(IX+8)
   \   1D64            ?0510:
   2287                                  mode |= FA__WRITTEN;
   \   1D64  212F00            LD      HL,47
   \   1D67  DD4ED3            LD      C,(IX-45)
   \   1D6A  DD46D4            LD      B,(IX-44)
   \   1D6D  09                ADD     HL,BC
   \   1D6E  5E                LD      E,(HL)
   \   1D6F  23                INC     HL
   \   1D70  56                LD      D,(HL)
   \   1D71  23                INC     HL
   \   1D72  4E                LD      C,(HL)
   \   1D73  23                INC     HL
   \   1D74  46                LD      B,(HL)
   \   1D75  EB                EX      DE,HL
   \   1D76  E5                PUSH    HL
   \   1D77  211A00            LD      HL,26
   \   1D7A  D9                EXX
   \   1D7B  C5                PUSH    BC
   \   1D7C  D9                EXX
   \   1D7D  D1                POP     DE
   \   1D7E  19                ADD     HL,DE
   \   1D7F  D1                POP     DE
   \   1D80  73                LD      (HL),E
   \   1D81  23                INC     HL
   \   1D82  72                LD      (HL),D
   \   1D83  23                INC     HL
   \   1D84  71                LD      (HL),C
   \   1D85  23                INC     HL
   \   1D86  70                LD      (HL),B
   2288                          fp->dir_sect = dj.fs->winsect;                  /* Pointer to the directory entry */
   \   1D87  211E00            LD      HL,30
   \   1D8A  D9                EXX
   \   1D8B  C5                PUSH    BC
   \   1D8C  D9                EXX
   \   1D8D  C1                POP     BC
   \   1D8E  09                ADD     HL,BC
   \   1D8F  FDE5              PUSH    IY
   \   1D91  C1                POP     BC
   \   1D92  71                LD      (HL),C
   \   1D93  23                INC     HL
   \   1D94  70                LD      (HL),B
   \   1D95            ?0508:
   2289                          fp->dir_ptr = dir;
   2290          #if _FS_SHARE
   2293          #endif
   2294                  }
   2295          
   2296          #else                           /* R/O configuration */
   2305          #endif
   2306                  FREE_BUF();
   2307          
   \   1D95  AF                XOR     A
   \   1D96  DDB6D2            OR      (IX-46)
   \   1D99  C21C1E            JP      NZ,?0512
   \   1D9C            ?0511:
   2308                  if (res == FR_OK) {
   \   1D9C  210400            LD      HL,4
   \   1D9F  D9                EXX
   \   1DA0  C5                PUSH    BC
   \   1DA1  D9                EXX
   \   1DA2  C1                POP     BC
   \   1DA3  09                ADD     HL,BC
   \   1DA4  DD5608            LD      D,(IX+8)
   \   1DA7  72                LD      (HL),D
   2309                          fp->flag = mode;                                        /* File access mode */
   \   1DA8  FDE5              PUSH    IY
   \   1DAA  D1                POP     DE
   \   1DAB  CD0000            CALL    LD_CLUST
   \   1DAE  E5                PUSH    HL
   \   1DAF  210E00            LD      HL,14
   \   1DB2  D9                EXX
   \   1DB3  C5                PUSH    BC
   \   1DB4  D9                EXX
   \   1DB5  D1                POP     DE
   \   1DB6  19                ADD     HL,DE
   \   1DB7  D1                POP     DE
   \   1DB8  73                LD      (HL),E
   \   1DB9  23                INC     HL
   \   1DBA  72                LD      (HL),D
   \   1DBB  23                INC     HL
   \   1DBC  71                LD      (HL),C
   \   1DBD  23                INC     HL
   \   1DBE  70                LD      (HL),B
   2310                          fp->sclust = LD_CLUST(dir);                     /* File start cluster */
   \   1DBF  FD4E1E            LD      C,(IY+30)
   \   1DC2  FD461F            LD      B,(IY+31)
   \   1DC5  FD6E1C            LD      L,(IY+28)
   \   1DC8  FD661D            LD      H,(IY+29)
   \   1DCB  E5                PUSH    HL
   \   1DCC  210A00            LD      HL,10
   \   1DCF  D9                EXX
   \   1DD0  C5                PUSH    BC
   \   1DD1  D9                EXX
   \   1DD2  D1                POP     DE
   \   1DD3  19                ADD     HL,DE
   \   1DD4  D1                POP     DE
   \   1DD5  73                LD      (HL),E
   \   1DD6  23                INC     HL
   \   1DD7  72                LD      (HL),D
   \   1DD8  23                INC     HL
   \   1DD9  71                LD      (HL),C
   \   1DDA  23                INC     HL
   \   1DDB  70                LD      (HL),B
   2311                          fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
   \   1DDC  210600            LD      HL,6
   \   1DDF  D9                EXX
   \   1DE0  C5                PUSH    BC
   \   1DE1  D9                EXX
   \   1DE2  C1                POP     BC
   \   1DE3  09                ADD     HL,BC
   \   1DE4  AF                XOR     A
   \   1DE5  77                LD      (HL),A
   \   1DE6  23                INC     HL
   \   1DE7  77                LD      (HL),A
   \   1DE8  23                INC     HL
   \   1DE9  77                LD      (HL),A
   \   1DEA  23                INC     HL
   \   1DEB  77                LD      (HL),A
   2312                          fp->fptr = 0;                                           /* File pointer */
   \   1DEC  211600            LD      HL,22
   \   1DEF  09                ADD     HL,BC
   \   1DF0  77                LD      (HL),A
   \   1DF1  23                INC     HL
   \   1DF2  77                LD      (HL),A
   \   1DF3  23                INC     HL
   \   1DF4  77                LD      (HL),A
   \   1DF5  23                INC     HL
   \   1DF6  77                LD      (HL),A
   2313                          fp->dsect = 0;
   2314          #if _USE_FASTSEEK
   2316          #endif
   \   1DF7  DD6ED3            LD      L,(IX-45)
   \   1DFA  DD66D4            LD      H,(IX-44)
   \   1DFD  E5                PUSH    HL
   \   1DFE  69                LD      L,C
   \   1DFF  60                LD      H,B
   \   1E00  C1                POP     BC
   \   1E01  71                LD      (HL),C
   \   1E02  23                INC     HL
   \   1E03  70                LD      (HL),B
   \   1E04  D9                EXX
   \   1E05  C5                PUSH    BC
   \   1E06  D9                EXX
   \   1E07  E1                POP     HL
   \   1E08  23                INC     HL
   \   1E09  23                INC     HL
   \   1E0A  E5                PUSH    HL
   \   1E0B  210700            LD      HL,7
   \   1E0E  DD4ED3            LD      C,(IX-45)
   \   1E11  DD46D4            LD      B,(IX-44)
   \   1E14  09                ADD     HL,BC
   \   1E15  4E                LD      C,(HL)
   \   1E16  23                INC     HL
   \   1E17  46                LD      B,(HL)
   \   1E18  E1                POP     HL
   \   1E19  71                LD      (HL),C
   \   1E1A  23                INC     HL
   \   1E1B  70                LD      (HL),B
   \   1E1C            ?0512:
   2317                          fp->fs = dj.fs; fp->id = dj.fs->id;     /* Validate file object */
   2318                  }
   2319          
   \   1E1C  DD7ED2            LD      A,(IX-46)
   2320                  LEAVE_FF(dj.fs, res);
   \   1E1F  C3970E            JP      ?0190
   \   1E22            ?1060:
   \   1E22  EB                EX      DE,HL
   \   1E23  C30F15            JP      chk_mounted
   2321          }
   2322          
   2323          
   2324          
   2325          
   2326          /*-----------------------------------------------------------------------*/
   2327          /* Read File                                                             */
   2328          /*-----------------------------------------------------------------------*/
   2329          
   2330          FRESULT f_read (
   2331                  FIL *fp,                /* Pointer to the file object */
   2332                  void *buff,             /* Pointer to data buffer */
   2333                  UINT btr,               /* Number of bytes to read */
   2334                  UINT *br                /* Pointer to number of bytes read */
   2335          )
   \   1E26            f_read:
   \   1E26  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   1E29  F0FF              DEFW    -16
   \   1E2B  FDE5              PUSH    IY
   \   1E2D  D9                EXX
   \   1E2E  C5                PUSH    BC
   \   1E2F  D5                PUSH    DE
   \   1E30  D9                EXX
   \   1E31  DD6E02            LD      L,(IX+2)
   \   1E34  DD6603            LD      H,(IX+3)
   \   1E37  E5                PUSH    HL
   \   1E38  FDE1              POP     IY
   2336          {
   2337                  FRESULT res;
   2338                  DWORD clst, sect, remain;
   2339                  UINT rcnt, cc;
   \   1E3A  DD71F4            LD      (IX-12),C
   \   1E3D  DD70F5            LD      (IX-11),B
   2340                  BYTE csect, *rbuff = buff;
   2341          
   2342          
   \   1E40  DD6E0A            LD      L,(IX+10)
   \   1E43  DD660B            LD      H,(IX+11)
   \   1E46  AF                XOR     A
   \   1E47  77                LD      (HL),A
   \   1E48  23                INC     HL
   \   1E49  77                LD      (HL),A
   2343                  *br = 0;        /* Initialize byte counter */
   2344          
   \   1E4A  CD8521            CALL    ?1064
   2345                  res = validate(fp->fs, fp->id);                         /* Check validity */
   \   1E4D  B7                OR      A
   \   1E4E  C26321            JP      NZ,?0521
   \   1E51            ?0513:
   2346                  if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   1E51            ?0514:
   \   1E51  FD7E04            LD      A,(IY+4)
   \   1E54  B7                OR      A
   \   1E55  FA901F            JP      M,?0986
   \   1E58            ?0515:
   2347                  if (fp->flag & FA__ERROR)                                       /* Aborted file? */
   2348                          LEAVE_FF(fp->fs, FR_INT_ERR);
   \   1E58            ?0516:
   \   1E58  FDCB0446          BIT     0,(IY+4)
   \   1E5C  2005              JR      NZ,?0518
   \   1E5E            ?0517:
   2349                  if (!(fp->flag & FA_READ))                                      /* Check access mode */
   \   1E5E  3E07              LD      A,7
   2350                          LEAVE_FF(fp->fs, FR_DENIED);
   \   1E60  C36321            JP      ?0521
   \   1E63            ?0518:
   \   1E63  A7                AND     A
   \   1E64  FD6E0A            LD      L,(IY+10)
   \   1E67  FD660B            LD      H,(IY+11)
   \   1E6A  FD4E06            LD      C,(IY+6)
   \   1E6D  FD4607            LD      B,(IY+7)
   \   1E70  ED42              SBC     HL,BC
   \   1E72  EB                EX      DE,HL
   \   1E73  FD6E0C            LD      L,(IY+12)
   \   1E76  FD660D            LD      H,(IY+13)
   \   1E79  FD4E08            LD      C,(IY+8)
   \   1E7C  FD4609            LD      B,(IY+9)
   \   1E7F  ED42              SBC     HL,BC
   \   1E81  4D                LD      C,L
   \   1E82  44                LD      B,H
   \   1E83  EB                EX      DE,HL
   \   1E84  DD75FA            LD      (IX-6),L
   \   1E87  DD74FB            LD      (IX-5),H
   \   1E8A  DD71FC            LD      (IX-4),C
   \   1E8D  DD70FD            LD      (IX-3),B
   2351                  remain = fp->fsize - fp->fptr;
   \   1E90  DD5E08            LD      E,(IX+8)
   \   1E93  DD5609            LD      D,(IX+9)
   \   1E96  010000            LD      BC,0
   \   1E99  C5                PUSH    BC
   \   1E9A  D5                PUSH    DE
   \   1E9B  A7                AND     A
   \   1E9C  C1                POP     BC
   \   1E9D  ED42              SBC     HL,BC
   \   1E9F  DD6EFC            LD      L,(IX-4)
   \   1EA2  DD66FD            LD      H,(IX-3)
   \   1EA5  C1                POP     BC
   \   1EA6  ED42              SBC     HL,BC
   \   1EA8  300C              JR      NC,?0520
   \   1EAA            ?0519:
   \   1EAA  DD6EFA            LD      L,(IX-6)
   \   1EAD  DD66FB            LD      H,(IX-5)
   \   1EB0  DD7508            LD      (IX+8),L
   \   1EB3  DD7409            LD      (IX+9),H
   \   1EB6            ?0520:
   \   1EB6            ?0522:
   2352                  if (btr > remain) btr = (UINT)remain;           /* Truncate btr by remaining bytes */
   2353          
   \   1EB6  DD7E08            LD      A,(IX+8)
   \   1EB9  DDB609            OR      (IX+9)
   \   1EBC  CA6321            JP      Z,?0521
   \   1EBF            ?0523:
   2355                          rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   \   1EBF  FD6E06            LD      L,(IY+6)
   \   1EC2  FD7E07            LD      A,(IY+7)
   \   1EC5  E601              AND     1
   \   1EC7  67                LD      H,A
   \   1EC8  7D                LD      A,L
   \   1EC9  B4                OR      H
   \   1ECA  C2DC20            JP      NZ,?0526
   \   1ECD            ?0525:
   2356                          if ((fp->fptr % SS(fp->fs)) == 0) {             /* On the sector boundary? */
   \   1ECD  FD4E08            LD      C,(IY+8)
   \   1ED0  FD4609            LD      B,(IY+9)
   \   1ED3  FD6E06            LD      L,(IY+6)
   \   1ED6  FD6607            LD      H,(IY+7)
   \   1ED9  3E09              LD      A,9
   \   1EDB  CD0000            CALL    ?UL_RSH_L03
   \   1EDE  E5                PUSH    HL
   \   1EDF  FD6E00            LD      L,(IY+0)
   \   1EE2  FD6601            LD      H,(IY+1)
   \   1EE5  23                INC     HL
   \   1EE6  23                INC     HL
   \   1EE7  23                INC     HL
   \   1EE8  7E                LD      A,(HL)
   \   1EE9  C6FF              ADD     A,255
   \   1EEB  E1                POP     HL
   \   1EEC  A5                AND     L
   \   1EED  DD77FE            LD      (IX-2),A
   2357                                  csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));    /* Sector offset in the cluster */
   \   1EF0  2075              JR      NZ,?0528
   \   1EF2            ?0527:
   2358                                  if (!csect) {                                           /* On the cluster boundary? */
   \   1EF2  FD7E06            LD      A,(IY+6)
   \   1EF5  FDB607            OR      (IY+7)
   \   1EF8  FDB608            OR      (IY+8)
   \   1EFB  FDB609            OR      (IY+9)
   \   1EFE  200E              JR      NZ,?0530
   \   1F00            ?0529:
   2359                                          if (fp->fptr == 0) {                    /* On the top of the file? */
   \   1F00  FD4E10            LD      C,(IY+16)
   \   1F03  FD4611            LD      B,(IY+17)
   \   1F06  FD6E0E            LD      L,(IY+14)
   \   1F09  FD660F            LD      H,(IY+15)
   \   1F0C  1813              JR      ?0984
   2360                                                  clst = fp->sclust;                      /* Follow from the origin */
   \   1F0E            ?0530:
   2361                                          } else {                                                /* Middle or end of the file */
   2362          #if _USE_FASTSEEK
   2366          #endif
   \   1F0E  FD6E14            LD      L,(IY+20)
   \   1F11  FD6615            LD      H,(IY+21)
   \   1F14  E5                PUSH    HL
   \   1F15  FD6E12            LD      L,(IY+18)
   \   1F18  FD6613            LD      H,(IY+19)
   \   1F1B  E5                PUSH    HL
   \   1F1C  CD380C            CALL    ?1049
   \   1F1F  F1                POP     AF
   \   1F20  F1                POP     AF
   \   1F21            ?0984:
   \   1F21  DD75F6            LD      (IX-10),L
   \   1F24  DD74F7            LD      (IX-9),H
   \   1F27  DD71F8            LD      (IX-8),C
   \   1F2A  DD70F9            LD      (IX-7),B
   \   1F2D            ?0531:
   2367                                                          clst = get_fat(fp->fs, fp->clust);      /* Follow cluster chain on the FAT */
   2368                                          }
   \   1F2D  A7                AND     A
   \   1F2E  010200            LD      BC,2
   \   1F31  ED42              SBC     HL,BC
   \   1F33  DD6EF8            LD      L,(IX-8)
   \   1F36  DD66F9            LD      H,(IX-7)
   \   1F39  0B                DEC     BC
   \   1F3A  0B                DEC     BC
   \   1F3B  ED42              SBC     HL,BC
   \   1F3D  384D              JR      C,?0990
   \   1F3F            ?0532:
   \   1F3F            ?0533:
   2369                                          if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   \   1F3F  DD7EF6            LD      A,(IX-10)
   \   1F42  DDA6F7            AND     (IX-9)
   \   1F45  DDA6F8            AND     (IX-8)
   \   1F48  DDA6F9            AND     (IX-7)
   \   1F4B  3C                INC     A
   \   1F4C  CABB20            JP      Z,?0989
   \   1F4F            ?0534:
   \   1F4F            ?0535:
   2370                                          if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \   1F4F  DD4EF8            LD      C,(IX-8)
   \   1F52  DD46F9            LD      B,(IX-7)
   \   1F55  DD6EF6            LD      L,(IX-10)
   \   1F58  FD7512            LD      (IY+18),L
   \   1F5B  DD66F7            LD      H,(IX-9)
   \   1F5E  FD7413            LD      (IY+19),H
   \   1F61  FD7114            LD      (IY+20),C
   \   1F64  FD7015            LD      (IY+21),B
   \   1F67            ?0528:
   2371                                          fp->clust = clst;                               /* Update current cluster */
   2372                                  }
   \   1F67  FD6E14            LD      L,(IY+20)
   \   1F6A  FD6615            LD      H,(IY+21)
   \   1F6D  E5                PUSH    HL
   \   1F6E  FD6E12            LD      L,(IY+18)
   \   1F71  FD6613            LD      H,(IY+19)
   \   1F74  E5                PUSH    HL
   \   1F75  CD410C            CALL    ?1052
   \   1F78  F1                POP     AF
   \   1F79  F1                POP     AF
   \   1F7A  DD75F0            LD      (IX-16),L
   \   1F7D  DD74F1            LD      (IX-15),H
   \   1F80  DD71F2            LD      (IX-14),C
   \   1F83  DD70F3            LD      (IX-13),B
   2373                                  sect = clust2sect(fp->fs, fp->clust);   /* Get current sector */
   \   1F86  7D                LD      A,L
   \   1F87  B4                OR      H
   \   1F88  B1                OR      C
   \   1F89  B0                OR      B
   \   1F8A  2009              JR      NZ,?0537
   \   1F8C            ?0536:
   \   1F8C            ?0990:
   \   1F8C  FDCB04FE          SET     7,(IY+4)
   \   1F90            ?0986:
   \   1F90  3E02              LD      A,2
   \   1F92  C36321            JP      ?0521
   \   1F95            ?0537:
   2374                                  if (!sect) ABORT(fp->fs, FR_INT_ERR);
   \   1F95  210600            LD      HL,6
   \   1F98  39                ADD     HL,SP
   \   1F99  CD6621            CALL    ?1040
   2375                                  sect += csect;
   \   1F9C  D5                PUSH    DE
   \   1F9D  D9                EXX
   \   1F9E  D1                POP     DE
   \   1F9F  D9                EXX
   2376                                  cc = btr / SS(fp->fs);                          /* When remaining bytes >= sector size, */
   \   1FA0  7B                LD      A,E
   \   1FA1  B2                OR      D
   \   1FA2  CA6D20            JP      Z,?0539
   \   1FA5            ?0538:
   2377                                  if (cc) {                                                       /* Read maximum contiguous sectors directly */
   \   1FA5  DD4EFE            LD      C,(IX-2)
   \   1FA8  0600              LD      B,0
   \   1FAA  D9                EXX
   \   1FAB  D5                PUSH    DE
   \   1FAC  D9                EXX
   \   1FAD  E1                POP     HL
   \   1FAE  09                ADD     HL,BC
   \   1FAF  4D                LD      C,L
   \   1FB0  44                LD      B,H
   \   1FB1  FD6E00            LD      L,(IY+0)
   \   1FB4  FD6601            LD      H,(IY+1)
   \   1FB7  23                INC     HL
   \   1FB8  23                INC     HL
   \   1FB9  23                INC     HL
   \   1FBA  6E                LD      L,(HL)
   \   1FBB  2600              LD      H,0
   \   1FBD  A7                AND     A
   \   1FBE  ED42              SBC     HL,BC
   \   1FC0  3017              JR      NC,?0541
   \   1FC2            ?0540:
   2378                                          if (csect + cc > fp->fs->csize) /* Clip at cluster boundary */
   \   1FC2  DD4EFE            LD      C,(IX-2)
   \   1FC5  0600              LD      B,0
   \   1FC7  FD6E00            LD      L,(IY+0)
   \   1FCA  FD6601            LD      H,(IY+1)
   \   1FCD  23                INC     HL
   \   1FCE  23                INC     HL
   \   1FCF  23                INC     HL
   \   1FD0  6E                LD      L,(HL)
   \   1FD1  60                LD      H,B
   \   1FD2  A7                AND     A
   \   1FD3  ED42              SBC     HL,BC
   \   1FD5  E5                PUSH    HL
   \   1FD6  D9                EXX
   \   1FD7  D1                POP     DE
   \   1FD8  D9                EXX
   \   1FD9            ?0541:
   2379                                                  cc = fp->fs->csize - csect;
   \   1FD9  FD6E00            LD      L,(IY+0)
   \   1FDC  FD6601            LD      H,(IY+1)
   \   1FDF  23                INC     HL
   \   1FE0  7E                LD      A,(HL)
   \   1FE1  320000            LD      (dio_par),A
   \   1FE4  DD6EF4            LD      L,(IX-12)
   \   1FE7  DD66F5            LD      H,(IX-11)
   \   1FEA  220100            LD      (dio_par+1),HL
   \   1FED  210600            LD      HL,6
   \   1FF0  39                ADD     HL,SP
   \   1FF1  220300            LD      (dio_par+3),HL
   \   1FF4  D9                EXX
   \   1FF5  D5                PUSH    DE
   \   1FF6  D9                EXX
   \   1FF7  E1                POP     HL
   \   1FF8  7D                LD      A,L
   2380                                          SET_DIO_PAR(fp->fs->drv, rbuff, sect, (BYTE)cc);
   \   1FF9  CD4B01            CALL    ?1042
   \   1FFC  C2BB20            JP      NZ,?0989
   \   1FFF            ?0542:
   2381                                          if (disk_read() != RES_OK)
   \   1FFF            ?0543:
   2382                                                  ABORT(fp->fs, FR_DISK_ERR);
   2383          #if !_FS_READONLY && _FS_MINIMIZE <= 2                  /* Replace one of the read sectors with cached data if it contains a dirty sector */
   2384          #if _FS_TINY
   2387          #else
   \   1FFF  FDCB0476          BIT     6,(IY+4)
   \   2003  285A              JR      Z,?0547
   \   2005  D9                EXX
   \   2006  D5                PUSH    DE
   \   2007  D9                EXX
   \   2008  E1                POP     HL
   \   2009  4F                LD      C,A
   \   200A  47                LD      B,A
   \   200B  C5                PUSH    BC
   \   200C  E5                PUSH    HL
   \   200D  A7                AND     A
   \   200E  FD6E16            LD      L,(IY+22)
   \   2011  FD6617            LD      H,(IY+23)
   \   2014  DD4EF0            LD      C,(IX-16)
   \   2017  DD46F1            LD      B,(IX-15)
   \   201A  ED42              SBC     HL,BC
   \   201C  EB                EX      DE,HL
   \   201D  FD6E18            LD      L,(IY+24)
   \   2020  FD6619            LD      H,(IY+25)
   \   2023  DD4EF2            LD      C,(IX-14)
   \   2026  DD46F3            LD      B,(IX-13)
   \   2029  ED42              SBC     HL,BC
   \   202B  EB                EX      DE,HL
   \   202C  A7                AND     A
   \   202D  C1                POP     BC
   \   202E  ED42              SBC     HL,BC
   \   2030  EB                EX      DE,HL
   \   2031  C1                POP     BC
   \   2032  ED42              SBC     HL,BC
   \   2034  3029              JR      NC,?0547
   \   2036            ?0549:
   \   2036            ?0548:
   \   2036            ?0546:
   2388                                          if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
   \   2036  010002            LD      BC,512
   \   2039  DD5EF0            LD      E,(IX-16)
   \   203C  DD56F1            LD      D,(IX-15)
   \   203F  FD6E16            LD      L,(IY+22)
   \   2042  FD6617            LD      H,(IY+23)
   \   2045  A7                AND     A
   \   2046  ED52              SBC     HL,DE
   \   2048  65                LD      H,L
   \   2049  69                LD      L,C
   \   204A  29                ADD     HL,HL
   \   204B  DD5EF4            LD      E,(IX-12)
   \   204E  DD56F5            LD      D,(IX-11)
   \   2051  19                ADD     HL,DE
   \   2052  EB                EX      DE,HL
   \   2053  212000            LD      HL,32
   \   2056  FDE5              PUSH    IY
   \   2058  C1                POP     BC
   \   2059  09                ADD     HL,BC
   \   205A  010002            LD      BC,512
   \   205D  EDB0              LDIR
   \   205F            ?0547:
   2389                                                  memcpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   2390          #endif
   2391          #endif
   \   205F  D9                EXX
   \   2060  D5                PUSH    DE
   \   2061  D9                EXX
   \   2062  E1                POP     HL
   \   2063  65                LD      H,L
   \   2064  6F                LD      L,A
   \   2065  29                ADD     HL,HL
   \   2066  E5                PUSH    HL
   \   2067  D9                EXX
   \   2068  C1                POP     BC
   \   2069  D9                EXX
   2392                                          rcnt = SS(fp->fs) * cc;                 /* Number of bytes transferred */
   \   206A  C32421            JP      ?0983
   \   206D            ?0539:
   2393                                          continue;
   2394                                  }
   2395          #if !_FS_TINY
   \   206D  FD6E16            LD      L,(IY+22)
   \   2070  FD6617            LD      H,(IY+23)
   \   2073  DD4EF0            LD      C,(IX-16)
   \   2076  DD46F1            LD      B,(IX-15)
   \   2079  ED42              SBC     HL,BC
   \   207B  2010              JR      NZ,?0982
   \   207D  FD6E18            LD      L,(IY+24)
   \   2080  FD6619            LD      H,(IY+25)
   \   2083  DD4EF2            LD      C,(IX-14)
   \   2086  DD46F3            LD      B,(IX-13)
   \   2089  ED42              SBC     HL,BC
   \   208B  2837              JR      Z,?0557
   \   208D            ?0982:
   \   208D            ?0550:
   2396                                  if (fp->dsect != sect) {                        /* Load data sector if not in cache */
   2397          #if !_FS_READONLY
   \   208D  FDCB0476          BIT     6,(IY+4)
   \   2091  280A              JR      Z,?0553
   \   2093            ?0552:
   2398                                          if (fp->flag & FA__DIRTY) {             /* Write-back dirty sector cache */
   2399                                                  SET_DIO_PAR(fp->fs->drv, fp->buf, fp->dsect, 1);
   \   2093  CD2201            CALL    ?1038
   \   2096  B7                OR      A
   \   2097  2022              JR      NZ,?0989
   \   2099            ?0554:
   2400                                                  if (disk_write() != RES_OK)
   \   2099            ?0555:
   2401                                                          ABORT(fp->fs, FR_DISK_ERR);
   \   2099  FDCB04B6          RES     6,(IY+4)
   \   209D            ?0553:
   2402                                                  fp->flag &= ~FA__DIRTY;
   2403                                          }
   2404                                          
   \   209D  FD6E00            LD      L,(IY+0)
   \   20A0  FD6601            LD      H,(IY+1)
   \   20A3  23                INC     HL
   \   20A4  7E                LD      A,(HL)
   \   20A5  320000            LD      (dio_par),A
   \   20A8  212000            LD      HL,32
   \   20AB  FDE5              PUSH    IY
   \   20AD  C1                POP     BC
   \   20AE  09                ADD     HL,BC
   \   20AF  220100            LD      (dio_par+1),HL
   \   20B2  210600            LD      HL,6
   \   20B5  39                ADD     HL,SP
   2405                                          SET_DIO_PAR(fp->fs->drv, fp->buf, sect, 1);
   \   20B6  CD4601            CALL    ?1041
   \   20B9  2809              JR      Z,?0557
   \   20BB            ?0556:
   2406                                          if (disk_read() != RES_OK)      /* Fill sector cache */
   \   20BB            ?0989:
   \   20BB  FDCB04FE          SET     7,(IY+4)
   \   20BF  3E01              LD      A,1
   \   20C1  C36321            JP      ?0521
   \   20C4            ?0557:
   \   20C4            ?0551:
   2407                                                  ABORT(fp->fs, FR_DISK_ERR);
   2408                                  }
   2409          #endif
   \   20C4  DD4EF2            LD      C,(IX-14)
   \   20C7  DD46F3            LD      B,(IX-13)
   \   20CA  DD6EF0            LD      L,(IX-16)
   \   20CD  FD7516            LD      (IY+22),L
   \   20D0  DD66F1            LD      H,(IX-15)
   \   20D3  FD7417            LD      (IY+23),H
   \   20D6  FD7118            LD      (IY+24),C
   \   20D9  FD7019            LD      (IY+25),B
   \   20DC            ?0526:
   2410                                  fp->dsect = sect;
   2411                          }
   \   20DC  FD4E06            LD      C,(IY+6)
   \   20DF  FD7E07            LD      A,(IY+7)
   \   20E2  E601              AND     1
   \   20E4  47                LD      B,A
   \   20E5  210002            LD      HL,512
   \   20E8  ED42              SBC     HL,BC
   \   20EA  E5                PUSH    HL
   \   20EB  D9                EXX
   \   20EC  C1                POP     BC
   \   20ED  D9                EXX
   2412                          rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));    /* Get partial sector data from sector buffer */
   \   20EE  4D                LD      C,L
   \   20EF  44                LD      B,H
   \   20F0  DD6E08            LD      L,(IX+8)
   \   20F3  DD6609            LD      H,(IX+9)
   \   20F6  A7                AND     A
   \   20F7  ED42              SBC     HL,BC
   \   20F9  3008              JR      NC,?0559
   \   20FB            ?0558:
   \   20FB  D9                EXX
   \   20FC  DD4E08            LD      C,(IX+8)
   \   20FF  DD4609            LD      B,(IX+9)
   \   2102  D9                EXX
   \   2103            ?0559:
   2413                          if (rcnt > btr) rcnt = btr;
   2414          #if _FS_TINY
   2418          #else
   \   2103  D9                EXX
   \   2104  C5                PUSH    BC
   \   2105  D9                EXX
   \   2106  DD5EF4            LD      E,(IX-12)
   \   2109  DD56F5            LD      D,(IX-11)
   \   210C  FD6E06            LD      L,(IY+6)
   \   210F  FD7E07            LD      A,(IY+7)
   \   2112  E601              AND     1
   \   2114  67                LD      H,A
   \   2115  FDE5              PUSH    IY
   \   2117  C1                POP     BC
   \   2118  09                ADD     HL,BC
   \   2119  012000            LD      BC,32
   \   211C  09                ADD     HL,BC
   \   211D  C1                POP     BC
   \   211E  79                LD      A,C
   \   211F  B0                OR      B
   \   2120  2802              JR      Z,?0983
   \   2122  EDB0              LDIR
   \   2124            ?0983:
   \   2124            ?0524:
   2354                  for ( ;  btr;                                                           /* Repeat until all data read */
   \   2124  210A00            LD      HL,10
   \   2127  39                ADD     HL,SP
   \   2128  D9                EXX
   \   2129  C5                PUSH    BC
   \   212A  D9                EXX
   \   212B  C1                POP     BC
   \   212C  7E                LD      A,(HL)
   \   212D  81                ADD     A,C
   \   212E  77                LD      (HL),A
   \   212F  23                INC     HL
   \   2130  7E                LD      A,(HL)
   \   2131  88                ADC     A,B
   \   2132  77                LD      (HL),A
   \   2133  210600            LD      HL,6
   \   2136  FDE5              PUSH    IY
   \   2138  C1                POP     BC
   \   2139  09                ADD     HL,BC
   \   213A  D9                EXX
   \   213B  C5                PUSH    BC
   \   213C  D9                EXX
   \   213D  D1                POP     DE
   \   213E  010000            LD      BC,0
   \   2141  CD0000            CALL    ?L_ADDASG_L03
   \   2144  D9                EXX
   \   2145  C5                PUSH    BC
   \   2146  D9                EXX
   \   2147  C1                POP     BC
   \   2148  DD6E0A            LD      L,(IX+10)
   \   214B  DD660B            LD      H,(IX+11)
   \   214E  7E                LD      A,(HL)
   \   214F  81                ADD     A,C
   \   2150  77                LD      (HL),A
   \   2151  23                INC     HL
   \   2152  7E                LD      A,(HL)
   \   2153  88                ADC     A,B
   \   2154  77                LD      (HL),A
   \   2155  211E00            LD      HL,30
   \   2158  39                ADD     HL,SP
   \   2159  7E                LD      A,(HL)
   \   215A  91                SUB     C
   \   215B  77                LD      (HL),A
   \   215C  23                INC     HL
   \   215D  7E                LD      A,(HL)
   \   215E  98                SBC     A,B
   \   215F  77                LD      (HL),A
   2419                          memcpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
   2420          #endif
   2421                  }
   2422          
   \   2160  C3B61E            JP      ?0520
   \   2163            ?0521:
   2423                  LEAVE_FF(fp->fs, FR_OK);
   \   2163            ?0560:
   \   2163  C32F0C            JP      ?0154
   \   2166            ?1040:
   \   2166  DD5EFE            LD      E,(IX-2)
   \   2169  010000            LD      BC,0
   \   216C  51                LD      D,C
   \   216D  CD0000            CALL    ?L_ADDASG_L03
   \   2170  0609              LD      B,9
   \   2172  DD5E08            LD      E,(IX+8)
   \   2175  DD5609            LD      D,(IX+9)
   \   2178  CD0000            CALL    ?US_RSH_L02
   \   217B  C9                RET
   \   217C            ?1065:
   \   217C  DD6E02            LD      L,(IX+2)
   \   217F  DD6603            LD      H,(IX+3)
   \   2182  E5                PUSH    HL
   \   2183  FDE1              POP     IY
   \   2185            ?1064:
   \   2185  FD4E02            LD      C,(IY+2)
   \   2188  FD4603            LD      B,(IY+3)
   \   218B  FD5E00            LD      E,(IY+0)
   \   218E  FD5601            LD      D,(IY+1)
   \   2191  C30C1B            JP      validate
   2424          }
   2425          
   2426          
   2427          
   2428          
   2429          #if !_FS_READONLY
   2430          /*-----------------------------------------------------------------------*/
   2431          /* Write File                                                            */
   2432          /*-----------------------------------------------------------------------*/
   2433          
   2434          FRESULT f_write (
   2435                  FIL *fp,                        /* Pointer to the file object */
   2436                  const void *buff,       /* Pointer to the data to be written */
   2437                  UINT btw,                       /* Number of bytes to write */
   2438                  UINT *bw                        /* Pointer to number of bytes written */
   2439          )
   \   2194            f_write:
   \   2194  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2197  F4FF              DEFW    -12
   \   2199  FDE5              PUSH    IY
   \   219B  D9                EXX
   \   219C  C5                PUSH    BC
   \   219D  D5                PUSH    DE
   \   219E  D9                EXX
   \   219F  DD6E02            LD      L,(IX+2)
   \   21A2  DD6603            LD      H,(IX+3)
   \   21A5  E5                PUSH    HL
   \   21A6  FDE1              POP     IY
   2440          {
   2441                  FRESULT res;
   2442                  DWORD clst, sect;
   2443                  UINT wcnt, cc;
   \   21A8  DD71FC            LD      (IX-4),C
   \   21AB  DD70FD            LD      (IX-3),B
   2444                  const BYTE *wbuff = buff;
   2445                  BYTE csect;
   2446          
   2447          
   \   21AE  DD6E0A            LD      L,(IX+10)
   \   21B1  DD660B            LD      H,(IX+11)
   \   21B4  AF                XOR     A
   \   21B5  77                LD      (HL),A
   \   21B6  23                INC     HL
   \   21B7  77                LD      (HL),A
   2448                  *bw = 0;        /* Initialize byte counter */
   2449          
   \   21B8  CD8521            CALL    ?1064
   2450                  res = validate(fp->fs, fp->id);                 /* Check validity */
   \   21BB  B7                OR      A
   \   21BC  C21625            JP      NZ,?0612
   \   21BF            ?0561:
   2451                  if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   21BF            ?0562:
   \   21BF  FD7E04            LD      A,(IY+4)
   \   21C2  B7                OR      A
   \   21C3  FAEE22            JP      M,?0996
   \   21C6            ?0563:
   2452                  if (fp->flag & FA__ERROR)                               /* Aborted file? */
   2453                          LEAVE_FF(fp->fs, FR_INT_ERR);
   \   21C6            ?0564:
   \   21C6  FDCB044E          BIT     1,(IY+4)
   \   21CA  2005              JR      NZ,?0566
   \   21CC            ?0565:
   2454                  if (!(fp->flag & FA_WRITE))                             /* Check access mode */
   \   21CC  3E07              LD      A,7
   2455                          LEAVE_FF(fp->fs, FR_DENIED);
   \   21CE  C31625            JP      ?0612
   \   21D1            ?0566:
   \   21D1  FD6E0C            LD      L,(IY+12)
   \   21D4  FD660D            LD      H,(IY+13)
   \   21D7  E5                PUSH    HL
   \   21D8  FD6E0A            LD      L,(IY+10)
   \   21DB  FD660B            LD      H,(IY+11)
   \   21DE  E5                PUSH    HL
   \   21DF  DD6E08            LD      L,(IX+8)
   \   21E2  DD6609            LD      H,(IX+9)
   \   21E5  110000            LD      DE,0
   \   21E8  C1                POP     BC
   \   21E9  09                ADD     HL,BC
   \   21EA  EB                EX      DE,HL
   \   21EB  C1                POP     BC
   \   21EC  ED4A              ADC     HL,BC
   \   21EE  EB                EX      DE,HL
   \   21EF  A7                AND     A
   \   21F0  FD4E0A            LD      C,(IY+10)
   \   21F3  FD460B            LD      B,(IY+11)
   \   21F6  ED42              SBC     HL,BC
   \   21F8  EB                EX      DE,HL
   \   21F9  FD4E0C            LD      C,(IY+12)
   \   21FC  FD460D            LD      B,(IY+13)
   \   21FF  ED42              SBC     HL,BC
   \   2201  3007              JR      NC,?0568
   \   2203            ?0567:
   \   2203  AF                XOR     A
   \   2204  DD7708            LD      (IX+8),A
   \   2207  DD7709            LD      (IX+9),A
   \   220A            ?0568:
   \   220A            ?0570:
   2456                  if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;      /* File size cannot reach 4GB */
   2457          
   \   220A  DD7E08            LD      A,(IX+8)
   \   220D  DDB609            OR      (IX+9)
   \   2210  CADC24            JP      Z,?0569
   \   2213            ?0571:
   2459                          wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   \   2213  FD6E06            LD      L,(IY+6)
   \   2216  FD7E07            LD      A,(IY+7)
   \   2219  E601              AND     1
   \   221B  67                LD      H,A
   \   221C  7D                LD      A,L
   \   221D  B4                OR      H
   \   221E  C25024            JP      NZ,?0574
   \   2221            ?0573:
   2460                          if ((fp->fptr % SS(fp->fs)) == 0) {     /* On the sector boundary? */
   \   2221  FD4E08            LD      C,(IY+8)
   \   2224  FD4609            LD      B,(IY+9)
   \   2227  FD6E06            LD      L,(IY+6)
   \   222A  FD6607            LD      H,(IY+7)
   \   222D  3E09              LD      A,9
   \   222F  CD0000            CALL    ?UL_RSH_L03
   \   2232  E5                PUSH    HL
   \   2233  FD6E00            LD      L,(IY+0)
   \   2236  FD6601            LD      H,(IY+1)
   \   2239  23                INC     HL
   \   223A  23                INC     HL
   \   223B  23                INC     HL
   \   223C  7E                LD      A,(HL)
   \   223D  C6FF              ADD     A,255
   \   223F  E1                POP     HL
   \   2240  A5                AND     L
   \   2241  DD77FE            LD      (IX-2),A
   2461                                  csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));    /* Sector offset in the cluster */
   \   2244  206C              JR      NZ,?0576
   \   2246            ?0575:
   2462                                  if (!csect) {                                   /* On the cluster boundary? */
   \   2246  FD7E06            LD      A,(IY+6)
   \   2249  FDB607            OR      (IY+7)
   \   224C  FDB608            OR      (IY+8)
   \   224F  FDB609            OR      (IY+9)
   \   2252  2029              JR      NZ,?0578
   \   2254            ?0577:
   2463                                          if (fp->fptr == 0) {            /* On the top of the file? */
   \   2254  FD4E10            LD      C,(IY+16)
   \   2257  FD4611            LD      B,(IY+17)
   \   225A  FD6E0E            LD      L,(IY+14)
   \   225D  FD660F            LD      H,(IY+15)
   2464                                                  clst = fp->sclust;              /* Follow from the origin */
   \   2260  7D                LD      A,L
   \   2261  B4                OR      H
   \   2262  B1                OR      C
   \   2263  B0                OR      B
   \   2264  202A              JR      NZ,?0581
   \   2266            ?0579:
   2465                                                  if (clst == 0)                  /* When no cluster is allocated, */
   \   2266  6F                LD      L,A
   \   2267  67                LD      H,A
   \   2268  E5                PUSH    HL
   \   2269  E5                PUSH    HL
   \   226A  CD9F0E            CALL    ?1053
   \   226D  F1                POP     AF
   \   226E  F1                POP     AF
   \   226F  FD750E            LD      (IY+14),L
   \   2272  FD740F            LD      (IY+15),H
   \   2275  FD7110            LD      (IY+16),C
   \   2278  FD7011            LD      (IY+17),B
   \   227B            ?0580:
   2466                                                          fp->sclust = clst = create_chain(fp->fs, 0);    /* Create a new cluster chain */
   \   227B  1813              JR      ?0581
   \   227D            ?0578:
   2467                                          } else {                                        /* Middle or end of the file */
   2468          #if _USE_FASTSEEK
   2472          #endif
   \   227D  FD6E14            LD      L,(IY+20)
   \   2280  FD6615            LD      H,(IY+21)
   \   2283  E5                PUSH    HL
   \   2284  FD6E12            LD      L,(IY+18)
   \   2287  FD6613            LD      H,(IY+19)
   \   228A  E5                PUSH    HL
   \   228B  CD9F0E            CALL    ?1053
   \   228E  F1                POP     AF
   \   228F  F1                POP     AF
   \   2290            ?0581:
   2473                                                          clst = create_chain(fp->fs, fp->clust); /* Follow or stretch cluster chain on the FAT */
   2474                                          }
   \   2290  7D                LD      A,L
   \   2291  B4                OR      H
   \   2292  B1                OR      C
   \   2293  B0                OR      B
   \   2294  CADC24            JP      Z,?0569
   \   2297            ?0582:
   \   2297            ?0583:
   2475                                          if (clst == 0) break;           /* Could not allocate a new cluster (disk full) */
   \   2297  3E01              LD      A,1
   \   2299  AD                XOR     L
   \   229A  B4                OR      H
   \   229B  B1                OR      C
   \   229C  B0                OR      B
   \   229D  284B              JR      Z,?1000
   \   229F            ?0584:
   \   229F            ?0585:
   2476                                          if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   \   229F  7D                LD      A,L
   \   22A0  A4                AND     H
   \   22A1  A1                AND     C
   \   22A2  A0                AND     B
   \   22A3  3C                INC     A
   \   22A4  2818              JR      Z,?0997
   \   22A6            ?0586:
   \   22A6            ?0587:
   2477                                          if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \   22A6  FD7512            LD      (IY+18),L
   \   22A9  FD7413            LD      (IY+19),H
   \   22AC  FD7114            LD      (IY+20),C
   \   22AF  FD7015            LD      (IY+21),B
   \   22B2            ?0576:
   2478                                          fp->clust = clst;                       /* Update current cluster */
   2479                                  }
   2480          #if _FS_TINY
   2483          #else
   \   22B2  FDCB0476          BIT     6,(IY+4)
   \   22B6  280D              JR      Z,?0589
   \   22B8            ?0588:
   2484                                  if (fp->flag & FA__DIRTY) {             /* Write-back sector cache */
   2485                                          SET_DIO_PAR(fp->fs->drv, fp->buf, fp->dsect, 1);
   \   22B8  CD2201            CALL    ?1038
   \   22BB  B7                OR      A
   \   22BC  2803              JR      Z,?0591
   \   22BE            ?0590:
   2486                                          if (disk_write() != RES_OK)
   \   22BE            ?0997:
   \   22BE  C32F24            JP      ?0999
   \   22C1            ?0591:
   2487                                                  ABORT(fp->fs, FR_DISK_ERR);
   \   22C1  FDCB04B6          RES     6,(IY+4)
   \   22C5            ?0589:
   2488                                          fp->flag &= ~FA__DIRTY;
   2489                                  }
   2490          #endif
   \   22C5  FD6E14            LD      L,(IY+20)
   \   22C8  FD6615            LD      H,(IY+21)
   \   22CB  E5                PUSH    HL
   \   22CC  FD6E12            LD      L,(IY+18)
   \   22CF  FD6613            LD      H,(IY+19)
   \   22D2  E5                PUSH    HL
   \   22D3  CD410C            CALL    ?1052
   \   22D6  F1                POP     AF
   \   22D7  F1                POP     AF
   \   22D8  DD75F4            LD      (IX-12),L
   \   22DB  DD74F5            LD      (IX-11),H
   \   22DE  DD71F6            LD      (IX-10),C
   \   22E1  DD70F7            LD      (IX-9),B
   2491                                  sect = clust2sect(fp->fs, fp->clust);   /* Get current sector */
   \   22E4  7D                LD      A,L
   \   22E5  B4                OR      H
   \   22E6  B1                OR      C
   \   22E7  B0                OR      B
   \   22E8  2009              JR      NZ,?0593
   \   22EA            ?0592:
   \   22EA            ?1000:
   \   22EA  FDCB04FE          SET     7,(IY+4)
   \   22EE            ?0996:
   \   22EE  3E02              LD      A,2
   \   22F0  C31625            JP      ?0612
   \   22F3            ?0593:
   2492                                  if (!sect) ABORT(fp->fs, FR_INT_ERR);
   \   22F3  210600            LD      HL,6
   \   22F6  39                ADD     HL,SP
   \   22F7  CD6621            CALL    ?1040
   2493                                  sect += csect;
   \   22FA  D5                PUSH    DE
   \   22FB  D9                EXX
   \   22FC  D1                POP     DE
   \   22FD  D9                EXX
   2494                                  cc = btw / SS(fp->fs);                  /* When remaining bytes >= sector size, */
   \   22FE  7B                LD      A,E
   \   22FF  B2                OR      D
   \   2300  CAC723            JP      Z,?0595
   \   2303            ?0594:
   2495                                  if (cc) {                                               /* Write maximum contiguous sectors directly */
   \   2303  DD4EFE            LD      C,(IX-2)
   \   2306  0600              LD      B,0
   \   2308  D9                EXX
   \   2309  D5                PUSH    DE
   \   230A  D9                EXX
   \   230B  E1                POP     HL
   \   230C  09                ADD     HL,BC
   \   230D  4D                LD      C,L
   \   230E  44                LD      B,H
   \   230F  FD6E00            LD      L,(IY+0)
   \   2312  FD6601            LD      H,(IY+1)
   \   2315  23                INC     HL
   \   2316  23                INC     HL
   \   2317  23                INC     HL
   \   2318  6E                LD      L,(HL)
   \   2319  2600              LD      H,0
   \   231B  A7                AND     A
   \   231C  ED42              SBC     HL,BC
   \   231E  3017              JR      NC,?0597
   \   2320            ?0596:
   2496                                          if (csect + cc > fp->fs->csize) /* Clip at cluster boundary */
   \   2320  DD4EFE            LD      C,(IX-2)
   \   2323  0600              LD      B,0
   \   2325  FD6E00            LD      L,(IY+0)
   \   2328  FD6601            LD      H,(IY+1)
   \   232B  23                INC     HL
   \   232C  23                INC     HL
   \   232D  23                INC     HL
   \   232E  6E                LD      L,(HL)
   \   232F  60                LD      H,B
   \   2330  A7                AND     A
   \   2331  ED42              SBC     HL,BC
   \   2333  E5                PUSH    HL
   \   2334  D9                EXX
   \   2335  D1                POP     DE
   \   2336  D9                EXX
   \   2337            ?0597:
   2497                                                  cc = fp->fs->csize - csect;
   \   2337  FD6E00            LD      L,(IY+0)
   \   233A  FD6601            LD      H,(IY+1)
   \   233D  23                INC     HL
   \   233E  7E                LD      A,(HL)
   \   233F  320000            LD      (dio_par),A
   \   2342  DD6EFC            LD      L,(IX-4)
   \   2345  DD66FD            LD      H,(IX-3)
   \   2348  220100            LD      (dio_par+1),HL
   \   234B  210600            LD      HL,6
   \   234E  39                ADD     HL,SP
   \   234F  220300            LD      (dio_par+3),HL
   \   2352  D9                EXX
   \   2353  D5                PUSH    DE
   \   2354  D9                EXX
   \   2355  E1                POP     HL
   \   2356  7D                LD      A,L
   2498                                          SET_DIO_PAR(fp->fs->drv, wbuff, sect, (BYTE)cc);
   \   2357  CD4001            CALL    ?1039
   \   235A  B7                OR      A
   \   235B  C22F24            JP      NZ,?0999
   \   235E            ?0598:
   2499                                          if (disk_write() != RES_OK)
   \   235E            ?0599:
   2500                                                  ABORT(fp->fs, FR_DISK_ERR);
   2501          #if _FS_TINY
   2506          #else
   \   235E  D9                EXX
   \   235F  D5                PUSH    DE
   \   2360  D9                EXX
   \   2361  E1                POP     HL
   \   2362  4F                LD      C,A
   \   2363  47                LD      B,A
   \   2364  C5                PUSH    BC
   \   2365  E5                PUSH    HL
   \   2366  A7                AND     A
   \   2367  FD6E16            LD      L,(IY+22)
   \   236A  FD6617            LD      H,(IY+23)
   \   236D  DD4EF4            LD      C,(IX-12)
   \   2370  DD46F5            LD      B,(IX-11)
   \   2373  ED42              SBC     HL,BC
   \   2375  EB                EX      DE,HL
   \   2376  FD6E18            LD      L,(IY+24)
   \   2379  FD6619            LD      H,(IY+25)
   \   237C  DD4EF6            LD      C,(IX-10)
   \   237F  DD46F7            LD      B,(IX-9)
   \   2382  ED42              SBC     HL,BC
   \   2384  EB                EX      DE,HL
   \   2385  A7                AND     A
   \   2386  C1                POP     BC
   \   2387  ED42              SBC     HL,BC
   \   2389  EB                EX      DE,HL
   \   238A  C1                POP     BC
   \   238B  ED42              SBC     HL,BC
   \   238D  302A              JR      NC,?0601
   \   238F            ?0600:
   2507                                          if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   \   238F  212000            LD      HL,32
   \   2392  FDE5              PUSH    IY
   \   2394  D1                POP     DE
   \   2395  19                ADD     HL,DE
   \   2396  EB                EX      DE,HL
   \   2397  DD4EF4            LD      C,(IX-12)
   \   239A  DD46F5            LD      B,(IX-11)
   \   239D  FD6E16            LD      L,(IY+22)
   \   23A0  FD6617            LD      H,(IY+23)
   \   23A3  A7                AND     A
   \   23A4  ED42              SBC     HL,BC
   \   23A6  65                LD      H,L
   \   23A7  6F                LD      L,A
   \   23A8  29                ADD     HL,HL
   \   23A9  DD4EFC            LD      C,(IX-4)
   \   23AC  DD46FD            LD      B,(IX-3)
   \   23AF  09                ADD     HL,BC
   \   23B0  010002            LD      BC,512
   \   23B3  EDB0              LDIR
   2508                                                  memcpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   \   23B5  FDCB04B6          RES     6,(IY+4)
   \   23B9            ?0601:
   2509                                                  fp->flag &= ~FA__DIRTY;
   2510                                          }
   2511          #endif
   \   23B9  D9                EXX
   \   23BA  D5                PUSH    DE
   \   23BB  D9                EXX
   \   23BC  E1                POP     HL
   \   23BD  65                LD      H,L
   \   23BE  6F                LD      L,A
   \   23BF  29                ADD     HL,HL
   \   23C0  E5                PUSH    HL
   \   23C1  D9                EXX
   \   23C2  C1                POP     BC
   \   23C3  D9                EXX
   2512                                          wcnt = SS(fp->fs) * cc;         /* Number of bytes transferred */
   \   23C4  C39D24            JP      ?0572
   \   23C7            ?0595:
   2513                                          continue;
   2514                                  }
   2515          #if _FS_TINY
   2520          #else
   \   23C7  FD6E16            LD      L,(IY+22)
   \   23CA  FD6617            LD      H,(IY+23)
   \   23CD  DD4EF4            LD      C,(IX-12)
   \   23D0  DD46F5            LD      B,(IX-11)
   \   23D3  ED42              SBC     HL,BC
   \   23D5  2010              JR      NZ,?0993
   \   23D7  FD6E18            LD      L,(IY+24)
   \   23DA  FD6619            LD      H,(IY+25)
   \   23DD  DD4EF6            LD      C,(IX-10)
   \   23E0  DD46F7            LD      B,(IX-9)
   \   23E3  ED42              SBC     HL,BC
   \   23E5  2851              JR      Z,?0605
   \   23E7            ?0993:
   \   23E7            ?0602:
   2521                                  if (fp->dsect != sect) {                /* Fill sector cache with file data */
   2522                                          
   \   23E7  FD6E00            LD      L,(IY+0)
   \   23EA  FD6601            LD      H,(IY+1)
   \   23ED  23                INC     HL
   \   23EE  7E                LD      A,(HL)
   \   23EF  320000            LD      (dio_par),A
   \   23F2  212000            LD      HL,32
   \   23F5  FDE5              PUSH    IY
   \   23F7  C1                POP     BC
   \   23F8  09                ADD     HL,BC
   \   23F9  220100            LD      (dio_par+1),HL
   \   23FC  210600            LD      HL,6
   \   23FF  39                ADD     HL,SP
   \   2400  220300            LD      (dio_par+3),HL
   \   2403  3E01              LD      A,1
   \   2405  320500            LD      (dio_par+5),A
   2523                                          SET_DIO_PAR(fp->fs->drv, fp->buf, sect, 1);
   2524                                          if (fp->fptr < fp->fsize &&
   \   2408  210A00            LD      HL,10
   \   240B  09                ADD     HL,BC
   \   240C  5E                LD      E,(HL)
   \   240D  23                INC     HL
   \   240E  56                LD      D,(HL)
   \   240F  23                INC     HL
   \   2410  4E                LD      C,(HL)
   \   2411  23                INC     HL
   \   2412  46                LD      B,(HL)
   \   2413  C5                PUSH    BC
   \   2414  D5                PUSH    DE
   \   2415  A7                AND     A
   \   2416  FD6E06            LD      L,(IY+6)
   \   2419  FD6607            LD      H,(IY+7)
   \   241C  C1                POP     BC
   \   241D  ED42              SBC     HL,BC
   \   241F  FD6E08            LD      L,(IY+8)
   \   2422  FD6609            LD      H,(IY+9)
   \   2425  C1                POP     BC
   \   2426  ED42              SBC     HL,BC
   \   2428  300E              JR      NC,?0605
   \   242A  CD4E01            CALL    ?1043
   \   242D  2809              JR      Z,?0605
   \   242F            ?0607:
   \   242F            ?0606:
   \   242F            ?0604:
   2525                                                  disk_read() != RES_OK)
   \   242F            ?0999:
   \   242F  FDCB04FE          SET     7,(IY+4)
   \   2433  3E01              LD      A,1
   \   2435  C31625            JP      ?0612
   \   2438            ?0605:
   \   2438            ?0603:
   2526                                                          ABORT(fp->fs, FR_DISK_ERR);
   2527                                  }
   2528          #endif
   \   2438  DD4EF6            LD      C,(IX-10)
   \   243B  DD46F7            LD      B,(IX-9)
   \   243E  DD6EF4            LD      L,(IX-12)
   \   2441  FD7516            LD      (IY+22),L
   \   2444  DD66F5            LD      H,(IX-11)
   \   2447  FD7417            LD      (IY+23),H
   \   244A  FD7118            LD      (IY+24),C
   \   244D  FD7019            LD      (IY+25),B
   \   2450            ?0574:
   2529                                  fp->dsect = sect;
   2530                          }
   \   2450  FD4E06            LD      C,(IY+6)
   \   2453  FD7E07            LD      A,(IY+7)
   \   2456  E601              AND     1
   \   2458  47                LD      B,A
   \   2459  210002            LD      HL,512
   \   245C  ED42              SBC     HL,BC
   \   245E  E5                PUSH    HL
   \   245F  D9                EXX
   \   2460  C1                POP     BC
   \   2461  D9                EXX
   2531                          wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   \   2462  4D                LD      C,L
   \   2463  44                LD      B,H
   \   2464  DD6E08            LD      L,(IX+8)
   \   2467  DD6609            LD      H,(IX+9)
   \   246A  A7                AND     A
   \   246B  ED42              SBC     HL,BC
   \   246D  3008              JR      NC,?0609
   \   246F            ?0608:
   \   246F  D9                EXX
   \   2470  DD4E08            LD      C,(IX+8)
   \   2473  DD4609            LD      B,(IX+9)
   \   2476  D9                EXX
   \   2477            ?0609:
   2532                          if (wcnt > btw) wcnt = btw;
   2533          #if _FS_TINY
   2538          #else
   \   2477  D9                EXX
   \   2478  C5                PUSH    BC
   \   2479  D9                EXX
   \   247A  C1                POP     BC
   \   247B  FD6E06            LD      L,(IY+6)
   \   247E  FD7E07            LD      A,(IY+7)
   \   2481  E601              AND     1
   \   2483  67                LD      H,A
   \   2484  FDE5              PUSH    IY
   \   2486  D1                POP     DE
   \   2487  19                ADD     HL,DE
   \   2488  112000            LD      DE,32
   \   248B  19                ADD     HL,DE
   \   248C  EB                EX      DE,HL
   \   248D  DD6EFC            LD      L,(IX-4)
   \   2490  DD66FD            LD      H,(IX-3)
   \   2493  79                LD      A,C
   \   2494  B0                OR      B
   \   2495  2802              JR      Z,?0994
   \   2497  EDB0              LDIR
   \   2499            ?0994:
   2539                          memcpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
   \   2499  FDCB04F6          SET     6,(IY+4)
   \   249D            ?0572:
   2458                  for ( ;  btw;                                                   /* Repeat until all data written */
   \   249D  210E00            LD      HL,14
   \   24A0  39                ADD     HL,SP
   \   24A1  D9                EXX
   \   24A2  C5                PUSH    BC
   \   24A3  D9                EXX
   \   24A4  C1                POP     BC
   \   24A5  7E                LD      A,(HL)
   \   24A6  81                ADD     A,C
   \   24A7  77                LD      (HL),A
   \   24A8  23                INC     HL
   \   24A9  7E                LD      A,(HL)
   \   24AA  88                ADC     A,B
   \   24AB  77                LD      (HL),A
   \   24AC  210600            LD      HL,6
   \   24AF  FDE5              PUSH    IY
   \   24B1  C1                POP     BC
   \   24B2  09                ADD     HL,BC
   \   24B3  D9                EXX
   \   24B4  C5                PUSH    BC
   \   24B5  D9                EXX
   \   24B6  D1                POP     DE
   \   24B7  010000            LD      BC,0
   \   24BA  CD0000            CALL    ?L_ADDASG_L03
   \   24BD  D9                EXX
   \   24BE  C5                PUSH    BC
   \   24BF  D9                EXX
   \   24C0  C1                POP     BC
   \   24C1  DD6E0A            LD      L,(IX+10)
   \   24C4  DD660B            LD      H,(IX+11)
   \   24C7  7E                LD      A,(HL)
   \   24C8  81                ADD     A,C
   \   24C9  77                LD      (HL),A
   \   24CA  23                INC     HL
   \   24CB  7E                LD      A,(HL)
   \   24CC  88                ADC     A,B
   \   24CD  77                LD      (HL),A
   \   24CE  211A00            LD      HL,26
   \   24D1  39                ADD     HL,SP
   \   24D2  7E                LD      A,(HL)
   \   24D3  91                SUB     C
   \   24D4  77                LD      (HL),A
   \   24D5  23                INC     HL
   \   24D6  7E                LD      A,(HL)
   \   24D7  98                SBC     A,B
   \   24D8  77                LD      (HL),A
   2540                          fp->flag |= FA__DIRTY;
   2541          #endif
   2542                  }
   2543          
   \   24D9  C30A22            JP      ?0568
   \   24DC            ?0569:
   \   24DC  FD6E0A            LD      L,(IY+10)
   \   24DF  FD660B            LD      H,(IY+11)
   \   24E2  FD4E06            LD      C,(IY+6)
   \   24E5  FD4607            LD      B,(IY+7)
   \   24E8  ED42              SBC     HL,BC
   \   24EA  FD6E0C            LD      L,(IY+12)
   \   24ED  FD660D            LD      H,(IY+13)
   \   24F0  FD4E08            LD      C,(IY+8)
   \   24F3  FD4609            LD      B,(IY+9)
   \   24F6  ED42              SBC     HL,BC
   \   24F8  3018              JR      NC,?0611
   \   24FA            ?0610:
   \   24FA  FD4E08            LD      C,(IY+8)
   \   24FD  FD4609            LD      B,(IY+9)
   \   2500  FD6E06            LD      L,(IY+6)
   \   2503  FD6607            LD      H,(IY+7)
   \   2506  FD750A            LD      (IY+10),L
   \   2509  FD740B            LD      (IY+11),H
   \   250C  FD710C            LD      (IY+12),C
   \   250F  FD700D            LD      (IY+13),B
   \   2512            ?0611:
   2544                  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
   \   2512  FDCB04EE          SET     5,(IY+4)
   2545                  fp->flag |= FA__WRITTEN;                                                /* Set file change flag */
   2546          
   2547                  LEAVE_FF(fp->fs, FR_OK);
   \   2516            ?0612:
   \   2516  C32F0C            JP      ?0154
   2548          }
   2549          
   2550          
   2551          
   2552          
   2553          /*-----------------------------------------------------------------------*/
   2554          /* Synchronize the File Object                                           */
   2555          /*-----------------------------------------------------------------------*/
   2556          
   2557          FRESULT f_sync (
   2558                  FIL *fp         /* Pointer to the file object */
   2559          )
   \   2519            f_sync:
   \   2519  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   251C  FAFF              DEFW    -6
   \   251E  FDE5              PUSH    IY
   2560          {
   2561                  FRESULT res;
   2562                  DWORD tim;
   2563                  BYTE *dir;
   2564          
   2565          
   \   2520  CD7C21            CALL    ?1065
   2566                  res = validate(fp->fs, fp->id);         /* Check validity of the object */
   \   2523  B7                OR      A
   \   2524  C2DD25            JP      NZ,?0622
   \   2527            ?0613:
   2567                  if (res == FR_OK) {
   \   2527  FDCB046E          BIT     5,(IY+4)
   \   252B  CADD25            JP      Z,?0622
   \   252E            ?0615:
   2568                          if (fp->flag & FA__WRITTEN) {   /* Has the file been written? */
   2569          #if !_FS_TINY   /* Write-back dirty buffer */
   \   252E  FDCB0476          BIT     6,(IY+4)
   \   2532  280F              JR      Z,?0618
   \   2534            ?0617:
   2570                                  if (fp->flag & FA__DIRTY) {
   2571                                          SET_DIO_PAR(fp->fs->drv, fp->buf, fp->dsect, 1);
   \   2534  CD2201            CALL    ?1038
   \   2537  B7                OR      A
   \   2538  2805              JR      Z,?0620
   \   253A            ?0619:
   2572                                          if (disk_write() != RES_OK)
   \   253A  3E01              LD      A,1
   2573                                                  LEAVE_FF(fp->fs, FR_DISK_ERR);
   \   253C  C3DD25            JP      ?0622
   \   253F            ?0620:
   \   253F  FDCB04B6          RES     6,(IY+4)
   \   2543            ?0618:
   2574                                          fp->flag &= ~FA__DIRTY;
   2575                                  }
   2576          #endif
   2577                                  /* Update the directory entry */
   \   2543  FD6E1C            LD      L,(IY+28)
   \   2546  FD661D            LD      H,(IY+29)
   \   2549  E5                PUSH    HL
   \   254A  FD6E1A            LD      L,(IY+26)
   \   254D  FD661B            LD      H,(IY+27)
   \   2550  E5                PUSH    HL
   \   2551  FD5E00            LD      E,(IY+0)
   \   2554  FD5601            LD      D,(IY+1)
   \   2557  CD0000            CALL    move_window
   \   255A  E1                POP     HL
   \   255B  E1                POP     HL
   2578                                  res = move_window(fp->fs, fp->dir_sect);
   \   255C  B7                OR      A
   \   255D  207E              JR      NZ,?0622
   \   255F            ?0621:
   2579                                  if (res == FR_OK) {
   \   255F  FD5E1E            LD      E,(IY+30)
   \   2562  FD561F            LD      D,(IY+31)
   2580                                          dir = fp->dir_ptr;
   \   2565  210B00            LD      HL,11
   \   2568  19                ADD     HL,DE
   \   2569  CBEE              SET     5,(HL)
   2581                                          dir[DIR_Attr] |= AM_ARC;                                        /* Set archive bit */
   \   256B  D5                PUSH    DE
   \   256C  FD4E0C            LD      C,(IY+12)
   \   256F  FD460D            LD      B,(IY+13)
   \   2572  FD6E0A            LD      L,(IY+10)
   \   2575  FD660B            LD      H,(IY+11)
   \   2578  E5                PUSH    HL
   \   2579  211C00            LD      HL,28
   \   257C  19                ADD     HL,DE
   \   257D  D1                POP     DE
   \   257E  73                LD      (HL),E
   \   257F  23                INC     HL
   \   2580  72                LD      (HL),D
   \   2581  23                INC     HL
   \   2582  71                LD      (HL),C
   \   2583  23                INC     HL
   \   2584  70                LD      (HL),B
   \   2585  D1                POP     DE
   2582                                          ST_DWORD(dir+DIR_FileSize, fp->fsize);          /* Update file size */
   \   2586  211A00            LD      HL,26
   \   2589  19                ADD     HL,DE
   \   258A  FD4E0E            LD      C,(IY+14)
   \   258D  71                LD      (HL),C
   \   258E  FD460F            LD      B,(IY+15)
   \   2591  23                INC     HL
   \   2592  70                LD      (HL),B
   \   2593  D5                PUSH    DE
   \   2594  211400            LD      HL,20
   \   2597  19                ADD     HL,DE
   \   2598  E5                PUSH    HL
   \   2599  FD6E10            LD      L,(IY+16)
   \   259C  FD6611            LD      H,(IY+17)
   \   259F  EB                EX      DE,HL
   \   25A0  E1                POP     HL
   \   25A1  73                LD      (HL),E
   \   25A2  23                INC     HL
   \   25A3  72                LD      (HL),D
   2583                                          ST_CLUST(dir, fp->sclust);                                      /* Update start cluster */
   \   25A4  210600            LD      HL,6
   \   25A7  39                ADD     HL,SP
   \   25A8  EB                EX      DE,HL
   \   25A9  CD0000            CALL    get_fattime
   \   25AC  D1                POP     DE
   2584                                          get_fattime(&tim);                                              /* Update updated time */
   \   25AD  211600            LD      HL,22
   \   25B0  19                ADD     HL,DE
   \   25B1  DD4EFE            LD      C,(IX-2)
   \   25B4  DD46FF            LD      B,(IX-1)
   \   25B7  DD5EFC            LD      E,(IX-4)
   \   25BA  73                LD      (HL),E
   \   25BB  DD56FD            LD      D,(IX-3)
   \   25BE  23                INC     HL
   \   25BF  72                LD      (HL),D
   \   25C0  23                INC     HL
   \   25C1  71                LD      (HL),C
   \   25C2  23                INC     HL
   \   25C3  70                LD      (HL),B
   2585                                          ST_DWORD(dir+DIR_WrtTime, tim);
   \   25C4  FDCB04AE          RES     5,(IY+4)
   2586                                          fp->flag &= ~FA__WRITTEN;
   \   25C8  FD6E00            LD      L,(IY+0)
   \   25CB  FD6601            LD      H,(IY+1)
   \   25CE  010500            LD      BC,5
   \   25D1  09                ADD     HL,BC
   \   25D2  3601              LD      (HL),1
   2587                                          fp->fs->wflag = 1;
   \   25D4  FD5E00            LD      E,(IY+0)
   \   25D7  FD5601            LD      D,(IY+1)
   \   25DA  CD5301            CALL    sync
   \   25DD            ?0622:
   \   25DD            ?0616:
   \   25DD            ?0614:
   2588                                          res = sync(fp->fs);
   2589                                  }
   2590                          }
   2591                  }
   2592          
   2593                  LEAVE_FF(fp->fs, res);
   \   25DD            ?0623:
   \   25DD  FDE1              POP     IY
   \   25DF  C30000            JP      ?LEAVE_DIRECT_L09
   2594          }
   2595          
   2596          #endif /* !_FS_READONLY */
   2597          
   2598          
   2599          
   2600          
   2601          /*-----------------------------------------------------------------------*/
   2602          /* Close File                                                            */
   2603          /*-----------------------------------------------------------------------*/
   2604          
   2605          FRESULT f_close (
   2606                  FIL *fp         /* Pointer to the file object to be closed */
   2607          )
   \   25E2            f_close:
   \   25E2  DDE5              PUSH    IX
   \   25E4  F5                PUSH    AF
   \   25E5  D5                PUSH    DE
   \   25E6  DDE1              POP     IX
   2608          {
   2609                  FRESULT res;
   2610          
   2611          #if _FS_READONLY
   2617          #else
   \   25E8  CD1925            CALL    f_sync
   \   25EB  210000            LD      HL,0
   \   25EE  39                ADD     HL,SP
   \   25EF  77                LD      (HL),A
   2618                  res = f_sync(fp);               /* Flush cached data */
   2619          #if _FS_SHARE
   2621          #if _FS_REENTRANT
   2627          #else
   2629          #endif
   2631          #endif
   \   25F0  AF                XOR     A
   \   25F1  B6                OR      (HL)
   \   25F2  2006              JR      NZ,?0625
   \   25F4            ?0624:
   \   25F4  DDE5              PUSH    IX
   \   25F6  E1                POP     HL
   \   25F7  77                LD      (HL),A
   \   25F8  23                INC     HL
   \   25F9  77                LD      (HL),A
   \   25FA            ?0625:
   2632                  if (res == FR_OK) fp->fs = 0;   /* Discard file object */
   2633                  return res;
   2634          #endif
   \   25FA  E1                POP     HL
   \   25FB  DDE1              POP     IX
   \   25FD  C9                RET
   2635          }
   2636          
   2637          
   2638          
   2639          
   2640          /*-----------------------------------------------------------------------*/
   2641          /* Current Drive/Directory Handlings                                     */
   2642          /*-----------------------------------------------------------------------*/
   2643          
   2644          #if _FS_RPATH >= 1
   2645          
   2646          FRESULT f_chdrive (
   2647                  BYTE drv                /* Drive number */
   2648          )
   \   25FE            f_chdrive:
   \   25FE  C5                PUSH    BC
   \   25FF  D5                PUSH    DE
   2649          {
   \   2600  7B                LD      A,E
   \   2601  FE02              CP      2
   \   2603  3804              JR      C,?0627
   \   2605            ?0626:
   \   2605  3E0B              LD      A,11
   2650                  if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   2651          
   \   2607  1805              JR      ?0628
   \   2609            ?0627:
   \   2609  7B                LD      A,E
   \   260A  320000            LD      (CurrVol),A
   2652                  CurrVol = drv;
   2653          
   \   260D  AF                XOR     A
   2654                  return FR_OK;
   \   260E            ?0628:
   \   260E  E1                POP     HL
   \   260F  C1                POP     BC
   \   2610  C9                RET
   2655          }
   2656          
   2657          
   2658          
   2659          FRESULT f_chdir (
   2660                  const TCHAR *path       /* Pointer to the directory path */
   2661          )
   \   2611            f_chdir:
   \   2611  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2614  DEFF              DEFW    -34
   \   2616  FDE5              PUSH    IY
   2662          {
   2663                  FRESULT res;
   2664                  DIR dj;
   2665                  DEF_NAMEBUF;
   2666          
   2667          
   \   2618  0E00              LD      C,0
   \   261A  C5                PUSH    BC
   \   261B  210400            LD      HL,4
   \   261E  39                ADD     HL,SP
   \   261F  4D                LD      C,L
   \   2620  44                LD      B,H
   \   2621  212800            LD      HL,40
   \   2624  39                ADD     HL,SP
   \   2625  CD221E            CALL    ?1060
   \   2628  E1                POP     HL
   \   2629  FD6F              LD      IYL,A
   2668                  res = chk_mounted(&path, &dj.fs, 0);
   \   262B  B7                OR      A
   \   262C  206E              JR      NZ,?0640
   \   262E            ?0629:
   2669                  if (res == FR_OK) {
   \   262E  211800            LD      HL,24
   \   2631  39                ADD     HL,SP
   \   2632  DD75F2            LD      (IX-14),L
   \   2635  DD74F3            LD      (IX-13),H
   2670                          INIT_BUF(dj);
   \   2638  DD4E02            LD      C,(IX+2)
   \   263B  DD4603            LD      B,(IX+3)
   \   263E  210200            LD      HL,2
   \   2641  39                ADD     HL,SP
   \   2642  CDA326            CALL    ?1062
   2671                          res = follow_path(&dj, path);           /* Follow the path */
   2672                          FREE_BUF();
   \   2645  204C              JR      NZ,?0638
   \   2647            ?0631:
   2673                          if (res == FR_OK) {                                     /* Follow completed */
   \   2647  DD6EF0            LD      L,(IX-16)
   \   264A  7D                LD      A,L
   \   264B  DD66F1            LD      H,(IX-15)
   \   264E  B4                OR      H
   \   264F  2019              JR      NZ,?0634
   \   2651            ?0633:
   2674                                  if (!dj.dir) {
   \   2651  211700            LD      HL,23
   \   2654  DD4EDE            LD      C,(IX-34)
   \   2657  DD46DF            LD      B,(IX-33)
   \   265A  09                ADD     HL,BC
   \   265B  E5                PUSH    HL
   \   265C  210A00            LD      HL,10
   \   265F  39                ADD     HL,SP
   \   2660  5E                LD      E,(HL)
   \   2661  23                INC     HL
   \   2662  56                LD      D,(HL)
   \   2663  23                INC     HL
   \   2664  4E                LD      C,(HL)
   \   2665  23                INC     HL
   \   2666  46                LD      B,(HL)
   \   2667  E1                POP     HL
   \   2668  181D              JR      ?1001
   2675                                          dj.fs->cdir = dj.sclust;        /* Start directory itself */
   \   266A            ?0634:
   2676                                  } else {
   \   266A  010B00            LD      BC,11
   \   266D  09                ADD     HL,BC
   \   266E  CB66              BIT     4,(HL)
   \   2670  281E              JR      Z,?0637
   \   2672            ?0636:
   2677                                          if (dj.dir[DIR_Attr] & AM_DIR)  /* Reached to the directory */
   \   2672  DD5EF0            LD      E,(IX-16)
   \   2675  DD56F1            LD      D,(IX-15)
   \   2678  CD0000            CALL    LD_CLUST
   \   267B  E5                PUSH    HL
   \   267C  211700            LD      HL,23
   \   267F  DD5EDE            LD      E,(IX-34)
   \   2682  DD56DF            LD      D,(IX-33)
   \   2685  19                ADD     HL,DE
   \   2686  D1                POP     DE
   \   2687            ?1001:
   \   2687  73                LD      (HL),E
   \   2688  23                INC     HL
   \   2689  72                LD      (HL),D
   \   268A  23                INC     HL
   \   268B  71                LD      (HL),C
   \   268C  23                INC     HL
   \   268D  70                LD      (HL),B
   2678                                                  dj.fs->cdir = LD_CLUST(dj.dir);
   \   268E  1803              JR      ?0638
   \   2690            ?0637:
   2679                                          else
   \   2690  FD2E05            LD      IYL,5
   \   2693            ?0638:
   \   2693            ?0635:
   \   2693            ?0632:
   2680                                                  res = FR_NO_PATH;               /* Reached but a file */
   2681                                  }
   2682                          }
   \   2693  FD7D              LD      A,IYL
   \   2695  FE04              CP      4
   \   2697  2003              JR      NZ,?0640
   \   2699            ?0639:
   \   2699  FD2E05            LD      IYL,5
   \   269C            ?0640:
   \   269C            ?0630:
   2683                          if (res == FR_NO_FILE) res = FR_NO_PATH;
   2684                  }
   2685          
   \   269C  FD7D              LD      A,IYL
   2686                  LEAVE_FF(dj.fs, res);
   \   269E  FDE1              POP     IY
   \   26A0  C30000            JP      ?LEAVE_DIRECT_L09
   \   26A3            ?1062:
   \   26A3  EB                EX      DE,HL
   \   26A4            ?1063:
   \   26A4  CD9513            CALL    follow_path
   \   26A7  FD6F              LD      IYL,A
   \   26A9  B7                OR      A
   \   26AA  C9                RET
   2687          }
   2688          
   2689          
   2690          #if _FS_RPATH >= 2
   2727          #if _USE_LFN
   2730          #endif
   2759          #endif /* _FS_RPATH >= 2 */
   2760          #endif /* _FS_RPATH >= 1 */
   2761          
   2762          
   2763          
   2764          #if _FS_MINIMIZE <= 2
   2765          /*-----------------------------------------------------------------------*/
   2766          /* Seek File R/W Pointer                                                 */
   2767          /*-----------------------------------------------------------------------*/
   2768          
   2769          FRESULT f_lseek (
   2770                  FIL *fp,                /* Pointer to the file object */
   2771                  DWORD ofs               /* File pointer from top of file */
   2772          )
   \   26AB            f_lseek:
   \   26AB  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   26AE  EEFF              DEFW    65518
   \   26B0  FDE5              PUSH    IY
   2773          {
   2774                  FRESULT res;
   2775          
   2776          
   \   26B2  CD7C21            CALL    ?1065
   \   26B5  DD77EE            LD      (IX-18),A
   2777                  res = validate(fp->fs, fp->id);         /* Check validity of the object */
   \   26B8  B7                OR      A
   \   26B9  C2B62A            JP      NZ,?0693
   \   26BC            ?0641:
   2778                  if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   26BC            ?0642:
   \   26BC  FD7E04            LD      A,(IY+4)
   \   26BF  B7                OR      A
   \   26C0  FAEC29            JP      M,?1009
   \   26C3            ?0643:
   2779                  if (fp->flag & FA__ERROR)                       /* Check abort flag */
   2780                          LEAVE_FF(fp->fs, FR_INT_ERR);
   2781          
   2782          #if _USE_FASTSEEK
   2821          #if !_FS_TINY
   2822          #if !_FS_READONLY
   2828          #endif
   2831          #endif
   2837          #endif
   2838          
   2839                  /* Normal Seek */
   \   26C3            ?0644:
   2840                  {
   2841                          DWORD clst, bcs, nsect, ifptr;
   2842          
   2843                          if (ofs > fp->fsize                                     /* In read-only mode, clip offset with the file size */
   2844          #if !_FS_READONLY
   2845                                   && !(fp->flag & FA_WRITE)
   2846          #endif
   \   26C3  A7                AND     A
   \   26C4  FD6E0A            LD      L,(IY+10)
   \   26C7  FD660B            LD      H,(IY+11)
   \   26CA  DD4E08            LD      C,(IX+8)
   \   26CD  DD4609            LD      B,(IX+9)
   \   26D0  ED42              SBC     HL,BC
   \   26D2  FD6E0C            LD      L,(IY+12)
   \   26D5  FD660D            LD      H,(IY+13)
   \   26D8  DD4E0A            LD      C,(IX+10)
   \   26DB  DD460B            LD      B,(IX+11)
   \   26DE  ED42              SBC     HL,BC
   \   26E0  301E              JR      NC,?0646
   \   26E2  FDCB044E          BIT     1,(IY+4)
   \   26E6  2018              JR      NZ,?0646
   \   26E8            ?0648:
   \   26E8            ?0647:
   \   26E8            ?0645:
   \   26E8  FD4E0C            LD      C,(IY+12)
   \   26EB  FD460D            LD      B,(IY+13)
   \   26EE  FD6E0A            LD      L,(IY+10)
   \   26F1  DD7508            LD      (IX+8),L
   \   26F4  FD660B            LD      H,(IY+11)
   \   26F7  DD7409            LD      (IX+9),H
   \   26FA  DD710A            LD      (IX+10),C
   \   26FD  DD700B            LD      (IX+11),B
   \   2700            ?0646:
   2847                                  ) ofs = fp->fsize;
   2848          
   \   2700  FD4E08            LD      C,(IY+8)
   \   2703  FD4609            LD      B,(IY+9)
   \   2706  FD6E06            LD      L,(IY+6)
   \   2709  DD75FB            LD      (IX-5),L
   \   270C  FD6607            LD      H,(IY+7)
   \   270F  DD74FC            LD      (IX-4),H
   \   2712  DD71FD            LD      (IX-3),C
   \   2715  DD70FE            LD      (IX-2),B
   2849                          ifptr = fp->fptr;
   \   2718  AF                XOR     A
   \   2719  DD77F7            LD      (IX-9),A
   \   271C  DD77F8            LD      (IX-8),A
   \   271F  DD77F9            LD      (IX-7),A
   \   2722  DD77FA            LD      (IX-6),A
   \   2725  FD7706            LD      (IY+6),A
   \   2728  FD7707            LD      (IY+7),A
   \   272B  FD7708            LD      (IY+8),A
   \   272E  FD7709            LD      (IY+9),A
   2850                          fp->fptr = nsect = 0;
   \   2731  DD7E08            LD      A,(IX+8)
   \   2734  DDB609            OR      (IX+9)
   \   2737  DDB60A            OR      (IX+10)
   \   273A  DDB60B            OR      (IX+11)
   \   273D  CA002A            JP      Z,?0679
   \   2740            ?0649:
   2851                          if (ofs) {
   \   2740  FD6E00            LD      L,(IY+0)
   \   2743  FD6601            LD      H,(IY+1)
   \   2746  23                INC     HL
   \   2747  23                INC     HL
   \   2748  23                INC     HL
   \   2749  6E                LD      L,(HL)
   \   274A  010000            LD      BC,0
   \   274D  61                LD      H,C
   \   274E  3E09              LD      A,9
   \   2750  CD0000            CALL    ?L_LSH_L03
   \   2753  DD75F3            LD      (IX-13),L
   \   2756  DD74F4            LD      (IX-12),H
   \   2759  DD71F5            LD      (IX-11),C
   \   275C  DD70F6            LD      (IX-10),B
   2852                                  bcs = (DWORD)fp->fs->csize * SS(fp->fs);        /* Cluster size (byte) */
   2853                                  if (ifptr > 0 &&
   \   275F  DD7EFB            LD      A,(IX-5)
   \   2762  DDB6FC            OR      (IX-4)
   \   2765  DDB6FD            OR      (IX-3)
   \   2768  DDB6FE            OR      (IX-2)
   \   276B  CA3128            JP      Z,?0652
   \   276E  C5                PUSH    BC
   \   276F  E5                PUSH    HL
   \   2770  21FFFF            LD      HL,65535
   \   2773  E5                PUSH    HL
   \   2774  E5                PUSH    HL
   \   2775  DD6EFB            LD      L,(IX-5)
   \   2778  DD66FC            LD      H,(IX-4)
   \   277B  C1                POP     BC
   \   277C  09                ADD     HL,BC
   \   277D  EB                EX      DE,HL
   \   277E  DD6EFD            LD      L,(IX-3)
   \   2781  DD66FE            LD      H,(IX-2)
   \   2784  C1                POP     BC
   \   2785  CD041B            CALL    ?1059
   \   2788  C5                PUSH    BC
   \   2789  E5                PUSH    HL
   \   278A  DD6EF5            LD      L,(IX-11)
   \   278D  DD66F6            LD      H,(IX-10)
   \   2790  E5                PUSH    HL
   \   2791  DD6EF3            LD      L,(IX-13)
   \   2794  DD66F4            LD      H,(IX-12)
   \   2797  E5                PUSH    HL
   \   2798  21FFFF            LD      HL,65535
   \   279B  E5                PUSH    HL
   \   279C  E5                PUSH    HL
   \   279D  DD6E08            LD      L,(IX+8)
   \   27A0  DD6609            LD      H,(IX+9)
   \   27A3  C1                POP     BC
   \   27A4  09                ADD     HL,BC
   \   27A5  EB                EX      DE,HL
   \   27A6  DD6E0A            LD      L,(IX+10)
   \   27A9  DD660B            LD      H,(IX+11)
   \   27AC  C1                POP     BC
   \   27AD  CD041B            CALL    ?1059
   \   27B0  59                LD      E,C
   \   27B1  50                LD      D,B
   \   27B2  A7                AND     A
   \   27B3  C1                POP     BC
   \   27B4  ED42              SBC     HL,BC
   \   27B6  EB                EX      DE,HL
   \   27B7  C1                POP     BC
   \   27B8  ED42              SBC     HL,BC
   \   27BA  3875              JR      C,?0652
   \   27BC            ?0654:
   \   27BC            ?0653:
   \   27BC            ?0651:
   2854                                          (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
   \   27BC  21FFFF            LD      HL,65535
   \   27BF  E5                PUSH    HL
   \   27C0  E5                PUSH    HL
   \   27C1  DD6EF3            LD      L,(IX-13)
   \   27C4  DD66F4            LD      H,(IX-12)
   \   27C7  C1                POP     BC
   \   27C8  09                ADD     HL,BC
   \   27C9  EB                EX      DE,HL
   \   27CA  DD6EF5            LD      L,(IX-11)
   \   27CD  DD66F6            LD      H,(IX-10)
   \   27D0  C1                POP     BC
   \   27D1  ED4A              ADC     HL,BC
   \   27D3  4D                LD      C,L
   \   27D4  44                LD      B,H
   \   27D5  EB                EX      DE,HL
   \   27D6  CD0000            CALL    ?L_NOT_L03
   \   27D9  C5                PUSH    BC
   \   27DA  E5                PUSH    HL
   \   27DB  21FFFF            LD      HL,65535
   \   27DE  E5                PUSH    HL
   \   27DF  E5                PUSH    HL
   \   27E0  DD6EFB            LD      L,(IX-5)
   \   27E3  DD66FC            LD      H,(IX-4)
   \   27E6  C1                POP     BC
   \   27E7  09                ADD     HL,BC
   \   27E8  EB                EX      DE,HL
   \   27E9  DD6EFD            LD      L,(IX-3)
   \   27EC  DD66FE            LD      H,(IX-2)
   \   27EF  C1                POP     BC
   \   27F0  ED4A              ADC     HL,BC
   \   27F2  4D                LD      C,L
   \   27F3  44                LD      B,H
   \   27F4  EB                EX      DE,HL
   \   27F5  CD0000            CALL    ?L_AND_L03
   \   27F8  FD7506            LD      (IY+6),L
   \   27FB  FD7407            LD      (IY+7),H
   \   27FE  FD7108            LD      (IY+8),C
   \   2801  FD7009            LD      (IY+9),B
   2855                                          fp->fptr = (ifptr - 1) & ~(bcs - 1);    /* start from the current cluster */
   \   2804  211C00            LD      HL,28
   \   2807  39                ADD     HL,SP
   \   2808  FD4E08            LD      C,(IY+8)
   \   280B  FD4609            LD      B,(IY+9)
   \   280E  FD5E06            LD      E,(IY+6)
   \   2811  FD5607            LD      D,(IY+7)
   \   2814  CD0000            CALL    ?L_SUBASG_L03
   2856                                          ofs -= fp->fptr;
   \   2817  FD4E14            LD      C,(IY+20)
   \   281A  FD4615            LD      B,(IY+21)
   \   281D  FD6E12            LD      L,(IY+18)
   \   2820  DD75EF            LD      (IX-17),L
   \   2823  FD6613            LD      H,(IY+19)
   \   2826  DD74F0            LD      (IX-16),H
   \   2829  DD71F1            LD      (IX-15),C
   \   282C  DD70F2            LD      (IX-14),B
   2857                                          clst = fp->clust;
   \   282F  185C              JR      ?0655
   \   2831            ?0652:
   2858                                  } else {                                                                        /* When seek to back cluster, */
   \   2831  FD4E10            LD      C,(IY+16)
   \   2834  FD4611            LD      B,(IY+17)
   \   2837  FD6E0E            LD      L,(IY+14)
   \   283A  DD75EF            LD      (IX-17),L
   \   283D  FD660F            LD      H,(IY+15)
   \   2840  DD74F0            LD      (IX-16),H
   \   2843  DD71F1            LD      (IX-15),C
   \   2846  DD70F2            LD      (IX-14),B
   2859                                          clst = fp->sclust;                                              /* start from the first cluster */
   2860          #if !_FS_READONLY
   \   2849  7D                LD      A,L
   \   284A  B4                OR      H
   \   284B  B1                OR      C
   \   284C  B0                OR      B
   \   284D  2032              JR      NZ,?0657
   \   284F            ?0656:
   2861                                          if (clst == 0) {                                                /* If no cluster chain, create a new chain */
   \   284F  6F                LD      L,A
   \   2850  67                LD      H,A
   \   2851  E5                PUSH    HL
   \   2852  E5                PUSH    HL
   \   2853  CD9F0E            CALL    ?1053
   \   2856  F1                POP     AF
   \   2857  F1                POP     AF
   \   2858  DD75EF            LD      (IX-17),L
   \   285B  DD74F0            LD      (IX-16),H
   \   285E  DD71F1            LD      (IX-15),C
   \   2861  DD70F2            LD      (IX-14),B
   2862                                                  clst = create_chain(fp->fs, 0);
   \   2864  3E01              LD      A,1
   \   2866  AD                XOR     L
   \   2867  B4                OR      H
   \   2868  B1                OR      C
   \   2869  B0                OR      B
   \   286A  CAE829            JP      Z,?1011
   \   286D            ?0658:
   \   286D            ?0659:
   2863                                                  if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   \   286D  7D                LD      A,L
   \   286E  A4                AND     H
   \   286F  A1                AND     C
   \   2870  A0                AND     B
   \   2871  3C                INC     A
   \   2872  CA5B2A            JP      Z,?1010
   \   2875            ?0660:
   \   2875            ?0661:
   2864                                                  if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \   2875  FD750E            LD      (IY+14),L
   \   2878  FD740F            LD      (IY+15),H
   \   287B  FD7110            LD      (IY+16),C
   \   287E  FD7011            LD      (IY+17),B
   \   2881            ?0657:
   2865                                                  fp->sclust = clst;
   2866                                          }
   2867          #endif
   \   2881  FD7512            LD      (IY+18),L
   \   2884  FD7413            LD      (IY+19),H
   \   2887  FD7114            LD      (IY+20),C
   \   288A  FD7015            LD      (IY+21),B
   \   288D            ?0655:
   2868                                          fp->clust = clst;
   2869                                  }
   \   288D  7D                LD      A,L
   \   288E  B4                OR      H
   \   288F  B1                OR      C
   \   2890  B0                OR      B
   \   2891  CA002A            JP      Z,?0679
   \   2894            ?0662:
   \   2894            ?0665:
   2870                                  if (clst != 0) {
   \   2894  A7                AND     A
   \   2895  DD6EF3            LD      L,(IX-13)
   \   2898  DD66F4            LD      H,(IX-12)
   \   289B  DD4E08            LD      C,(IX+8)
   \   289E  DD4609            LD      B,(IX+9)
   \   28A1  ED42              SBC     HL,BC
   \   28A3  DD6EF5            LD      L,(IX-11)
   \   28A6  DD66F6            LD      H,(IX-10)
   \   28A9  DD4E0A            LD      C,(IX+10)
   \   28AC  DD460B            LD      B,(IX+11)
   \   28AF  ED42              SBC     HL,BC
   \   28B1  D2A029            JP      NC,?0664
   \   28B4            ?0666:
   2871                                          while (ofs > bcs) {                                             /* Cluster following loop */
   2872          #if !_FS_READONLY
   \   28B4  FDCB044E          BIT     1,(IY+4)
   \   28B8  DD6EF1            LD      L,(IX-15)
   \   28BB  DD66F2            LD      H,(IX-14)
   \   28BE  E5                PUSH    HL
   \   28BF  DD6EEF            LD      L,(IX-17)
   \   28C2  DD66F0            LD      H,(IX-16)
   \   28C5  E5                PUSH    HL
   \   28C6  FD5E00            LD      E,(IY+0)
   \   28C9  FD5601            LD      D,(IY+1)
   \   28CC  2832              JR      Z,?0668
   \   28CE            ?0667:
   2873                                                  if (fp->flag & FA_WRITE) {                      /* Check if in write mode or not */
   \   28CE  CDB007            CALL    create_chain
   \   28D1  F1                POP     AF
   \   28D2  F1                POP     AF
   \   28D3  DD75EF            LD      (IX-17),L
   \   28D6  DD74F0            LD      (IX-16),H
   \   28D9  DD71F1            LD      (IX-15),C
   \   28DC  DD70F2            LD      (IX-14),B
   2874                                                          clst = create_chain(fp->fs, clst);      /* Force stretch if in write mode */
   \   28DF  7D                LD      A,L
   \   28E0  B4                OR      H
   \   28E1  B1                OR      C
   \   28E2  B0                OR      B
   \   28E3  202C              JR      NZ,?0671
   \   28E5            ?0669:
   2875                                                          if (clst == 0) {                                /* When disk gets full, clip file size */
   \   28E5  DD4EF5            LD      C,(IX-11)
   \   28E8  DD46F6            LD      B,(IX-10)
   \   28EB  DD6EF3            LD      L,(IX-13)
   \   28EE  DD66F4            LD      H,(IX-12)
   \   28F1  DD7508            LD      (IX+8),L
   \   28F4  DD7409            LD      (IX+9),H
   \   28F7  DD710A            LD      (IX+10),C
   \   28FA  DD700B            LD      (IX+11),B
   \   28FD  C3A029            JP      ?0664
   \   2900            ?0670:
   2876                                                                  ofs = bcs; break;
   2877                                                          }
   \   2900            ?0668:
   2878                                                  } else
   2879          #endif
   \   2900  CDB602            CALL    get_fat
   \   2903  F1                POP     AF
   \   2904  F1                POP     AF
   \   2905  DD75EF            LD      (IX-17),L
   \   2908  DD74F0            LD      (IX-16),H
   \   290B  DD71F1            LD      (IX-15),C
   \   290E  DD70F2            LD      (IX-14),B
   \   2911            ?0671:
   2880                                                          clst = get_fat(fp->fs, clst);   /* Follow cluster chain if not in write mode */
   \   2911  7D                LD      A,L
   \   2912  A4                AND     H
   \   2913  A1                AND     C
   \   2914  A0                AND     B
   \   2915  3C                INC     A
   \   2916  CA5B2A            JP      Z,?1010
   \   2919            ?0672:
   \   2919            ?0673:
   2881                                                  if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \   2919  210100            LD      HL,1
   \   291C  DD4EEF            LD      C,(IX-17)
   \   291F  DD46F0            LD      B,(IX-16)
   \   2922  ED42              SBC     HL,BC
   \   2924  210000            LD      HL,0
   \   2927  DD4EF1            LD      C,(IX-15)
   \   292A  DD46F2            LD      B,(IX-14)
   \   292D  ED42              SBC     HL,BC
   \   292F  3028              JR      NC,?0676
   \   2931  FD6E00            LD      L,(IY+0)
   \   2934  FD6601            LD      H,(IY+1)
   \   2937  011B00            LD      BC,27
   \   293A  09                ADD     HL,BC
   \   293B  4E                LD      C,(HL)
   \   293C  23                INC     HL
   \   293D  46                LD      B,(HL)
   \   293E  23                INC     HL
   \   293F  5E                LD      E,(HL)
   \   2940  23                INC     HL
   \   2941  56                LD      D,(HL)
   \   2942  D5                PUSH    DE
   \   2943  C5                PUSH    BC
   \   2944  A7                AND     A
   \   2945  DD6EEF            LD      L,(IX-17)
   \   2948  DD66F0            LD      H,(IX-16)
   \   294B  C1                POP     BC
   \   294C  ED42              SBC     HL,BC
   \   294E  DD6EF1            LD      L,(IX-15)
   \   2951  DD66F2            LD      H,(IX-14)
   \   2954  C1                POP     BC
   \   2955  ED42              SBC     HL,BC
   \   2957  3803              JR      C,?0675
   \   2959            ?0676:
   \   2959            ?0677:
   \   2959            ?0674:
   \   2959  C3E829            JP      ?1011
   \   295C            ?0675:
   2882                                                  if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   \   295C  DD4EF1            LD      C,(IX-15)
   \   295F  DD46F2            LD      B,(IX-14)
   \   2962  DD6EEF            LD      L,(IX-17)
   \   2965  FD7512            LD      (IY+18),L
   \   2968  DD66F0            LD      H,(IX-16)
   \   296B  FD7413            LD      (IY+19),H
   \   296E  FD7114            LD      (IY+20),C
   \   2971  FD7015            LD      (IY+21),B
   2883                                                  fp->clust = clst;
   \   2974  210600            LD      HL,6
   \   2977  FDE5              PUSH    IY
   \   2979  C1                POP     BC
   \   297A  09                ADD     HL,BC
   \   297B  DD4EF5            LD      C,(IX-11)
   \   297E  DD46F6            LD      B,(IX-10)
   \   2981  DD5EF3            LD      E,(IX-13)
   \   2984  DD56F4            LD      D,(IX-12)
   \   2987  CD0000            CALL    ?L_ADDASG_L03
   2884                                                  fp->fptr += bcs;
   \   298A  211C00            LD      HL,28
   \   298D  39                ADD     HL,SP
   \   298E  DD4EF5            LD      C,(IX-11)
   \   2991  DD46F6            LD      B,(IX-10)
   \   2994  DD5EF3            LD      E,(IX-13)
   \   2997  DD56F4            LD      D,(IX-12)
   \   299A  CD0000            CALL    ?L_SUBASG_L03
   2885                                                  ofs -= bcs;
   2886                                          }
   \   299D  C39428            JP      ?0662
   \   29A0            ?0664:
   \   29A0  210600            LD      HL,6
   \   29A3  FDE5              PUSH    IY
   \   29A5  C1                POP     BC
   \   29A6  09                ADD     HL,BC
   \   29A7  DD4E0A            LD      C,(IX+10)
   \   29AA  DD460B            LD      B,(IX+11)
   \   29AD  DD5E08            LD      E,(IX+8)
   \   29B0  DD5609            LD      D,(IX+9)
   \   29B3  CD0000            CALL    ?L_ADDASG_L03
   2887                                          fp->fptr += ofs;
   \   29B6  DD6E08            LD      L,(IX+8)
   \   29B9  DD7E09            LD      A,(IX+9)
   \   29BC  E601              AND     1
   \   29BE  67                LD      H,A
   \   29BF  7D                LD      A,L
   \   29C0  B4                OR      H
   \   29C1  283D              JR      Z,?0679
   \   29C3            ?0678:
   2888                                          if (ofs % SS(fp->fs)) {
   \   29C3  DD6EF1            LD      L,(IX-15)
   \   29C6  DD66F2            LD      H,(IX-14)
   \   29C9  E5                PUSH    HL
   \   29CA  DD6EEF            LD      L,(IX-17)
   \   29CD  DD66F0            LD      H,(IX-16)
   \   29D0  E5                PUSH    HL
   \   29D1  CD410C            CALL    ?1052
   \   29D4  F1                POP     AF
   \   29D5  F1                POP     AF
   \   29D6  DD75F7            LD      (IX-9),L
   \   29D9  DD74F8            LD      (IX-8),H
   \   29DC  DD71F9            LD      (IX-7),C
   \   29DF  DD70FA            LD      (IX-6),B
   2889                                                  nsect = clust2sect(fp->fs, clst);       /* Current sector */
   \   29E2  7D                LD      A,L
   \   29E3  B4                OR      H
   \   29E4  B1                OR      C
   \   29E5  B0                OR      B
   \   29E6  2009              JR      NZ,?0681
   \   29E8            ?0680:
   \   29E8            ?1011:
   \   29E8  FDCB04FE          SET     7,(IY+4)
   \   29EC            ?1009:
   \   29EC  3E02              LD      A,2
   \   29EE  C3B92A            JP      ?0694
   \   29F1            ?0681:
   2890                                                  if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   \   29F1  210B00            LD      HL,11
   \   29F4  39                ADD     HL,SP
   \   29F5  E5                PUSH    HL
   \   29F6  3E09              LD      A,9
   \   29F8  CD7604            CALL    ?1048
   \   29FB  EB                EX      DE,HL
   \   29FC  E1                POP     HL
   \   29FD  CD0000            CALL    ?L_ADDASG_L03
   \   2A00            ?0679:
   \   2A00            ?0663:
   \   2A00            ?0650:
   2891                                                  nsect += ofs / SS(fp->fs);
   2892                                          }
   2893                                  }
   2894                          }
   \   2A00  FD6E06            LD      L,(IY+6)
   \   2A03  FD7E07            LD      A,(IY+7)
   \   2A06  E601              AND     1
   \   2A08  67                LD      H,A
   \   2A09  7D                LD      A,L
   \   2A0A  B4                OR      H
   \   2A0B  286E              JR      Z,?0683
   \   2A0D  FD6E16            LD      L,(IY+22)
   \   2A10  FD6617            LD      H,(IY+23)
   \   2A13  DD4EF7            LD      C,(IX-9)
   \   2A16  DD46F8            LD      B,(IX-8)
   \   2A19  ED42              SBC     HL,BC
   \   2A1B  2010              JR      NZ,?1003
   \   2A1D  FD6E18            LD      L,(IY+24)
   \   2A20  FD6619            LD      H,(IY+25)
   \   2A23  DD4EF9            LD      C,(IX-7)
   \   2A26  DD46FA            LD      B,(IX-6)
   \   2A29  ED42              SBC     HL,BC
   \   2A2B  284E              JR      Z,?0683
   \   2A2D            ?1003:
   \   2A2D            ?0685:
   \   2A2D            ?0684:
   \   2A2D            ?0682:
   2895                          if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {      /* Fill sector cache if needed */
   2896          #if !_FS_TINY
   2897          #if !_FS_READONLY
   \   2A2D  FDCB0476          BIT     6,(IY+4)
   \   2A31  280A              JR      Z,?0687
   \   2A33            ?0686:
   2898                                  if (fp->flag & FA__DIRTY) {                     /* Write-back dirty sector cache */
   2899                                          SET_DIO_PAR(fp->fs->drv, fp->buf, fp->dsect, 1);
   \   2A33  CD2201            CALL    ?1038
   \   2A36  B7                OR      A
   \   2A37  2022              JR      NZ,?1010
   \   2A39            ?0688:
   2900                                          if (disk_write() != RES_OK)
   \   2A39            ?0689:
   2901                                                  ABORT(fp->fs, FR_DISK_ERR);
   \   2A39  FDCB04B6          RES     6,(IY+4)
   \   2A3D            ?0687:
   2902                                          fp->flag &= ~FA__DIRTY;
   2903                                  }
   2904          #endif
   \   2A3D  FD6E00            LD      L,(IY+0)
   \   2A40  FD6601            LD      H,(IY+1)
   \   2A43  23                INC     HL
   \   2A44  7E                LD      A,(HL)
   \   2A45  320000            LD      (dio_par),A
   \   2A48  212000            LD      HL,32
   \   2A4B  FDE5              PUSH    IY
   \   2A4D  C1                POP     BC
   \   2A4E  09                ADD     HL,BC
   \   2A4F  220100            LD      (dio_par+1),HL
   \   2A52  210B00            LD      HL,11
   \   2A55  39                ADD     HL,SP
   2905                                  SET_DIO_PAR(fp->fs->drv, fp->buf, nsect, 1);
   \   2A56  CD4601            CALL    ?1041
   \   2A59  2808              JR      Z,?0691
   \   2A5B            ?0690:
   2906                                  if (disk_read() != RES_OK)      /* Fill sector cache */
   \   2A5B            ?1010:
   \   2A5B  FDCB04FE          SET     7,(IY+4)
   \   2A5F  3E01              LD      A,1
   \   2A61  1856              JR      ?0694
   \   2A63            ?0691:
   2907                                          ABORT(fp->fs, FR_DISK_ERR);
   2908          #endif
   \   2A63  DD4EF9            LD      C,(IX-7)
   \   2A66  DD46FA            LD      B,(IX-6)
   \   2A69  DD6EF7            LD      L,(IX-9)
   \   2A6C  FD7516            LD      (IY+22),L
   \   2A6F  DD66F8            LD      H,(IX-8)
   \   2A72  FD7417            LD      (IY+23),H
   \   2A75  FD7118            LD      (IY+24),C
   \   2A78  FD7019            LD      (IY+25),B
   \   2A7B            ?0683:
   2909                                  fp->dsect = nsect;
   2910                          }
   2911          #if !_FS_READONLY
   \   2A7B  A7                AND     A
   \   2A7C  FD6E0A            LD      L,(IY+10)
   \   2A7F  FD660B            LD      H,(IY+11)
   \   2A82  FD4E06            LD      C,(IY+6)
   \   2A85  FD4607            LD      B,(IY+7)
   \   2A88  ED42              SBC     HL,BC
   \   2A8A  FD6E0C            LD      L,(IY+12)
   \   2A8D  FD660D            LD      H,(IY+13)
   \   2A90  FD4E08            LD      C,(IY+8)
   \   2A93  FD4609            LD      B,(IY+9)
   \   2A96  ED42              SBC     HL,BC
   \   2A98  301C              JR      NC,?0693
   \   2A9A            ?0692:
   2912                          if (fp->fptr > fp->fsize) {                     /* Set file change flag if the file size is extended */
   \   2A9A  FD4E08            LD      C,(IY+8)
   \   2A9D  FD4609            LD      B,(IY+9)
   \   2AA0  FD6E06            LD      L,(IY+6)
   \   2AA3  FD6607            LD      H,(IY+7)
   \   2AA6  FD750A            LD      (IY+10),L
   \   2AA9  FD740B            LD      (IY+11),H
   \   2AAC  FD710C            LD      (IY+12),C
   \   2AAF  FD700D            LD      (IY+13),B
   2913                                  fp->fsize = fp->fptr;
   \   2AB2  FDCB04EE          SET     5,(IY+4)
   \   2AB6            ?0693:
   2914                                  fp->flag |= FA__WRITTEN;
   2915                          }
   2916          #endif
   2917                  }
   2918          
   \   2AB6  DD7EEE            LD      A,(IX-18)
   2919                  LEAVE_FF(fp->fs, res);
   \   2AB9            ?0694:
   \   2AB9  FDE1              POP     IY
   \   2ABB  C30000            JP      ?LEAVE_DIRECT_L09
   2920          }
   2921          
   2922          
   2923          
   2924          #if _FS_MINIMIZE <= 1
   2925          /*-----------------------------------------------------------------------*/
   2926          /* Create a Directroy Object                                             */
   2927          /*-----------------------------------------------------------------------*/
   2928          
   2929          FRESULT f_opendir (
   2930                  DIR *dj,                        /* Pointer to directory object to create */
   2931                  const TCHAR *path       /* Pointer to the directory path */
   2932          )
   \   2ABE            f_opendir:
   \   2ABE  FDE5              PUSH    IY
   \   2AC0  DDE5              PUSH    IX
   \   2AC2  C5                PUSH    BC
   \   2AC3  21F4FF            LD      HL,65524
   \   2AC6  39                ADD     HL,SP
   \   2AC7  F9                LD      SP,HL
   \   2AC8  D5                PUSH    DE
   \   2AC9  DDE1              POP     IX
   2933          {
   2934                  FRESULT res;
   2935                  DEF_NAMEBUF;
   2936          
   2937          
   \   2ACB  2E00              LD      L,0
   \   2ACD  E5                PUSH    HL
   \   2ACE  4B                LD      C,E
   \   2ACF  42                LD      B,D
   \   2AD0  210E00            LD      HL,14
   \   2AD3  39                ADD     HL,SP
   \   2AD4  CD221E            CALL    ?1060
   \   2AD7  E1                POP     HL
   \   2AD8  FD6F              LD      IYL,A
   2938                  res = chk_mounted(&path, &dj->fs, 0);
   \   2ADA  B7                OR      A
   \   2ADB  2074              JR      NZ,?0707
   \   2ADD            ?0695:
   2939                  if (res == FR_OK) {
   \   2ADD  6F                LD      L,A
   \   2ADE  67                LD      H,A
   \   2ADF  39                ADD     HL,SP
   \   2AE0  DD7514            LD      (IX+20),L
   \   2AE3  DD7415            LD      (IX+21),H
   2940                          INIT_BUF(*dj);
   \   2AE6  210C00            LD      HL,12
   \   2AE9  39                ADD     HL,SP
   \   2AEA  4E                LD      C,(HL)
   \   2AEB  23                INC     HL
   \   2AEC  46                LD      B,(HL)
   \   2AED  DDE5              PUSH    IX
   \   2AEF  D1                POP     DE
   \   2AF0  CDA426            CALL    ?1063
   2941                          res = follow_path(dj, path);                    /* Follow the path to the directory */
   2942                          FREE_BUF();
   \   2AF3  2053              JR      NZ,?0705
   \   2AF5            ?0697:
   2943                          if (res == FR_OK) {                                             /* Follow completed */
   \   2AF5  DD7E12            LD      A,(IX+18)
   \   2AF8  DDB613            OR      (IX+19)
   \   2AFB  2828              JR      Z,?0703
   \   2AFD            ?0699:
   2944                                  if (dj->dir) {                                          /* It is not the root dir */
   \   2AFD  DD6E12            LD      L,(IX+18)
   \   2B00  DD6613            LD      H,(IX+19)
   \   2B03  010B00            LD      BC,11
   \   2B06  09                ADD     HL,BC
   \   2B07  CB66              BIT     4,(HL)
   \   2B09  2817              JR      Z,?0702
   \   2B0B            ?0701:
   2945                                          if (dj->dir[DIR_Attr] & AM_DIR) {       /* The object is a directory */
   \   2B0B  DD5E12            LD      E,(IX+18)
   \   2B0E  DD5613            LD      D,(IX+19)
   \   2B11  CD0000            CALL    LD_CLUST
   \   2B14  DD7506            LD      (IX+6),L
   \   2B17  DD7407            LD      (IX+7),H
   \   2B1A  DD7108            LD      (IX+8),C
   \   2B1D  DD7009            LD      (IX+9),B
   2946                                                  dj->sclust = LD_CLUST(dj->dir);
   \   2B20  1803              JR      ?0703
   \   2B22            ?0702:
   2947                                          } else {                                                /* The object is not a directory */
   \   2B22  FD2E05            LD      IYL,5
   \   2B25            ?0703:
   \   2B25            ?0700:
   2948                                                  res = FR_NO_PATH;
   2949                                          }
   2950                                  }
   \   2B25  FD45              LD      B,IYL
   \   2B27  04                INC     B
   \   2B28  05                DEC     B
   \   2B29  201D              JR      NZ,?0705
   \   2B2B            ?0704:
   2951                                  if (res == FR_OK) {
   \   2B2B  DD6E00            LD      L,(IX+0)
   \   2B2E  DD6601            LD      H,(IX+1)
   \   2B31  0E07              LD      C,7
   \   2B33  09                ADD     HL,BC
   \   2B34  46                LD      B,(HL)
   \   2B35  DD7002            LD      (IX+2),B
   \   2B38  23                INC     HL
   \   2B39  66                LD      H,(HL)
   \   2B3A  DD7403            LD      (IX+3),H
   2952                                          dj->id = dj->fs->id;
   \   2B3D  010000            LD      BC,0
   \   2B40  DDE5              PUSH    IX
   \   2B42  D1                POP     DE
   \   2B43  CD3F0A            CALL    dir_sdi
   \   2B46  FD6F              LD      IYL,A
   \   2B48            ?0705:
   \   2B48            ?0698:
   2953                                          res = dir_sdi(dj, 0);                   /* Rewind dir */
   2954                                  }
   2955                          }
   \   2B48  FD7D              LD      A,IYL
   \   2B4A  FE04              CP      4
   \   2B4C  2003              JR      NZ,?0707
   \   2B4E            ?0706:
   \   2B4E  FD2E05            LD      IYL,5
   \   2B51            ?0707:
   \   2B51            ?0696:
   2956                          if (res == FR_NO_FILE) res = FR_NO_PATH;
   2957                  }
   2958          
   \   2B51  FD7D              LD      A,IYL
   2959                  LEAVE_FF(dj->fs, res);
   \   2B53  210E00            LD      HL,14
   \   2B56  39                ADD     HL,SP
   \   2B57  F9                LD      SP,HL
   \   2B58  DDE1              POP     IX
   \   2B5A  FDE1              POP     IY
   \   2B5C  C9                RET
   2960          }
   2961          
   2962          
   2963          
   2964          
   2965          /*-----------------------------------------------------------------------*/
   2966          /* Read Directory Entry in Sequense                                      */
   2967          /*-----------------------------------------------------------------------*/
   2968          
   2969          FRESULT f_readdir (
   2970                  DIR *dj,                        /* Pointer to the open directory object */
   2971                  FILINFO *fno            /* Pointer to file information to return */
   2972          )
   \   2B5D            f_readdir:
   \   2B5D  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2B60  F2FF              DEFW    65522
   \   2B62  FDE5              PUSH    IY
   2973          {
   2974                  FRESULT res;
   2975                  DEF_NAMEBUF;
   2976          
   2977          
   \   2B64  CD7C21            CALL    ?1065
   2978                  res = validate(dj->fs, dj->id);                 /* Check validity of the object */
   \   2B67  B7                OR      A
   \   2B68  2065              JR      NZ,?1013
   \   2B6A            ?0708:
   2979                  if (res == FR_OK) {
   \   2B6A  DD7E04            LD      A,(IX+4)
   \   2B6D  DDB605            OR      (IX+5)
   \   2B70  200A              JR      NZ,?0711
   \   2B72            ?0710:
   2980                          if (!fno) {
   \   2B72  4F                LD      C,A
   \   2B73  47                LD      B,A
   \   2B74  FDE5              PUSH    IY
   \   2B76  D1                POP     DE
   \   2B77  CD3F0A            CALL    dir_sdi
   \   2B7A  1853              JR      ?1013
   2981                                  res = dir_sdi(dj, 0);                   /* Rewind the directory object */
   \   2B7C            ?0711:
   2982                          } else {
   \   2B7C  210400            LD      HL,4
   \   2B7F  39                ADD     HL,SP
   \   2B80  FD7514            LD      (IY+20),L
   \   2B83  FD7415            LD      (IY+21),H
   2983                                  INIT_BUF(*dj);
   \   2B86  FDE5              PUSH    IY
   \   2B88  D1                POP     DE
   \   2B89  CD350F            CALL    dir_read
   \   2B8C  DD77F2            LD      (IX-14),A
   2984                                  res = dir_read(dj);                             /* Read an directory item */
   \   2B8F  FE04              CP      4
   \   2B91  2010              JR      NZ,?0714
   \   2B93            ?0713:
   2985                                  if (res == FR_NO_FILE) {                /* Reached end of dir */
   \   2B93  AF                XOR     A
   \   2B94  FD770E            LD      (IY+14),A
   \   2B97  FD770F            LD      (IY+15),A
   \   2B9A  FD7710            LD      (IY+16),A
   \   2B9D  FD7711            LD      (IY+17),A
   2986                                          dj->sect = 0;
   \   2BA0  DD77F2            LD      (IX-14),A
   \   2BA3            ?0714:
   2987                                          res = FR_OK;
   2988                                  }
   \   2BA3  AF                XOR     A
   \   2BA4  DDB6F2            OR      (IX-14)
   \   2BA7  2026              JR      NZ,?1013
   \   2BA9            ?0715:
   2989                                  if (res == FR_OK) {                             /* A valid entry is found */
   \   2BA9  DD4E04            LD      C,(IX+4)
   \   2BAC  DD4605            LD      B,(IX+5)
   \   2BAF  FDE5              PUSH    IY
   \   2BB1  D1                POP     DE
   \   2BB2  CD5912            CALL    get_fileinfo
   2990                                          get_fileinfo(dj, fno);          /* Get the object information */
   \   2BB5  010000            LD      BC,0
   \   2BB8  FDE5              PUSH    IY
   \   2BBA  D1                POP     DE
   \   2BBB  CD4A0C            CALL    dir_next
   2991                                          res = dir_next(dj, 0);          /* Increment index for next */
   \   2BBE  FE04              CP      4
   \   2BC0  200D              JR      NZ,?1013
   \   2BC2            ?0717:
   2992                                          if (res == FR_NO_FILE) {
   \   2BC2  AF                XOR     A
   \   2BC3  FD770E            LD      (IY+14),A
   \   2BC6  FD770F            LD      (IY+15),A
   \   2BC9  FD7710            LD      (IY+16),A
   \   2BCC  FD7711            LD      (IY+17),A
   2993                                                  dj->sect = 0;
   \   2BCF            ?1013:
   \   2BCF            ?0718:
   \   2BCF            ?0716:
   \   2BCF            ?0712:
   \   2BCF            ?0709:
   2994                                                  res = FR_OK;
   2995                                          }
   2996                                  }
   2997                                  FREE_BUF();
   2998                          }
   2999                  }
   3000          
   3001                  LEAVE_FF(dj->fs, res);
   \   2BCF  FDE1              POP     IY
   \   2BD1  C30000            JP      ?LEAVE_DIRECT_L09
   3002          }
   3003          
   3004          
   3005          
   3006          #if _FS_MINIMIZE == 0
   3007          /*-----------------------------------------------------------------------*/
   3008          /* Get File Status                                                       */
   3009          /*-----------------------------------------------------------------------*/
   3010          
   3011          FRESULT f_stat (
   3012                  const TCHAR *path,      /* Pointer to the file path */
   3013                  FILINFO *fno            /* Pointer to file information to return */
   3014          )
   \   2BD4            f_stat:
   \   2BD4  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2BD7  DEFF              DEFW    -34
   \   2BD9  FDE5              PUSH    IY
   3015          {
   3016                  FRESULT res;
   3017                  DIR dj;
   3018                  DEF_NAMEBUF;
   3019          
   3020          
   \   2BDB  1E00              LD      E,0
   \   2BDD  D5                PUSH    DE
   \   2BDE  210400            LD      HL,4
   \   2BE1  39                ADD     HL,SP
   \   2BE2  4D                LD      C,L
   \   2BE3  44                LD      B,H
   \   2BE4  212800            LD      HL,40
   \   2BE7  39                ADD     HL,SP
   \   2BE8  CD221E            CALL    ?1060
   \   2BEB  E1                POP     HL
   \   2BEC  FD6F              LD      IYL,A
   3021                  res = chk_mounted(&path, &dj.fs, 0);
   \   2BEE  B7                OR      A
   \   2BEF  2035              JR      NZ,?0725
   \   2BF1            ?0719:
   3022                  if (res == FR_OK) {
   \   2BF1  211800            LD      HL,24
   \   2BF4  39                ADD     HL,SP
   \   2BF5  DD75F2            LD      (IX-14),L
   \   2BF8  DD74F3            LD      (IX-13),H
   3023                          INIT_BUF(dj);
   \   2BFB  DD4E02            LD      C,(IX+2)
   \   2BFE  DD4603            LD      B,(IX+3)
   \   2C01  210200            LD      HL,2
   \   2C04  39                ADD     HL,SP
   \   2C05  CDA326            CALL    ?1062
   3024                          res = follow_path(&dj, path);   /* Follow the file path */
   \   2C08  201C              JR      NZ,?0725
   \   2C0A            ?0721:
   3025                          if (res == FR_OK) {                             /* Follow completed */
   \   2C0A  DD7EF0            LD      A,(IX-16)
   \   2C0D  DD66F1            LD      H,(IX-15)
   \   2C10  B4                OR      H
   \   2C11  2810              JR      Z,?0724
   \   2C13            ?0723:
   3026                                  if (dj.dir)             /* Found an object */
   \   2C13  DD4E04            LD      C,(IX+4)
   \   2C16  DD4605            LD      B,(IX+5)
   \   2C19  210200            LD      HL,2
   \   2C1C  39                ADD     HL,SP
   \   2C1D  EB                EX      DE,HL
   \   2C1E  CD5912            CALL    get_fileinfo
   3027                                          get_fileinfo(&dj, fno);
   \   2C21  1803              JR      ?0725
   \   2C23            ?0724:
   3028                                  else                    /* It is root dir */
   \   2C23  FD2E06            LD      IYL,6
   \   2C26            ?0725:
   \   2C26            ?0722:
   \   2C26            ?0720:
   3029                                          res = FR_INVALID_NAME;
   3030                          }
   3031                          FREE_BUF();
   3032                  }
   3033          
   \   2C26  FD7D              LD      A,IYL
   3034                  LEAVE_FF(dj.fs, res);
   \   2C28  FDE1              POP     IY
   \   2C2A  C30000            JP      ?LEAVE_DIRECT_L09
   3035          }
   3036          
   3037          
   3038          
   3039          #if !_FS_READONLY
   3040          /*-----------------------------------------------------------------------*/
   3041          /* Get Number of Free Clusters                                           */
   3042          /*-----------------------------------------------------------------------*/
   3043          
   3044          FRESULT f_getfree (
   3045                  const TCHAR *path,      /* Pointer to the logical drive number (root dir) */
   3046                  DWORD *nclst,           /* Pointer to the variable to return number of free clusters */
   3047                  FATFS **fatfs           /* Pointer to pointer to corresponding file system object to return */
   3048          )
   \   2C2D            f_getfree:
   \   2C2D  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2C30  ECFF              DEFW    -20
   \   2C32  FDE5              PUSH    IY
   \   2C34  D9                EXX
   \   2C35  D5                PUSH    DE
   \   2C36  D9                EXX
   \   2C37  DD6E08            LD      L,(IX+8)
   \   2C3A  DD6609            LD      H,(IX+9)
   \   2C3D  E5                PUSH    HL
   \   2C3E  FDE1              POP     IY
   3049          {
   3050                  FRESULT res;
   3051                  DWORD n, clst, sect, stat;
   3052                  UINT i;
   3053                  BYTE fat, *p;
   3054          
   3055          
   3056                  /* Get drive number */
   \   2C40  1E00              LD      E,0
   \   2C42  D5                PUSH    DE
   \   2C43  FDE5              PUSH    IY
   \   2C45  C1                POP     BC
   \   2C46  211C00            LD      HL,28
   \   2C49  39                ADD     HL,SP
   \   2C4A  CD221E            CALL    ?1060
   \   2C4D  E1                POP     HL
   \   2C4E  DD77FE            LD      (IX-2),A
   3057                  res = chk_mounted(&path, fatfs, 0);
   \   2C51  B7                OR      A
   \   2C52  C26B2E            JP      NZ,?0730
   \   2C55            ?0726:
   3058                  if (res == FR_OK) {
   3059                          /* If free_clust is valid, return it without full cluster scan */
   \   2C55  FD6E00            LD      L,(IY+0)
   \   2C58  FD6601            LD      H,(IY+1)
   \   2C5B  010F00            LD      BC,15
   \   2C5E  09                ADD     HL,BC
   \   2C5F  4E                LD      C,(HL)
   \   2C60  23                INC     HL
   \   2C61  46                LD      B,(HL)
   \   2C62  23                INC     HL
   \   2C63  5E                LD      E,(HL)
   \   2C64  23                INC     HL
   \   2C65  56                LD      D,(HL)
   \   2C66  D5                PUSH    DE
   \   2C67  C5                PUSH    BC
   \   2C68  FD6E00            LD      L,(IY+0)
   \   2C6B  FD6601            LD      H,(IY+1)
   \   2C6E  011B00            LD      BC,27
   \   2C71  09                ADD     HL,BC
   \   2C72  4E                LD      C,(HL)
   \   2C73  23                INC     HL
   \   2C74  46                LD      B,(HL)
   \   2C75  23                INC     HL
   \   2C76  5E                LD      E,(HL)
   \   2C77  23                INC     HL
   \   2C78  56                LD      D,(HL)
   \   2C79  D5                PUSH    DE
   \   2C7A  C5                PUSH    BC
   \   2C7B  21FEFF            LD      HL,65534
   \   2C7E  C1                POP     BC
   \   2C7F  09                ADD     HL,BC
   \   2C80  EB                EX      DE,HL
   \   2C81  21FFFF            LD      HL,65535
   \   2C84  C1                POP     BC
   \   2C85  ED4A              ADC     HL,BC
   \   2C87  EB                EX      DE,HL
   \   2C88  A7                AND     A
   \   2C89  C1                POP     BC
   \   2C8A  ED42              SBC     HL,BC
   \   2C8C  EB                EX      DE,HL
   \   2C8D  C1                POP     BC
   \   2C8E  ED42              SBC     HL,BC
   \   2C90  FD6E00            LD      L,(IY+0)
   \   2C93  FD6601            LD      H,(IY+1)
   \   2C96  380E              JR      C,?0729
   \   2C98            ?0728:
   3060                          if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
   \   2C98  010F00            LD      BC,15
   \   2C9B  09                ADD     HL,BC
   \   2C9C  5E                LD      E,(HL)
   \   2C9D  23                INC     HL
   \   2C9E  56                LD      D,(HL)
   \   2C9F  23                INC     HL
   \   2CA0  4E                LD      C,(HL)
   \   2CA1  23                INC     HL
   \   2CA2  46                LD      B,(HL)
   \   2CA3  C35B2E            JP      ?1016
   3061                                  *nclst = (*fatfs)->free_clust;
   \   2CA6            ?0729:
   3062                          } else {
   3063                                  /* Get number of free clusters */
   \   2CA6  46                LD      B,(HL)
   \   2CA7  DD70FF            LD      (IX-1),B
   3064                                  fat = (*fatfs)->fs_type;
   \   2CAA  DD77EC            LD      (IX-20),A
   \   2CAD  DD77ED            LD      (IX-19),A
   \   2CB0  DD77EE            LD      (IX-18),A
   \   2CB3  DD77EF            LD      (IX-17),A
   3065                                  n = 0;
   \   2CB6  05                DEC     B
   \   2CB7  2069              JR      NZ,?0732
   \   2CB9            ?0731:
   3066                                  if (fat == FS_FAT12) {
   \   2CB9  DD36F202          LD      (IX-14),2
   \   2CBD  DD77F3            LD      (IX-13),A
   \   2CC0  DD77F4            LD      (IX-12),A
   \   2CC3  DD77F5            LD      (IX-11),A
   \   2CC6            ?0735:
   3067                                          clst = 2;
   3068                                          do {
   \   2CC6  DD6EF4            LD      L,(IX-12)
   \   2CC9  DD66F5            LD      H,(IX-11)
   \   2CCC  E5                PUSH    HL
   \   2CCD  DD6EF2            LD      L,(IX-14)
   \   2CD0  DD66F3            LD      H,(IX-13)
   \   2CD3  E5                PUSH    HL
   \   2CD4  CD380C            CALL    ?1049
   \   2CD7  F1                POP     AF
   \   2CD8  F1                POP     AF
   3069                                                  stat = get_fat(*fatfs, clst);
   \   2CD9  7D                LD      A,L
   \   2CDA  A4                AND     H
   \   2CDB  A1                AND     C
   \   2CDC  A0                AND     B
   \   2CDD  3C                INC     A
   \   2CDE  2006              JR      NZ,?0737
   \   2CE0            ?0736:
   \   2CE0  DD36FE01          LD      (IX-2),1
   \   2CE4  1839              JR      ?0733
   \   2CE6            ?0737:
   3070                                                  if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   \   2CE6  3E01              LD      A,1
   \   2CE8  AD                XOR     L
   \   2CE9  B4                OR      H
   \   2CEA  B1                OR      C
   \   2CEB  B0                OR      B
   \   2CEC  2006              JR      NZ,?0739
   \   2CEE            ?0738:
   \   2CEE  DD36FE02          LD      (IX-2),2
   \   2CF2  182B              JR      ?0733
   \   2CF4            ?0739:
   3071                                                  if (stat == 1) { res = FR_INT_ERR; break; }
   \   2CF4  7D                LD      A,L
   \   2CF5  B4                OR      H
   \   2CF6  B1                OR      C
   \   2CF7  B0                OR      B
   \   2CF8  2003              JR      NZ,?0741
   \   2CFA            ?0740:
   \   2CFA  CD6E2E            CALL    ?1051
   \   2CFD            ?0741:
   3072                                                  if (stat == 0) n++;
   \   2CFD  FD6E00            LD      L,(IY+0)
   \   2D00  FD6601            LD      H,(IY+1)
   \   2D03  011B00            LD      BC,27
   \   2D06  09                ADD     HL,BC
   \   2D07  4E                LD      C,(HL)
   \   2D08  23                INC     HL
   \   2D09  46                LD      B,(HL)
   \   2D0A  23                INC     HL
   \   2D0B  5E                LD      E,(HL)
   \   2D0C  23                INC     HL
   \   2D0D  56                LD      D,(HL)
   \   2D0E  D5                PUSH    DE
   \   2D0F  C5                PUSH    BC
   \   2D10  CD230A            CALL    ?1050
   \   2D13  59                LD      E,C
   \   2D14  50                LD      D,B
   \   2D15  A7                AND     A
   \   2D16  C1                POP     BC
   \   2D17  ED42              SBC     HL,BC
   \   2D19  EB                EX      DE,HL
   \   2D1A  C1                POP     BC
   \   2D1B  ED42              SBC     HL,BC
   \   2D1D  38A7              JR      C,?0735
   \   2D1F            ?0733:
   3073                                          } while (++clst < (*fatfs)->n_fatent);
   \   2D1F  C3252E            JP      ?0743
   \   2D22            ?0732:
   3074                                  } else {
   \   2D22  FD6E00            LD      L,(IY+0)
   \   2D25  FD6601            LD      H,(IY+1)
   \   2D28  011B00            LD      BC,27
   \   2D2B  09                ADD     HL,BC
   \   2D2C  5E                LD      E,(HL)
   \   2D2D  23                INC     HL
   \   2D2E  56                LD      D,(HL)
   \   2D2F  23                INC     HL
   \   2D30  4E                LD      C,(HL)
   \   2D31  23                INC     HL
   \   2D32  46                LD      B,(HL)
   \   2D33  EB                EX      DE,HL
   \   2D34  DD75F2            LD      (IX-14),L
   \   2D37  DD74F3            LD      (IX-13),H
   \   2D3A  DD71F4            LD      (IX-12),C
   \   2D3D  DD70F5            LD      (IX-11),B
   3075                                          clst = (*fatfs)->n_fatent;
   \   2D40  FD6E00            LD      L,(IY+0)
   \   2D43  FD6601            LD      H,(IY+1)
   \   2D46  012300            LD      BC,35
   \   2D49  09                ADD     HL,BC
   \   2D4A  5E                LD      E,(HL)
   \   2D4B  23                INC     HL
   \   2D4C  56                LD      D,(HL)
   \   2D4D  23                INC     HL
   \   2D4E  4E                LD      C,(HL)
   \   2D4F  23                INC     HL
   \   2D50  46                LD      B,(HL)
   \   2D51  EB                EX      DE,HL
   \   2D52  DD75FA            LD      (IX-6),L
   \   2D55  DD74FB            LD      (IX-5),H
   \   2D58  DD71FC            LD      (IX-4),C
   \   2D5B  DD70FD            LD      (IX-3),B
   3076                                          sect = (*fatfs)->fatbase;
   \   2D5E  DD77F0            LD      (IX-16),A
   \   2D61  DD77F1            LD      (IX-15),A
   \   2D64  D9                EXX
   \   2D65  110000            LD      DE,0
   \   2D68  D9                EXX
   \   2D69            ?0745:
   3077                                          i = 0; p = 0;
   3078                                          do {
   \   2D69  D9                EXX
   \   2D6A  7B                LD      A,E
   \   2D6B  B2                OR      D
   \   2D6C  D9                EXX
   \   2D6D  2044              JR      NZ,?0747
   \   2D6F            ?0746:
   3079                                                  if (!i) {
   \   2D6F  DD6EFA            LD      L,(IX-6)
   \   2D72  DD66FB            LD      H,(IX-5)
   \   2D75  DD4EFC            LD      C,(IX-4)
   \   2D78  DD46FD            LD      B,(IX-3)
   \   2D7B  C5                PUSH    BC
   \   2D7C  E5                PUSH    HL
   \   2D7D  CD0000            CALL    ?L_INC_L03
   \   2D80  DD75FA            LD      (IX-6),L
   \   2D83  DD74FB            LD      (IX-5),H
   \   2D86  DD71FC            LD      (IX-4),C
   \   2D89  DD70FD            LD      (IX-3),B
   \   2D8C  FD5E00            LD      E,(IY+0)
   \   2D8F  FD5601            LD      D,(IY+1)
   \   2D92  CD0000            CALL    move_window
   \   2D95  E1                POP     HL
   \   2D96  E1                POP     HL
   \   2D97  DD77FE            LD      (IX-2),A
   3080                                                          res = move_window(*fatfs, sect++);
   \   2D9A  B7                OR      A
   \   2D9B  C2252E            JP      NZ,?0743
   \   2D9E            ?0748:
   \   2D9E            ?0749:
   3081                                                          if (res != FR_OK) break;
   \   2D9E  FD6E00            LD      L,(IY+0)
   \   2DA1  FD6601            LD      H,(IY+1)
   \   2DA4  013300            LD      BC,51
   \   2DA7  09                ADD     HL,BC
   \   2DA8  DD75F0            LD      (IX-16),L
   \   2DAB  DD74F1            LD      (IX-15),H
   3082                                                          p = (*fatfs)->win;
   \   2DAE  D9                EXX
   \   2DAF  110002            LD      DE,512
   \   2DB2  D9                EXX
   \   2DB3            ?0747:
   3083                                                          i = SS(*fatfs);
   3084                                                  }
   \   2DB3  DD46FF            LD      B,(IX-1)
   \   2DB6  05                DEC     B
   \   2DB7  05                DEC     B
   \   2DB8  DD6EF0            LD      L,(IX-16)
   \   2DBB  DD66F1            LD      H,(IX-15)
   \   2DBE  201B              JR      NZ,?0751
   \   2DC0            ?0750:
   3085                                                  if (fat == FS_FAT16) {
   \   2DC0  7E                LD      A,(HL)
   \   2DC1  23                INC     HL
   \   2DC2  B6                OR      (HL)
   \   2DC3  2003              JR      NZ,?0753
   \   2DC5            ?0752:
   \   2DC5  CD6E2E            CALL    ?1051
   \   2DC8            ?0753:
   3086                                                          if (LD_WORD(p) == 0) n++;
   \   2DC8  210800            LD      HL,8
   \   2DCB  39                ADD     HL,SP
   \   2DCC  7E                LD      A,(HL)
   \   2DCD  C602              ADD     A,2
   \   2DCF  77                LD      (HL),A
   \   2DD0  23                INC     HL
   \   2DD1  7E                LD      A,(HL)
   \   2DD2  CE00              ADC     A,0
   \   2DD4  77                LD      (HL),A
   \   2DD5  D9                EXX
   \   2DD6  21FEFF            LD      HL,65534
   \   2DD9  1825              JR      ?1014
   3087                                                          p += 2; i -= 2;
   \   2DDB            ?0751:
   3088                                                  } else {
   \   2DDB  5E                LD      E,(HL)
   \   2DDC  23                INC     HL
   \   2DDD  56                LD      D,(HL)
   \   2DDE  23                INC     HL
   \   2DDF  4E                LD      C,(HL)
   \   2DE0  23                INC     HL
   \   2DE1  7E                LD      A,(HL)
   \   2DE2  EB                EX      DE,HL
   \   2DE3  E60F              AND     15
   \   2DE5  47                LD      B,A
   \   2DE6  7D                LD      A,L
   \   2DE7  B4                OR      H
   \   2DE8  B1                OR      C
   \   2DE9  B0                OR      B
   \   2DEA  2003              JR      NZ,?0756
   \   2DEC            ?0755:
   \   2DEC  CD6E2E            CALL    ?1051
   \   2DEF            ?0756:
   3089                                                          if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   \   2DEF  210800            LD      HL,8
   \   2DF2  39                ADD     HL,SP
   \   2DF3  7E                LD      A,(HL)
   \   2DF4  C604              ADD     A,4
   \   2DF6  77                LD      (HL),A
   \   2DF7  23                INC     HL
   \   2DF8  7E                LD      A,(HL)
   \   2DF9  CE00              ADC     A,0
   \   2DFB  77                LD      (HL),A
   \   2DFC  D9                EXX
   \   2DFD  21FCFF            LD      HL,65532
   \   2E00            ?1014:
   \   2E00  19                ADD     HL,DE
   \   2E01  EB                EX      DE,HL
   \   2E02  D9                EXX
   \   2E03            ?0754:
   3090                                                          p += 4; i -= 4;
   3091                                                  }
   \   2E03  DD6EF2            LD      L,(IX-14)
   \   2E06  DD66F3            LD      H,(IX-13)
   \   2E09  DD4EF4            LD      C,(IX-12)
   \   2E0C  DD46F5            LD      B,(IX-11)
   \   2E0F  CD0000            CALL    ?L_DEC_L03
   \   2E12  DD75F2            LD      (IX-14),L
   \   2E15  DD74F3            LD      (IX-13),H
   \   2E18  DD71F4            LD      (IX-12),C
   \   2E1B  DD70F5            LD      (IX-11),B
   \   2E1E  7D                LD      A,L
   \   2E1F  B4                OR      H
   \   2E20  B1                OR      C
   \   2E21  B0                OR      B
   \   2E22  C2692D            JP      NZ,?0745
   \   2E25            ?0743:
   \   2E25            ?0742:
   3092                                          } while (--clst);
   3093                                  }
   \   2E25  FD6E00            LD      L,(IY+0)
   \   2E28  FD6601            LD      H,(IY+1)
   \   2E2B  010F00            LD      BC,15
   \   2E2E  09                ADD     HL,BC
   \   2E2F  DD4EEE            LD      C,(IX-18)
   \   2E32  DD46EF            LD      B,(IX-17)
   \   2E35  DD5EEC            LD      E,(IX-20)
   \   2E38  73                LD      (HL),E
   \   2E39  DD56ED            LD      D,(IX-19)
   \   2E3C  23                INC     HL
   \   2E3D  72                LD      (HL),D
   \   2E3E  23                INC     HL
   \   2E3F  71                LD      (HL),C
   \   2E40  23                INC     HL
   \   2E41  70                LD      (HL),B
   3094                                  (*fatfs)->free_clust = n;
   \   2E42  DD7EFF            LD      A,(IX-1)
   \   2E45  FE03              CP      3
   \   2E47  200C              JR      NZ,?0758
   \   2E49            ?0757:
   \   2E49  FD6E00            LD      L,(IY+0)
   \   2E4C  FD6601            LD      H,(IY+1)
   \   2E4F  010600            LD      BC,6
   \   2E52  09                ADD     HL,BC
   \   2E53  3601              LD      (HL),1
   \   2E55            ?0758:
   3095                                  if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
   \   2E55  DD4EEE            LD      C,(IX-18)
   \   2E58  DD46EF            LD      B,(IX-17)
   \   2E5B            ?1016:
   \   2E5B  EB                EX      DE,HL
   \   2E5C  E5                PUSH    HL
   \   2E5D  DD6E04            LD      L,(IX+4)
   \   2E60  DD6605            LD      H,(IX+5)
   \   2E63  D1                POP     DE
   \   2E64  73                LD      (HL),E
   \   2E65  23                INC     HL
   \   2E66  72                LD      (HL),D
   \   2E67  23                INC     HL
   \   2E68  71                LD      (HL),C
   \   2E69  23                INC     HL
   \   2E6A  70                LD      (HL),B
   \   2E6B            ?0730:
   \   2E6B            ?0727:
   3096                                  *nclst = n;
   3097                          }
   3098                  }
   \   2E6B  C38306            JP      ?0056
   \   2E6E            ?1051:
   \   2E6E  DD6EEC            LD      L,(IX-20)
   \   2E71  DD66ED            LD      H,(IX-19)
   \   2E74  DD4EEE            LD      C,(IX-18)
   \   2E77  DD46EF            LD      B,(IX-17)
   \   2E7A  CD0000            CALL    ?L_INC_L03
   \   2E7D  DD75EC            LD      (IX-20),L
   \   2E80  DD74ED            LD      (IX-19),H
   \   2E83  DD71EE            LD      (IX-18),C
   \   2E86  DD70EF            LD      (IX-17),B
   \   2E89  C9                RET
   3099                  LEAVE_FF(*fatfs, res);
   3100          }
   3101          
   3102          
   3103          
   3104          
   3105          /*-----------------------------------------------------------------------*/
   3106          /* Truncate File                                                         */
   3107          /*-----------------------------------------------------------------------*/
   3108          
   3109          FRESULT f_truncate (
   3110                  FIL *fp         /* Pointer to the file object */
   3111          )
   \   2E8A            f_truncate:
   \   2E8A  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2E8D  FAFF              DEFW    65530
   \   2E8F  FDE5              PUSH    IY
   3112          {
   3113                  FRESULT res;
   3114                  DWORD ncl;
   3115          
   3116          
   \   2E91  CD7C21            CALL    ?1065
   \   2E94  DD77FA            LD      (IX-6),A
   3117                  res = validate(fp->fs, fp->id);         /* Check validity of the object */
   \   2E97  B7                OR      A
   \   2E98  2017              JR      NZ,?0765
   \   2E9A            ?0759:
   3118                  if (res == FR_OK) {
   \   2E9A  FD7E04            LD      A,(IY+4)
   \   2E9D  B7                OR      A
   \   2E9E  F2A72E            JP      P,?0762
   \   2EA1            ?0761:
   3119                          if (fp->flag & FA__ERROR) {                     /* Check abort flag */
   \   2EA1  DD36FA02          LD      (IX-6),2
   3120                                  res = FR_INT_ERR;
   \   2EA5  180A              JR      ?0765
   \   2EA7            ?0762:
   3121                          } else {
   \   2EA7  FDCB044E          BIT     1,(IY+4)
   \   2EAB  2004              JR      NZ,?0765
   \   2EAD            ?0764:
   3122                                  if (!(fp->flag & FA_WRITE))             /* Check access mode */
   \   2EAD  DD36FA07          LD      (IX-6),7
   \   2EB1            ?0765:
   \   2EB1            ?0763:
   \   2EB1            ?0760:
   3123                                          res = FR_DENIED;
   3124                          }
   3125                  }
   \   2EB1  AF                XOR     A
   \   2EB2  DDB6FA            OR      (IX-6)
   \   2EB5  C2E22F            JP      NZ,?0784
   \   2EB8            ?0766:
   3126                  if (res == FR_OK) {
   \   2EB8  FD6E06            LD      L,(IY+6)
   \   2EBB  FD6607            LD      H,(IY+7)
   \   2EBE  FD4E0A            LD      C,(IY+10)
   \   2EC1  FD460B            LD      B,(IY+11)
   \   2EC4  ED42              SBC     HL,BC
   \   2EC6  FD6E08            LD      L,(IY+8)
   \   2EC9  FD6609            LD      H,(IY+9)
   \   2ECC  FD4E0C            LD      C,(IY+12)
   \   2ECF  FD460D            LD      B,(IY+13)
   \   2ED2  ED42              SBC     HL,BC
   \   2ED4  D2D82F            JP      NC,?0782
   \   2ED7            ?0768:
   3127                          if (fp->fsize > fp->fptr) {
   \   2ED7  FD4E08            LD      C,(IY+8)
   \   2EDA  FD4609            LD      B,(IY+9)
   \   2EDD  FD6E06            LD      L,(IY+6)
   \   2EE0  FD6607            LD      H,(IY+7)
   \   2EE3  FD750A            LD      (IY+10),L
   \   2EE6  FD740B            LD      (IY+11),H
   \   2EE9  FD710C            LD      (IY+12),C
   \   2EEC  FD700D            LD      (IY+13),B
   3128                                  fp->fsize = fp->fptr;   /* Set file size to current R/W point */
   \   2EEF  FDCB04EE          SET     5,(IY+4)
   3129                                  fp->flag |= FA__WRITTEN;
   \   2EF3  FD7E06            LD      A,(IY+6)
   \   2EF6  FDB607            OR      (IY+7)
   \   2EF9  FDB608            OR      (IY+8)
   \   2EFC  FDB609            OR      (IY+9)
   \   2EFF  202C              JR      NZ,?0771
   \   2F01            ?0770:
   3130                                  if (fp->fptr == 0) {    /* When set file size to zero, remove entire cluster chain */
   \   2F01  FD6E10            LD      L,(IY+16)
   \   2F04  FD6611            LD      H,(IY+17)
   \   2F07  E5                PUSH    HL
   \   2F08  FD6E0E            LD      L,(IY+14)
   \   2F0B  FD660F            LD      H,(IY+15)
   \   2F0E  E5                PUSH    HL
   \   2F0F  FD5E00            LD      E,(IY+0)
   \   2F12  FD5601            LD      D,(IY+1)
   \   2F15  CD8E06            CALL    remove_chain
   \   2F18  E1                POP     HL
   \   2F19  E1                POP     HL
   \   2F1A  DD77FA            LD      (IX-6),A
   3131                                          res = remove_chain(fp->fs, fp->sclust);
   \   2F1D  AF                XOR     A
   \   2F1E  FD770E            LD      (IY+14),A
   \   2F21  FD770F            LD      (IY+15),A
   \   2F24  FD7710            LD      (IY+16),A
   \   2F27  FD7711            LD      (IY+17),A
   3132                                          fp->sclust = 0;
   \   2F2A  C3D82F            JP      ?0782
   \   2F2D            ?0771:
   3133                                  } else {                                /* When truncate a part of the file, remove remaining clusters */
   \   2F2D  FD6E14            LD      L,(IY+20)
   \   2F30  FD6615            LD      H,(IY+21)
   \   2F33  E5                PUSH    HL
   \   2F34  FD6E12            LD      L,(IY+18)
   \   2F37  FD6613            LD      H,(IY+19)
   \   2F3A  E5                PUSH    HL
   \   2F3B  CD380C            CALL    ?1049
   \   2F3E  F1                POP     AF
   \   2F3F  F1                POP     AF
   \   2F40  DD75FC            LD      (IX-4),L
   \   2F43  DD74FD            LD      (IX-3),H
   \   2F46  DD71FE            LD      (IX-2),C
   \   2F49  DD70FF            LD      (IX-1),B
   3134                                          ncl = get_fat(fp->fs, fp->clust);
   \   2F4C  DD36FA00          LD      (IX-6),0
   3135                                          res = FR_OK;
   \   2F50  7D                LD      A,L
   \   2F51  A4                AND     H
   \   2F52  A1                AND     C
   \   2F53  A0                AND     B
   \   2F54  3C                INC     A
   \   2F55  2004              JR      NZ,?0774
   \   2F57            ?0773:
   \   2F57  DD36FA01          LD      (IX-6),1
   \   2F5B            ?0774:
   3136                                          if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \   2F5B  3E01              LD      A,1
   \   2F5D  AD                XOR     L
   \   2F5E  B4                OR      H
   \   2F5F  B1                OR      C
   \   2F60  B0                OR      B
   \   2F61  2004              JR      NZ,?0776
   \   2F63            ?0775:
   \   2F63  DD36FA02          LD      (IX-6),2
   \   2F67            ?0776:
   3137                                          if (ncl == 1) res = FR_INT_ERR;
   \   2F67  AF                XOR     A
   \   2F68  DDB6FA            OR      (IX-6)
   \   2F6B  206B              JR      NZ,?0782
   \   2F6D  FD6E00            LD      L,(IY+0)
   \   2F70  FD6601            LD      H,(IY+1)
   \   2F73  011B00            LD      BC,27
   \   2F76  09                ADD     HL,BC
   \   2F77  4E                LD      C,(HL)
   \   2F78  23                INC     HL
   \   2F79  46                LD      B,(HL)
   \   2F7A  23                INC     HL
   \   2F7B  5E                LD      E,(HL)
   \   2F7C  23                INC     HL
   \   2F7D  56                LD      D,(HL)
   \   2F7E  D5                PUSH    DE
   \   2F7F  C5                PUSH    BC
   \   2F80  A7                AND     A
   \   2F81  DD6EFC            LD      L,(IX-4)
   \   2F84  DD66FD            LD      H,(IX-3)
   \   2F87  C1                POP     BC
   \   2F88  ED42              SBC     HL,BC
   \   2F8A  DD6EFE            LD      L,(IX-2)
   \   2F8D  DD66FF            LD      H,(IX-1)
   \   2F90  C1                POP     BC
   \   2F91  ED42              SBC     HL,BC
   \   2F93  3043              JR      NC,?0782
   \   2F95            ?0780:
   \   2F95            ?0779:
   \   2F95            ?0777:
   3138                                          if (res == FR_OK && ncl < fp->fs->n_fatent) {
   \   2F95  21FF0F            LD      HL,4095
   \   2F98  E5                PUSH    HL
   \   2F99  65                LD      H,L
   \   2F9A  E5                PUSH    HL
   \   2F9B  FD6E14            LD      L,(IY+20)
   \   2F9E  FD6615            LD      H,(IY+21)
   \   2FA1  E5                PUSH    HL
   \   2FA2  FD6E12            LD      L,(IY+18)
   \   2FA5  FD6613            LD      H,(IY+19)
   \   2FA8  E5                PUSH    HL
   \   2FA9  FD5E00            LD      E,(IY+0)
   \   2FAC  FD5601            LD      D,(IY+1)
   \   2FAF  CD8504            CALL    put_fat
   \   2FB2  E1                POP     HL
   \   2FB3  E1                POP     HL
   \   2FB4  E1                POP     HL
   \   2FB5  E1                POP     HL
   \   2FB6  DD77FA            LD      (IX-6),A
   3139                                                  res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
   \   2FB9  B7                OR      A
   \   2FBA  201C              JR      NZ,?0782
   \   2FBC            ?0781:
   \   2FBC  DD6EFE            LD      L,(IX-2)
   \   2FBF  DD66FF            LD      H,(IX-1)
   \   2FC2  E5                PUSH    HL
   \   2FC3  DD6EFC            LD      L,(IX-4)
   \   2FC6  DD66FD            LD      H,(IX-3)
   \   2FC9  E5                PUSH    HL
   \   2FCA  FD5E00            LD      E,(IY+0)
   \   2FCD  FD5601            LD      D,(IY+1)
   \   2FD0  CD8E06            CALL    remove_chain
   \   2FD3  E1                POP     HL
   \   2FD4  E1                POP     HL
   \   2FD5  DD77FA            LD      (IX-6),A
   \   2FD8            ?0782:
   \   2FD8            ?0778:
   \   2FD8            ?0772:
   \   2FD8            ?0769:
   3140                                                  if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   3141                                          }
   3142                                  }
   3143                          }
   \   2FD8  AF                XOR     A
   \   2FD9  DDB6FA            OR      (IX-6)
   \   2FDC  2804              JR      Z,?0784
   \   2FDE            ?0783:
   \   2FDE  FDCB04FE          SET     7,(IY+4)
   \   2FE2            ?0784:
   \   2FE2            ?0767:
   3144                          if (res != FR_OK) fp->flag |= FA__ERROR;
   3145                  }
   3146          
   3147                  LEAVE_FF(fp->fs, res);
   \   2FE2  FDE1              POP     IY
   \   2FE4  C30000            JP      ?LEAVE_DIRECT_L09
   3148          }
   3149          
   3150          
   3151          
   3152          
   3153          /*-----------------------------------------------------------------------*/
   3154          /* Delete a File or Directory                                            */
   3155          /*-----------------------------------------------------------------------*/
   3156          
   3157          FRESULT f_unlink (
   3158                  const TCHAR *path               /* Pointer to the file or directory path */
   3159          )
   \   2FE7            f_unlink:
   \   2FE7  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   2FEA  C4FF              DEFW    -60
   \   2FEC  FDE5              PUSH    IY
   \   2FEE  D9                EXX
   \   2FEF  C5                PUSH    BC
   \   2FF0  D9                EXX
   3160          {
   3161                  FRESULT res;
   3162                  DIR dj, sdj;
   3163                  BYTE *dir;
   3164                  DWORD dclst;
   3165                  DEF_NAMEBUF;
   3166          
   3167          
   \   2FF1  0E01              LD      C,1
   \   2FF3  C5                PUSH    BC
   \   2FF4  210A00            LD      HL,10
   \   2FF7  39                ADD     HL,SP
   \   2FF8  4D                LD      C,L
   \   2FF9  44                LD      B,H
   \   2FFA  214400            LD      HL,68
   \   2FFD  39                ADD     HL,SP
   \   2FFE  CD221E            CALL    ?1060
   \   3001  E1                POP     HL
   \   3002  FD6F              LD      IYL,A
   3168                  res = chk_mounted(&path, &dj.fs, 1);
   \   3004  B7                OR      A
   \   3005  C26431            JP      NZ,?0820
   \   3008            ?0785:
   3169                  if (res == FR_OK) {
   \   3008  213400            LD      HL,52
   \   300B  39                ADD     HL,SP
   \   300C  DD75DC            LD      (IX-36),L
   \   300F  DD74DD            LD      (IX-35),H
   3170                          INIT_BUF(dj);
   \   3012  DD4E02            LD      C,(IX+2)
   \   3015  DD4603            LD      B,(IX+3)
   \   3018  210800            LD      HL,8
   \   301B  39                ADD     HL,SP
   \   301C  EB                EX      DE,HL
   \   301D  CD9513            CALL    follow_path
   \   3020  FD6F              LD      IYL,A
   \   3022  FD45              LD      B,IYL
   3171                          res = follow_path(&dj, path);           /* Follow the file path */
   \   3024  04                INC     B
   \   3025  05                DEC     B
   \   3026  2010              JR      NZ,?0788
   \   3028  DD6EDC            LD      L,(IX-36)
   \   302B  DD66DD            LD      H,(IX-35)
   \   302E  0E0B              LD      C,11
   \   3030  09                ADD     HL,BC
   \   3031  CB6E              BIT     5,(HL)
   \   3033  2803              JR      Z,?0788
   \   3035            ?0790:
   \   3035            ?0789:
   \   3035            ?0787:
   3172                          if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   \   3035  FD2E06            LD      IYL,6
   \   3038            ?0788:
   3173                                  res = FR_INVALID_NAME;                  /* Cannot remove dot entry */
   3174          #if _FS_SHARE
   3176          #endif
   \   3038  FD45              LD      B,IYL
   \   303A  04                INC     B
   \   303B  05                DEC     B
   \   303C  C26431            JP      NZ,?0820
   \   303F            ?0791:
   3177                          if (res == FR_OK) {                                     /* The object is accessible */
   \   303F  D9                EXX
   \   3040  DD4EDA            LD      C,(IX-38)
   \   3043  79                LD      A,C
   \   3044  DD46DB            LD      B,(IX-37)
   3178                                  dir = dj.dir;
   \   3047  B0                OR      B
   \   3048  D9                EXX
   \   3049  2005              JR      NZ,?0794
   \   304B            ?0793:
   3179                                  if (!dir) {
   \   304B  FD2E06            LD      IYL,6
   3180                                          res = FR_INVALID_NAME;          /* Cannot remove the start directory */
   \   304E  180F              JR      ?0797
   \   3050            ?0794:
   3181                                  } else {
   \   3050  210B00            LD      HL,11
   \   3053  D9                EXX
   \   3054  C5                PUSH    BC
   \   3055  D9                EXX
   \   3056  C1                POP     BC
   \   3057  09                ADD     HL,BC
   \   3058  CB46              BIT     0,(HL)
   \   305A  2803              JR      Z,?0797
   \   305C            ?0796:
   3182                                          if (dir[DIR_Attr] & AM_RDO)
   \   305C  FD2E07            LD      IYL,7
   \   305F            ?0797:
   \   305F            ?0795:
   3183                                                  res = FR_DENIED;                /* Cannot remove R/O object */
   3184                                  }
   \   305F  D9                EXX
   \   3060  C5                PUSH    BC
   \   3061  D9                EXX
   \   3062  D1                POP     DE
   \   3063  CD0000            CALL    LD_CLUST
   \   3066  DD75C4            LD      (IX-60),L
   \   3069  DD74C5            LD      (IX-59),H
   \   306C  DD71C6            LD      (IX-58),C
   \   306F  DD70C7            LD      (IX-57),B
   3185                                  dclst = LD_CLUST(dir);
   \   3072  FD45              LD      B,IYL
   \   3074  04                INC     B
   \   3075  05                DEC     B
   \   3076  C21731            JP      NZ,?0812
   \   3079  210B00            LD      HL,11
   \   307C  D9                EXX
   \   307D  C5                PUSH    BC
   \   307E  D9                EXX
   \   307F  C1                POP     BC
   \   3080  09                ADD     HL,BC
   \   3081  CB66              BIT     4,(HL)
   \   3083  CA1731            JP      Z,?0812
   \   3086            ?0801:
   \   3086            ?0800:
   \   3086            ?0798:
   3186                                  if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
   \   3086  A7                AND     A
   \   3087  DD6EC4            LD      L,(IX-60)
   \   308A  DD66C5            LD      H,(IX-59)
   \   308D  010200            LD      BC,2
   \   3090  ED42              SBC     HL,BC
   \   3092  DD6EC6            LD      L,(IX-58)
   \   3095  DD66C7            LD      H,(IX-57)
   \   3098  0B                DEC     BC
   \   3099  0B                DEC     BC
   \   309A  ED42              SBC     HL,BC
   \   309C  3005              JR      NC,?0803
   \   309E            ?0802:
   3187                                          if (dclst < 2) {
   \   309E  FD2E02            LD      IYL,2
   3188                                                  res = FR_INT_ERR;
   \   30A1  1874              JR      ?0812
   \   30A3            ?0803:
   3189                                          } else {
   \   30A3  0E16              LD      C,22
   \   30A5  211E00            LD      HL,30
   \   30A8  39                ADD     HL,SP
   \   30A9  EB                EX      DE,HL
   \   30AA  210800            LD      HL,8
   \   30AD  39                ADD     HL,SP
   \   30AE  EDB0              LDIR
   3190                                                  memcpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
   \   30B0  DD4EC6            LD      C,(IX-58)
   \   30B3  DD46C7            LD      B,(IX-57)
   \   30B6  DD6EC4            LD      L,(IX-60)
   \   30B9  DD66C5            LD      H,(IX-59)
   \   30BC  DD75E4            LD      (IX-28),L
   \   30BF  DD74E5            LD      (IX-27),H
   \   30C2  DD71E6            LD      (IX-26),C
   \   30C5  DD70E7            LD      (IX-25),B
   3191                                                  sdj.sclust = dclst;
   \   30C8  010200            LD      BC,2
   \   30CB  211E00            LD      HL,30
   \   30CE  39                ADD     HL,SP
   \   30CF  EB                EX      DE,HL
   \   30D0  CD210F            CALL    ?1055
   3192                                                  res = dir_sdi(&sdj, 2);         /* Exclude dot entries */
   \   30D3  2042              JR      NZ,?0812
   \   30D5            ?0805:
   3193                                                  if (res == FR_OK) {
   \   30D5  211E00            LD      HL,30
   \   30D8  39                ADD     HL,SP
   \   30D9  EB                EX      DE,HL
   \   30DA  CD350F            CALL    dir_read
   \   30DD  FD6F              LD      IYL,A
   3194                                                          res = dir_read(&sdj);
   3195                                                          if (res == FR_OK                        /* Not empty dir */
   3196          #if _FS_RPATH
   3197                                                          || dclst == sdj.fs->cdir        /* Current dir */
   3198          #endif
   \   30DF  B7                OR      A
   \   30E0  2829              JR      Z,?0809
   \   30E2  211700            LD      HL,23
   \   30E5  DD4EDE            LD      C,(IX-34)
   \   30E8  DD46DF            LD      B,(IX-33)
   \   30EB  09                ADD     HL,BC
   \   30EC  4E                LD      C,(HL)
   \   30ED  23                INC     HL
   \   30EE  46                LD      B,(HL)
   \   30EF  23                INC     HL
   \   30F0  5E                LD      E,(HL)
   \   30F1  23                INC     HL
   \   30F2  56                LD      D,(HL)
   \   30F3  69                LD      L,C
   \   30F4  60                LD      H,B
   \   30F5  DD4EC4            LD      C,(IX-60)
   \   30F8  DD46C5            LD      B,(IX-59)
   \   30FB  A7                AND     A
   \   30FC  ED42              SBC     HL,BC
   \   30FE  200E              JR      NZ,?0808
   \   3100  EB                EX      DE,HL
   \   3101  DD4EC6            LD      C,(IX-58)
   \   3104  DD46C7            LD      B,(IX-57)
   \   3107  ED42              SBC     HL,BC
   \   3109  2003              JR      NZ,?0808
   \   310B            ?0809:
   \   310B            ?0810:
   \   310B            ?0807:
   \   310B  FD2E07            LD      IYL,7
   \   310E            ?0808:
   3199                                                          ) res = FR_DENIED;
   \   310E  FD7D              LD      A,IYL
   \   3110  FE04              CP      4
   \   3112  2003              JR      NZ,?0812
   \   3114            ?0811:
   \   3114  FD2E00            LD      IYL,0
   \   3117            ?0812:
   \   3117            ?0806:
   \   3117            ?0804:
   \   3117            ?0799:
   3200                                                          if (res == FR_NO_FILE) res = FR_OK;     /* Empty */
   3201                                                  }
   3202                                          }
   3203                                  }
   \   3117  FD45              LD      B,IYL
   \   3119  04                INC     B
   \   311A  05                DEC     B
   \   311B  2047              JR      NZ,?0820
   \   311D            ?0813:
   3204                                  if (res == FR_OK) {
   \   311D  210800            LD      HL,8
   \   3120  39                ADD     HL,SP
   \   3121  EB                EX      DE,HL
   \   3122  CD3810            CALL    dir_remove
   \   3125  FD6F              LD      IYL,A
   3205                                          res = dir_remove(&dj);          /* Remove the directory entry */
   \   3127  B7                OR      A
   \   3128  203A              JR      NZ,?0820
   \   312A            ?0815:
   3206                                          if (res == FR_OK) {
   \   312A  DD7EC4            LD      A,(IX-60)
   \   312D  DDB6C5            OR      (IX-59)
   \   3130  DDB6C6            OR      (IX-58)
   \   3133  DDB6C7            OR      (IX-57)
   \   3136  281B              JR      Z,?0818
   \   3138            ?0817:
   3207                                                  if (dclst)                              /* Remove the cluster chain if exist */
   \   3138  DD6EC6            LD      L,(IX-58)
   \   313B  DD66C7            LD      H,(IX-57)
   \   313E  E5                PUSH    HL
   \   313F  DD6EC4            LD      L,(IX-60)
   \   3142  DD66C5            LD      H,(IX-59)
   \   3145  E5                PUSH    HL
   \   3146  DD5EC8            LD      E,(IX-56)
   \   3149  DD56C9            LD      D,(IX-55)
   \   314C  CD8E06            CALL    remove_chain
   \   314F  E1                POP     HL
   \   3150  E1                POP     HL
   \   3151  FD6F              LD      IYL,A
   \   3153            ?0818:
   3208                                                          res = remove_chain(dj.fs, dclst);
   \   3153  FD45              LD      B,IYL
   \   3155  04                INC     B
   \   3156  05                DEC     B
   \   3157  200B              JR      NZ,?0820
   \   3159            ?0819:
   \   3159  DD5EC8            LD      E,(IX-56)
   \   315C  DD56C9            LD      D,(IX-55)
   \   315F  CD5301            CALL    sync
   \   3162  FD6F              LD      IYL,A
   \   3164            ?0820:
   \   3164            ?0816:
   \   3164            ?0814:
   \   3164            ?0792:
   \   3164            ?0786:
   3209                                                  if (res == FR_OK) res = sync(dj.fs);
   3210                                          }
   3211                                  }
   3212                          }
   3213                          FREE_BUF();
   3214                  }
   \   3164  FD7D              LD      A,IYL
   3215                  LEAVE_FF(dj.fs, res);
   \   3166  C3970E            JP      ?0190
   3216          }
   3217          
   3218          
   3219          
   3220          
   3221          /*-----------------------------------------------------------------------*/
   3222          /* Create a Directory                                                    */
   3223          /*-----------------------------------------------------------------------*/
   3224          
   3225          FRESULT f_mkdir (
   3226                  const TCHAR *path               /* Pointer to the directory path */
   3227          )
   \   3169            f_mkdir:
   \   3169  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   316C  CCFF              DEFW    -52
   \   316E  FDE5              PUSH    IY
   3228          {
   3229                  FRESULT res;
   3230                  DIR dj;
   3231                  BYTE *dir, n;
   3232                  DWORD dsc, dcl, pcl, tim;
   3233                  DEF_NAMEBUF;
   \   3170  210C00            LD      HL,12
   \   3173  39                ADD     HL,SP
   \   3174  EB                EX      DE,HL
   \   3175  CD0000            CALL    get_fattime
   3234                  get_fattime(&tim);
   3235          
   3236          
   \   3178  0E01              LD      C,1
   \   317A  C5                PUSH    BC
   \   317B  211600            LD      HL,22
   \   317E  39                ADD     HL,SP
   \   317F  4D                LD      C,L
   \   3180  44                LD      B,H
   \   3181  213A00            LD      HL,58
   \   3184  39                ADD     HL,SP
   \   3185  CD221E            CALL    ?1060
   \   3188  E1                POP     HL
   \   3189  DD77CC            LD      (IX-52),A
   3237                  res = chk_mounted(&path, &dj.fs, 1);
   \   318C  B7                OR      A
   \   318D  C21534            JP      NZ,?0855
   \   3190            ?0821:
   3238                  if (res == FR_OK) {
   \   3190  212A00            LD      HL,42
   \   3193  39                ADD     HL,SP
   \   3194  DD75F2            LD      (IX-14),L
   \   3197  DD74F3            LD      (IX-13),H
   3239                          INIT_BUF(dj);
   \   319A  DD4E02            LD      C,(IX+2)
   \   319D  DD4603            LD      B,(IX+3)
   \   31A0  211400            LD      HL,20
   \   31A3  39                ADD     HL,SP
   \   31A4  EB                EX      DE,HL
   \   31A5  CD9513            CALL    follow_path
   \   31A8  DD77CC            LD      (IX-52),A
   3240                          res = follow_path(&dj, path);                   /* Follow the file path */
   \   31AB  B7                OR      A
   \   31AC  2004              JR      NZ,?0824
   \   31AE            ?0823:
   \   31AE  DD36CC08          LD      (IX-52),8
   \   31B2            ?0824:
   3241                          if (res == FR_OK) res = FR_EXIST;               /* Any object with same name is already existing */
   \   31B2  DD7ECC            LD      A,(IX-52)
   \   31B5  FE04              CP      4
   \   31B7  2012              JR      NZ,?0826
   \   31B9  DD6EF2            LD      L,(IX-14)
   \   31BC  DD66F3            LD      H,(IX-13)
   \   31BF  010B00            LD      BC,11
   \   31C2  09                ADD     HL,BC
   \   31C3  CB6E              BIT     5,(HL)
   \   31C5  2804              JR      Z,?0826
   \   31C7            ?0828:
   \   31C7            ?0827:
   \   31C7            ?0825:
   3242                          if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
   \   31C7  DD36CC06          LD      (IX-52),6
   \   31CB            ?0826:
   3243                                  res = FR_INVALID_NAME;
   \   31CB  DD7ECC            LD      A,(IX-52)
   \   31CE  FE04              CP      4
   \   31D0  C21534            JP      NZ,?0855
   \   31D3            ?0829:
   3244                          if (res == FR_NO_FILE) {                                /* Can create a new directory */
   \   31D3  210000            LD      HL,0
   \   31D6  E5                PUSH    HL
   \   31D7  E5                PUSH    HL
   \   31D8  DD5EDE            LD      E,(IX-34)
   \   31DB  DD56DF            LD      D,(IX-33)
   \   31DE  CDB007            CALL    create_chain
   \   31E1  F1                POP     AF
   \   31E2  F1                POP     AF
   \   31E3  DD75CE            LD      (IX-50),L
   \   31E6  DD74CF            LD      (IX-49),H
   \   31E9  DD71D0            LD      (IX-48),C
   \   31EC  DD70D1            LD      (IX-47),B
   3245                                  dcl = create_chain(dj.fs, 0);           /* Allocate a cluster for the new directory table */
   \   31EF  DD36CC00          LD      (IX-52),0
   3246                                  res = FR_OK;
   \   31F3  7D                LD      A,L
   \   31F4  B4                OR      H
   \   31F5  B1                OR      C
   \   31F6  B0                OR      B
   \   31F7  2004              JR      NZ,?0832
   \   31F9            ?0831:
   \   31F9  DD36CC07          LD      (IX-52),7
   \   31FD            ?0832:
   3247                                  if (dcl == 0) res = FR_DENIED;          /* No space to allocate a new cluster */
   \   31FD  3E01              LD      A,1
   \   31FF  AD                XOR     L
   \   3200  B4                OR      H
   \   3201  B1                OR      C
   \   3202  B0                OR      B
   \   3203  2004              JR      NZ,?0834
   \   3205            ?0833:
   \   3205  DD36CC02          LD      (IX-52),2
   \   3209            ?0834:
   3248                                  if (dcl == 1) res = FR_INT_ERR;
   \   3209  7D                LD      A,L
   \   320A  A4                AND     H
   \   320B  A1                AND     C
   \   320C  A0                AND     B
   \   320D  3C                INC     A
   \   320E  2004              JR      NZ,?0836
   \   3210            ?0835:
   \   3210  DD36CC01          LD      (IX-52),1
   \   3214            ?0836:
   3249                                  if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \   3214  AF                XOR     A
   \   3215  DDB6CC            OR      (IX-52)
   \   3218  2012              JR      NZ,?0838
   \   321A            ?0837:
   3250                                  if (res == FR_OK)                                       /* Flush FAT */
   \   321A  6F                LD      L,A
   \   321B  67                LD      H,A
   \   321C  E5                PUSH    HL
   \   321D  E5                PUSH    HL
   \   321E  DD5EDE            LD      E,(IX-34)
   \   3221  DD56DF            LD      D,(IX-33)
   \   3224  CD0000            CALL    move_window
   \   3227  E1                POP     HL
   \   3228  E1                POP     HL
   \   3229  DD77CC            LD      (IX-52),A
   \   322C            ?0838:
   3251                                          res = move_window(dj.fs, 0);
   \   322C  AF                XOR     A
   \   322D  DDB6CC            OR      (IX-52)
   \   3230  C2A033            JP      NZ,?0845
   \   3233            ?0839:
   3252                                  if (res == FR_OK) {                                     /* Initialize the new directory table */
   \   3233  C5                PUSH    BC
   \   3234  DD6ECE            LD      L,(IX-50)
   \   3237  DD66CF            LD      H,(IX-49)
   \   323A  E5                PUSH    HL
   \   323B  DD5EDE            LD      E,(IX-34)
   \   323E  DD56DF            LD      D,(IX-33)
   \   3241  CD3902            CALL    clust2sect
   \   3244  F1                POP     AF
   \   3245  F1                POP     AF
   \   3246  DD75DA            LD      (IX-38),L
   \   3249  DD74DB            LD      (IX-37),H
   \   324C  DD71DC            LD      (IX-36),C
   \   324F  DD70DD            LD      (IX-35),B
   3253                                          dsc = clust2sect(dj.fs, dcl);
   \   3252  213300            LD      HL,51
   \   3255  DD4EDE            LD      C,(IX-34)
   \   3258  DD46DF            LD      B,(IX-33)
   \   325B  09                ADD     HL,BC
   \   325C  E5                PUSH    HL
   \   325D  FDE1              POP     IY
   3254                                          dir = dj.fs->win;
   \   325F  010002            LD      BC,512
   \   3262  EB                EX      DE,HL
   \   3263  69                LD      L,C
   \   3264  61                LD      H,C
   \   3265  CD0000            CALL    ?MEMSET_L11
   3255                                          memset(dir, 0, SS(dj.fs));
   \   3268  010B00            LD      BC,11
   \   326B  2E20              LD      L,32
   \   326D  CD0000            CALL    ?MEMSET_L11
   3256                                          memset(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
   \   3270  EB                EX      DE,HL
   \   3271  362E              LD      (HL),46
   3257                                          dir[DIR_Name] = '.';
   \   3273  FD360B10          LD      (IY+11),16
   3258                                          dir[DIR_Attr] = AM_DIR;
   \   3277  DD4ED8            LD      C,(IX-40)
   \   327A  DD46D9            LD      B,(IX-39)
   \   327D  DD6ED6            LD      L,(IX-42)
   \   3280  FD7516            LD      (IY+22),L
   \   3283  DD66D7            LD      H,(IX-41)
   \   3286  FD7417            LD      (IY+23),H
   \   3289  FD7118            LD      (IY+24),C
   \   328C  FD7019            LD      (IY+25),B
   3259                                          ST_DWORD(dir+DIR_WrtTime, tim);
   \   328F  DD6ECE            LD      L,(IX-50)
   \   3292  FD751A            LD      (IY+26),L
   \   3295  DD66CF            LD      H,(IX-49)
   \   3298  FD741B            LD      (IY+27),H
   \   329B  DD6ED0            LD      L,(IX-48)
   \   329E  FD7514            LD      (IY+20),L
   \   32A1  DD66D1            LD      H,(IX-47)
   \   32A4  FD7415            LD      (IY+21),H
   3260                                          ST_CLUST(dir, dcl);
   \   32A7  4B                LD      C,E
   \   32A8  69                LD      L,C
   \   32A9  42                LD      B,D
   \   32AA  60                LD      H,B
   \   32AB  FDE5              PUSH    IY
   \   32AD  D1                POP     DE
   \   32AE  19                ADD     HL,DE
   \   32AF  EB                EX      DE,HL
   \   32B0  FDE5              PUSH    IY
   \   32B2  E1                POP     HL
   \   32B3  EDB0              LDIR
   3261                                          memcpy(dir+SZ_DIR, dir, SZ_DIR);        /* Create ".." entry */
   \   32B5  FD36212E          LD      (IY+33),46
   \   32B9  211A00            LD      HL,26
   \   32BC  39                ADD     HL,SP
   \   32BD  5E                LD      E,(HL)
   \   32BE  23                INC     HL
   \   32BF  56                LD      D,(HL)
   \   32C0  23                INC     HL
   \   32C1  4E                LD      C,(HL)
   \   32C2  23                INC     HL
   \   32C3  46                LD      B,(HL)
   \   32C4  EB                EX      DE,HL
   \   32C5  DD75D2            LD      (IX-46),L
   \   32C8  DD74D3            LD      (IX-45),H
   \   32CB  DD71D4            LD      (IX-44),C
   \   32CE  DD70D5            LD      (IX-43),B
   3262                                          dir[33] = '.'; pcl = dj.sclust;
   \   32D1  DD6EDE            LD      L,(IX-34)
   \   32D4  DD66DF            LD      H,(IX-33)
   \   32D7  7E                LD      A,(HL)
   \   32D8  FE03              CP      3
   \   32DA  2036              JR      NZ,?0842
   \   32DC  212700            LD      HL,39
   \   32DF  DD4EDE            LD      C,(IX-34)
   \   32E2  DD46DF            LD      B,(IX-33)
   \   32E5  09                ADD     HL,BC
   \   32E6  4E                LD      C,(HL)
   \   32E7  23                INC     HL
   \   32E8  46                LD      B,(HL)
   \   32E9  23                INC     HL
   \   32EA  5E                LD      E,(HL)
   \   32EB  23                INC     HL
   \   32EC  56                LD      D,(HL)
   \   32ED  69                LD      L,C
   \   32EE  60                LD      H,B
   \   32EF  DD4ED2            LD      C,(IX-46)
   \   32F2  DD46D3            LD      B,(IX-45)
   \   32F5  A7                AND     A
   \   32F6  ED42              SBC     HL,BC
   \   32F8  2018              JR      NZ,?0842
   \   32FA  EB                EX      DE,HL
   \   32FB  DD4ED4            LD      C,(IX-44)
   \   32FE  DD46D5            LD      B,(IX-43)
   \   3301  ED42              SBC     HL,BC
   \   3303  200D              JR      NZ,?0842
   \   3305            ?0844:
   \   3305            ?0843:
   \   3305            ?0841:
   3263                                          if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
   \   3305  AF                XOR     A
   \   3306  DD77D2            LD      (IX-46),A
   \   3309  DD77D3            LD      (IX-45),A
   \   330C  DD77D4            LD      (IX-44),A
   \   330F  DD77D5            LD      (IX-43),A
   \   3312            ?0842:
   3264                                                  pcl = 0;
   \   3312  DD6ED2            LD      L,(IX-46)
   \   3315  FD753A            LD      (IY+58),L
   \   3318  DD66D3            LD      H,(IX-45)
   \   331B  FD743B            LD      (IY+59),H
   \   331E  DD6ED4            LD      L,(IX-44)
   \   3321  FD7534            LD      (IY+52),L
   \   3324  DD66D5            LD      H,(IX-43)
   \   3327  FD7435            LD      (IY+53),H
   3265                                          ST_CLUST(dir+SZ_DIR, pcl);
   \   332A  DD6EDE            LD      L,(IX-34)
   \   332D  DD66DF            LD      H,(IX-33)
   \   3330  23                INC     HL
   \   3331  23                INC     HL
   \   3332  23                INC     HL
   \   3333  46                LD      B,(HL)
   \   3334  DD70CD            LD      (IX-51),B
   \   3337            ?0846:
   \   3337  AF                XOR     A
   \   3338  DDB6CD            OR      (IX-51)
   \   333B  2863              JR      Z,?0845
   \   333D            ?0847:
   3266                                          for (n = dj.fs->csize; n; n--) {        /* Write dot entries and clear following sectors */
   \   333D  212F00            LD      HL,47
   \   3340  DD4EDE            LD      C,(IX-34)
   \   3343  DD46DF            LD      B,(IX-33)
   \   3346  09                ADD     HL,BC
   \   3347  E5                PUSH    HL
   \   3348  DD6EDA            LD      L,(IX-38)
   \   334B  DD66DB            LD      H,(IX-37)
   \   334E  DD4EDC            LD      C,(IX-36)
   \   3351  DD46DD            LD      B,(IX-35)
   \   3354  C5                PUSH    BC
   \   3355  E5                PUSH    HL
   \   3356  CD0000            CALL    ?L_INC_L03
   \   3359  DD75DA            LD      (IX-38),L
   \   335C  DD74DB            LD      (IX-37),H
   \   335F  DD71DC            LD      (IX-36),C
   \   3362  DD70DD            LD      (IX-35),B
   \   3365  D1                POP     DE
   \   3366  C1                POP     BC
   \   3367  E1                POP     HL
   \   3368  73                LD      (HL),E
   \   3369  23                INC     HL
   \   336A  72                LD      (HL),D
   \   336B  23                INC     HL
   \   336C  71                LD      (HL),C
   \   336D  23                INC     HL
   \   336E  70                LD      (HL),B
   3267                                                  dj.fs->winsect = dsc++;
   \   336F  210500            LD      HL,5
   \   3372  DD4EDE            LD      C,(IX-34)
   \   3375  DD46DF            LD      B,(IX-33)
   \   3378  09                ADD     HL,BC
   \   3379  3601              LD      (HL),1
   3268                                                  dj.fs->wflag = 1;
   \   337B  210000            LD      HL,0
   \   337E  E5                PUSH    HL
   \   337F  E5                PUSH    HL
   \   3380  DD5EDE            LD      E,(IX-34)
   \   3383  DD56DF            LD      D,(IX-33)
   \   3386  CD0000            CALL    move_window
   \   3389  E1                POP     HL
   \   338A  E1                POP     HL
   \   338B  DD77CC            LD      (IX-52),A
   3269                                                  res = move_window(dj.fs, 0);
   \   338E  B7                OR      A
   \   338F  200F              JR      NZ,?0845
   \   3391            ?0849:
   \   3391            ?0850:
   3270                                                  if (res != FR_OK) break;
   \   3391  010002            LD      BC,512
   \   3394  FDE5              PUSH    IY
   \   3396  D1                POP     DE
   \   3397  69                LD      L,C
   \   3398  CD0000            CALL    ?MEMSET_L11
   \   339B  DD35CD            DEC     (IX-51)
   3271                                                  memset(dir, 0, SS(dj.fs));
   3272                                          }
   \   339E  1897              JR      ?0846
   \   33A0            ?0845:
   \   33A0            ?0840:
   3273                                  }
   \   33A0  AF                XOR     A
   \   33A1  DDB6CC            OR      (IX-52)
   \   33A4  200B              JR      NZ,?0852
   \   33A6            ?0851:
   \   33A6  211400            LD      HL,20
   \   33A9  39                ADD     HL,SP
   \   33AA  EB                EX      DE,HL
   \   33AB  CDAE0F            CALL    dir_register
   \   33AE  DD77CC            LD      (IX-52),A
   \   33B1            ?0852:
   3274                                  if (res == FR_OK) res = dir_register(&dj);      /* Register the object to the directoy */
   \   33B1  AF                XOR     A
   \   33B2  DDB6CC            OR      (IX-52)
   \   33B5  281B              JR      Z,?0854
   \   33B7            ?0853:
   3275                                  if (res != FR_OK) {
   \   33B7  DD6ED0            LD      L,(IX-48)
   \   33BA  DD66D1            LD      H,(IX-47)
   \   33BD  E5                PUSH    HL
   \   33BE  DD6ECE            LD      L,(IX-50)
   \   33C1  DD66CF            LD      H,(IX-49)
   \   33C4  E5                PUSH    HL
   \   33C5  DD5EDE            LD      E,(IX-34)
   \   33C8  DD56DF            LD      D,(IX-33)
   \   33CB  CD8E06            CALL    remove_chain
   \   33CE  E1                POP     HL
   \   33CF  E1                POP     HL
   3276                                          remove_chain(dj.fs, dcl);                       /* Could not register, remove cluster chain */
   \   33D0  1843              JR      ?0855
   \   33D2            ?0854:
   3277                                  } else {
   \   33D2  DD6EF0            LD      L,(IX-16)
   \   33D5  DD66F1            LD      H,(IX-15)
   \   33D8  E5                PUSH    HL
   \   33D9  FDE1              POP     IY
   3278                                          dir = dj.dir;
   \   33DB  FD360B10          LD      (IY+11),16
   3279                                          dir[DIR_Attr] = AM_DIR;                         /* Attribute */
   \   33DF  DD4ED8            LD      C,(IX-40)
   \   33E2  DD46D9            LD      B,(IX-39)
   \   33E5  DD6ED6            LD      L,(IX-42)
   \   33E8  FD7516            LD      (IY+22),L
   \   33EB  DD66D7            LD      H,(IX-41)
   \   33EE  FD7417            LD      (IY+23),H
   \   33F1  FD7118            LD      (IY+24),C
   \   33F4  FD7019            LD      (IY+25),B
   3280                                          ST_DWORD(dir+DIR_WrtTime, tim);         /* Created time */
   \   33F7  DD6ECE            LD      L,(IX-50)
   \   33FA  FD751A            LD      (IY+26),L
   \   33FD  DD66CF            LD      H,(IX-49)
   \   3400  FD741B            LD      (IY+27),H
   \   3403  DD6ED0            LD      L,(IX-48)
   \   3406  FD7514            LD      (IY+20),L
   \   3409  DD66D1            LD      H,(IX-47)
   \   340C  FD7415            LD      (IY+21),H
   3281                                          ST_CLUST(dir, dcl);                                     /* Table start cluster */
   3282                                          dj.fs->wflag = 1;
   \   340F  CD1D34            CALL    ?1066
   \   3412  DD77CC            LD      (IX-52),A
   \   3415            ?0855:
   \   3415            ?0830:
   \   3415            ?0822:
   3283                                          res = sync(dj.fs);
   3284                                  }
   3285                          }
   3286                          FREE_BUF();
   3287                  }
   3288          
   \   3415  DD7ECC            LD      A,(IX-52)
   3289                  LEAVE_FF(dj.fs, res);
   \   3418  FDE1              POP     IY
   \   341A  C30000            JP      ?LEAVE_DIRECT_L09
   \   341D            ?1066:
   \   341D  210500            LD      HL,5
   \   3420  DD4EDE            LD      C,(IX-34)
   \   3423  DD46DF            LD      B,(IX-33)
   \   3426  09                ADD     HL,BC
   \   3427  3601              LD      (HL),1
   \   3429  DD5EDE            LD      E,(IX-34)
   \   342C  DD56DF            LD      D,(IX-33)
   \   342F  C35301            JP      sync
   3290          }
   3291          
   3292          
   3293          
   3294          
   3295          /*-----------------------------------------------------------------------*/
   3296          /* Change Attribute                                                      */
   3297          /*-----------------------------------------------------------------------*/
   3298          
   3299          FRESULT f_chmod (
   3300                  const TCHAR *path,      /* Pointer to the file path */
   3301                  BYTE value,                     /* Attribute bits */
   3302                  BYTE mask                       /* Attribute mask to change */
   3303          )
   \   3432            f_chmod:
   \   3432  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   3435  DCFF              DEFW    -36
   \   3437  FDE5              PUSH    IY
   3304          {
   3305                  FRESULT res;
   3306                  DIR dj;
   3307                  BYTE *dir;
   3308                  DEF_NAMEBUF;
   3309          
   3310          
   \   3439  1E01              LD      E,1
   \   343B  D5                PUSH    DE
   \   343C  210600            LD      HL,6
   \   343F  39                ADD     HL,SP
   \   3440  4D                LD      C,L
   \   3441  44                LD      B,H
   \   3442  212A00            LD      HL,42
   \   3445  39                ADD     HL,SP
   \   3446  CD221E            CALL    ?1060
   \   3449  E1                POP     HL
   \   344A  DD77DC            LD      (IX-36),A
   3311                  res = chk_mounted(&path, &dj.fs, 1);
   \   344D  B7                OR      A
   \   344E  2065              JR      NZ,?0866
   \   3450            ?0856:
   3312                  if (res == FR_OK) {
   \   3450  211A00            LD      HL,26
   \   3453  39                ADD     HL,SP
   \   3454  DD75F2            LD      (IX-14),L
   \   3457  DD74F3            LD      (IX-13),H
   3313                          INIT_BUF(dj);
   \   345A  DD4E02            LD      C,(IX+2)
   \   345D  DD4603            LD      B,(IX+3)
   \   3460  210400            LD      HL,4
   \   3463  39                ADD     HL,SP
   \   3464  CDBD34            CALL    ?1061
   3314                          res = follow_path(&dj, path);           /* Follow the file path */
   3315                          FREE_BUF();
   \   3467  2012              JR      NZ,?0859
   \   3469  DD6EF2            LD      L,(IX-14)
   \   346C  DD66F3            LD      H,(IX-13)
   \   346F  010B00            LD      BC,11
   \   3472  09                ADD     HL,BC
   \   3473  CB6E              BIT     5,(HL)
   \   3475  2804              JR      Z,?0859
   \   3477            ?0861:
   \   3477            ?0860:
   \   3477            ?0858:
   3316                          if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   \   3477  DD36DC06          LD      (IX-36),6
   \   347B            ?0859:
   3317                                  res = FR_INVALID_NAME;
   \   347B  AF                XOR     A
   \   347C  DDB6DC            OR      (IX-36)
   \   347F  2034              JR      NZ,?0866
   \   3481            ?0862:
   3318                          if (res == FR_OK) {
   \   3481  DD6EF0            LD      L,(IX-16)
   \   3484  DD66F1            LD      H,(IX-15)
   \   3487  E5                PUSH    HL
   \   3488  FDE1              POP     IY
   3319                                  dir = dj.dir;
   \   348A  FD7D              LD      A,IYL
   \   348C  FDB4              OR      IYH
   \   348E  2006              JR      NZ,?0865
   \   3490            ?0864:
   3320                                  if (!dir) {                                             /* Is it a root directory? */
   \   3490  DD36DC06          LD      (IX-36),6
   3321                                          res = FR_INVALID_NAME;
   \   3494  181F              JR      ?0866
   \   3496            ?0865:
   3322                                  } else {                                                /* File or sub directory */
   \   3496  DD7E08            LD      A,(IX+8)
   \   3499  E627              AND     39
   \   349B  DD7708            LD      (IX+8),A
   3323                                          mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;    /* Valid attribute mask */
   \   349E  DDA604            AND     (IX+4)
   \   34A1  F5                PUSH    AF
   \   34A2  DD7E08            LD      A,(IX+8)
   \   34A5  2F                CPL
   \   34A6  FDA60B            AND     (IY+11)
   \   34A9  47                LD      B,A
   \   34AA  F1                POP     AF
   \   34AB  B0                OR      B
   \   34AC  FD770B            LD      (IY+11),A
   3324                                          dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask); /* Apply attribute change */
   3325                                          dj.fs->wflag = 1;
   \   34AF  CD1D34            CALL    ?1066
   \   34B2  DD77DC            LD      (IX-36),A
   \   34B5            ?0866:
   \   34B5            ?0863:
   \   34B5            ?0857:
   3326                                          res = sync(dj.fs);
   3327                                  }
   3328                          }
   3329                  }
   3330          
   \   34B5  DD7EDC            LD      A,(IX-36)
   3331                  LEAVE_FF(dj.fs, res);
   \   34B8  FDE1              POP     IY
   \   34BA  C30000            JP      ?LEAVE_DIRECT_L09
   \   34BD            ?1061:
   \   34BD  EB                EX      DE,HL
   \   34BE  CD9513            CALL    follow_path
   \   34C1  DD77DC            LD      (IX-36),A
   \   34C4  AF                XOR     A
   \   34C5  DDB6DC            OR      (IX-36)
   \   34C8  C9                RET
   3332          }
   3333          
   3334          
   3335          
   3336          
   3337          /*-----------------------------------------------------------------------*/
   3338          /* Change Timestamp                                                      */
   3339          /*-----------------------------------------------------------------------*/
   3340          
   3341          FRESULT f_utime (
   3342                  const TCHAR *path,      /* Pointer to the file/directory name */
   3343                  const FILINFO *fno      /* Pointer to the time stamp to be set */
   3344          )
   \   34C9            f_utime:
   \   34C9  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   34CC  DCFF              DEFW    -36
   \   34CE  FDE5              PUSH    IY
   \   34D0  D9                EXX
   \   34D1  C5                PUSH    BC
   \   34D2  D9                EXX
   \   34D3  C5                PUSH    BC
   \   34D4  FDE1              POP     IY
   3345          {
   3346                  FRESULT res;
   3347                  DIR dj;
   3348                  BYTE *dir;
   3349                  DEF_NAMEBUF;
   3350          
   3351          
   \   34D6  0E01              LD      C,1
   \   34D8  C5                PUSH    BC
   \   34D9  210800            LD      HL,8
   \   34DC  39                ADD     HL,SP
   \   34DD  4D                LD      C,L
   \   34DE  44                LD      B,H
   \   34DF  212C00            LD      HL,44
   \   34E2  39                ADD     HL,SP
   \   34E3  CD221E            CALL    ?1060
   \   34E6  E1                POP     HL
   \   34E7  DD77DC            LD      (IX-36),A
   3352                  res = chk_mounted(&path, &dj.fs, 1);
   \   34EA  B7                OR      A
   \   34EB  2067              JR      NZ,?0877
   \   34ED            ?0867:
   3353                  if (res == FR_OK) {
   \   34ED  211C00            LD      HL,28
   \   34F0  39                ADD     HL,SP
   \   34F1  DD75F2            LD      (IX-14),L
   \   34F4  DD74F3            LD      (IX-13),H
   3354                          INIT_BUF(dj);
   \   34F7  DD4E02            LD      C,(IX+2)
   \   34FA  DD4603            LD      B,(IX+3)
   \   34FD  210600            LD      HL,6
   \   3500  39                ADD     HL,SP
   \   3501  CDBD34            CALL    ?1061
   3355                          res = follow_path(&dj, path);   /* Follow the file path */
   3356                          FREE_BUF();
   \   3504  2012              JR      NZ,?0870
   \   3506  DD6EF2            LD      L,(IX-14)
   \   3509  DD66F3            LD      H,(IX-13)
   \   350C  010B00            LD      BC,11
   \   350F  09                ADD     HL,BC
   \   3510  CB6E              BIT     5,(HL)
   \   3512  2804              JR      Z,?0870
   \   3514            ?0872:
   \   3514            ?0871:
   \   3514            ?0869:
   3357                          if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   \   3514  DD36DC06          LD      (IX-36),6
   \   3518            ?0870:
   3358                                  res = FR_INVALID_NAME;
   \   3518  AF                XOR     A
   \   3519  DDB6DC            OR      (IX-36)
   \   351C  2036              JR      NZ,?0877
   \   351E            ?0873:
   3359                          if (res == FR_OK) {
   \   351E  D9                EXX
   \   351F  DD4EF0            LD      C,(IX-16)
   \   3522  79                LD      A,C
   \   3523  DD46F1            LD      B,(IX-15)
   3360                                  dir = dj.dir;
   \   3526  B0                OR      B
   \   3527  D9                EXX
   \   3528  2006              JR      NZ,?0876
   \   352A            ?0875:
   3361                                  if (!dir) {                                     /* Root directory */
   \   352A  DD36DC06          LD      (IX-36),6
   3362                                          res = FR_INVALID_NAME;
   \   352E  1824              JR      ?0877
   \   3530            ?0876:
   3363                                  } else {                                        /* File or sub-directory */
   \   3530  211600            LD      HL,22
   \   3533  D9                EXX
   \   3534  C5                PUSH    BC
   \   3535  D9                EXX
   \   3536  C1                POP     BC
   \   3537  09                ADD     HL,BC
   \   3538  FD5E06            LD      E,(IY+6)
   \   353B  73                LD      (HL),E
   \   353C  FD5607            LD      D,(IY+7)
   \   353F  23                INC     HL
   \   3540  72                LD      (HL),D
   3364                                          ST_WORD(dir+DIR_WrtTime, fno->ftime);
   \   3541  211800            LD      HL,24
   \   3544  09                ADD     HL,BC
   \   3545  FD4E04            LD      C,(IY+4)
   \   3548  71                LD      (HL),C
   \   3549  FD4605            LD      B,(IY+5)
   \   354C  23                INC     HL
   \   354D  70                LD      (HL),B
   3365                                          ST_WORD(dir+DIR_WrtDate, fno->fdate);
   3366                                          dj.fs->wflag = 1;
   \   354E  CD1D34            CALL    ?1066
   \   3551  DD77DC            LD      (IX-36),A
   \   3554            ?0877:
   \   3554            ?0874:
   \   3554            ?0868:
   3367                                          res = sync(dj.fs);
   3368                                  }
   3369                          }
   3370                  }
   3371          
   \   3554  DD7EDC            LD      A,(IX-36)
   3372                  LEAVE_FF(dj.fs, res);
   \   3557  C3970E            JP      ?0190
   3373          }
   3374          
   3375          
   3376          
   3377          
   3378          /*-----------------------------------------------------------------------*/
   3379          /* Rename File/Directory                                                 */
   3380          /*-----------------------------------------------------------------------*/
   3381          
   3382          FRESULT f_rename (
   3383                  const TCHAR *path_old,  /* Pointer to the old name */
   3384                  const TCHAR *path_new   /* Pointer to the new name */
   3385          )
   \   355A            f_rename:
   \   355A  CD0000            CALL    ?ENT_AUTO_DIRECT_L09
   \   355D  ACFF              DEFW    65452
   \   355F  FDE5              PUSH    IY
   3386          {
   3387                  FRESULT res;
   3388                  DIR djo, djn;
   3389                  BYTE buf[21], *dir;
   3390                  DWORD dw;
   3391                  DEF_NAMEBUF;
   3392          
   3393          
   \   3561  1E01              LD      E,1
   \   3563  D5                PUSH    DE
   \   3564  212000            LD      HL,32
   \   3567  39                ADD     HL,SP
   \   3568  4D                LD      C,L
   \   3569  44                LD      B,H
   \   356A  215A00            LD      HL,90
   \   356D  39                ADD     HL,SP
   \   356E  CD221E            CALL    ?1060
   \   3571  E1                POP     HL
   \   3572  DD77AC            LD      (IX-84),A
   3394                  res = chk_mounted(&path_old, &djo.fs, 1);
   \   3575  B7                OR      A
   \   3576  C24337            JP      NZ,?0915
   \   3579            ?0878:
   3395                  if (res == FR_OK) {
   \   3579  DD6EC8            LD      L,(IX-56)
   \   357C  DD66C9            LD      H,(IX-55)
   \   357F  DD75B2            LD      (IX-78),L
   \   3582  DD74B3            LD      (IX-77),H
   3396                          djn.fs = djo.fs;
   \   3585  214A00            LD      HL,74
   \   3588  39                ADD     HL,SP
   \   3589  DD75DC            LD      (IX-36),L
   \   358C  DD74DD            LD      (IX-35),H
   3397                          INIT_BUF(djo);
   \   358F  DD4E02            LD      C,(IX+2)
   \   3592  DD4603            LD      B,(IX+3)
   \   3595  211E00            LD      HL,30
   \   3598  39                ADD     HL,SP
   \   3599  EB                EX      DE,HL
   \   359A  CD9513            CALL    follow_path
   \   359D  DD77AC            LD      (IX-84),A
   3398                          res = follow_path(&djo, path_old);              /* Check old object */
   \   35A0  AF                XOR     A
   \   35A1  DDB6AC            OR      (IX-84)
   \   35A4  2012              JR      NZ,?0881
   \   35A6  DD6EDC            LD      L,(IX-36)
   \   35A9  DD66DD            LD      H,(IX-35)
   \   35AC  010B00            LD      BC,11
   \   35AF  09                ADD     HL,BC
   \   35B0  CB6E              BIT     5,(HL)
   \   35B2  2804              JR      Z,?0881
   \   35B4            ?0883:
   \   35B4            ?0882:
   \   35B4            ?0880:
   3399                          if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
   \   35B4  DD36AC06          LD      (IX-84),6
   \   35B8            ?0881:
   3400                                  res = FR_INVALID_NAME;
   3401          #if _FS_SHARE
   3403          #endif
   \   35B8  AF                XOR     A
   \   35B9  DDB6AC            OR      (IX-84)
   \   35BC  C24337            JP      NZ,?0915
   \   35BF            ?0884:
   3404                          if (res == FR_OK) {                                             /* Old object is found */
   \   35BF  DD7EDA            LD      A,(IX-38)
   \   35C2  DD66DB            LD      H,(IX-37)
   \   35C5  B4                OR      H
   \   35C6  2007              JR      NZ,?0887
   \   35C8            ?0886:
   3405                                  if (!djo.dir) {                                         /* Is root dir? */
   \   35C8  DD36AC04          LD      (IX-84),4
   3406                                          res = FR_NO_FILE;
   \   35CC  C34337            JP      ?0915
   \   35CF            ?0887:
   3407                                  } else {
   \   35CF  011500            LD      BC,21
   \   35D2  213400            LD      HL,52
   \   35D5  39                ADD     HL,SP
   \   35D6  EB                EX      DE,HL
   \   35D7  DD6EDA            LD      L,(IX-38)
   \   35DA  DD66DB            LD      H,(IX-37)
   \   35DD  0E0B              LD      C,11
   \   35DF  09                ADD     HL,BC
   \   35E0  0E15              LD      C,21
   \   35E2  EDB0              LDIR
   3408                                          memcpy(buf, djo.dir+DIR_Attr, 21);              /* Save the object information except for name */
   \   35E4  0E16              LD      C,22
   \   35E6  210800            LD      HL,8
   \   35E9  39                ADD     HL,SP
   \   35EA  EB                EX      DE,HL
   \   35EB  211E00            LD      HL,30
   \   35EE  39                ADD     HL,SP
   \   35EF  EDB0              LDIR
   3409                                          memcpy(&djn, &djo, sizeof(DIR));                /* Check new object */
   \   35F1  DD4E04            LD      C,(IX+4)
   \   35F4  DD4605            LD      B,(IX+5)
   \   35F7  210800            LD      HL,8
   \   35FA  39                ADD     HL,SP
   \   35FB  EB                EX      DE,HL
   \   35FC  CD9513            CALL    follow_path
   \   35FF  DD77AC            LD      (IX-84),A
   3410                                          res = follow_path(&djn, path_new);
   \   3602  B7                OR      A
   \   3603  2004              JR      NZ,?0890
   \   3605            ?0889:
   \   3605  DD36AC08          LD      (IX-84),8
   \   3609            ?0890:
   3411                                          if (res == FR_OK) res = FR_EXIST;               /* The new object name is already existing */
   \   3609  DD7EAC            LD      A,(IX-84)
   \   360C  FE04              CP      4
   \   360E  C24337            JP      NZ,?0915
   \   3611            ?0891:
   3412                                          if (res == FR_NO_FILE) {                                /* Is it a valid path and no name collision? */
   3413          /* Start critical section that any interruption or error can cause cross-link */
   \   3611  210800            LD      HL,8
   \   3614  39                ADD     HL,SP
   \   3615  EB                EX      DE,HL
   \   3616  CDAE0F            CALL    dir_register
   \   3619  DD77AC            LD      (IX-84),A
   3414                                                  res = dir_register(&djn);                       /* Register the new entry */
   \   361C  B7                OR      A
   \   361D  C24337            JP      NZ,?0915
   \   3620            ?0893:
   3415                                                  if (res == FR_OK) {
   \   3620  DD6EC4            LD      L,(IX-60)
   \   3623  DD66C5            LD      H,(IX-59)
   \   3626  E5                PUSH    HL
   \   3627  FDE1              POP     IY
   3416                                                          dir = djn.dir;                                  /* Copy object information except for name */
   \   3629  011300            LD      BC,19
   \   362C  210D00            LD      HL,13
   \   362F  FDE5              PUSH    IY
   \   3631  D1                POP     DE
   \   3632  19                ADD     HL,DE
   \   3633  EB                EX      DE,HL
   \   3634  213400            LD      HL,52
   \   3637  39                ADD     HL,SP
   \   3638  0E02              LD      C,2
   \   363A  09                ADD     HL,BC
   \   363B  0E13              LD      C,19
   \   363D  EDB0              LDIR
   3417                                                          memcpy(dir+13, buf+2, 19);
   \   363F  DD46DE            LD      B,(IX-34)
   \   3642  CBE8              SET     5,B
   \   3644  FD700B            LD      (IY+11),B
   3418                                                          dir[DIR_Attr] = buf[0] | AM_ARC;
   \   3647  210500            LD      HL,5
   \   364A  DD4EC8            LD      C,(IX-56)
   \   364D  DD46C9            LD      B,(IX-55)
   \   3650  09                ADD     HL,BC
   \   3651  3601              LD      (HL),1
   3419                                                          djo.fs->wflag = 1;
   \   3653  DD6ECE            LD      L,(IX-50)
   \   3656  DD66CF            LD      H,(IX-49)
   \   3659  DD4EB8            LD      C,(IX-72)
   \   365C  DD46B9            LD      B,(IX-71)
   \   365F  A7                AND     A
   \   3660  ED42              SBC     HL,BC
   \   3662  2011              JR      NZ,?1023
   \   3664  DD6ED0            LD      L,(IX-48)
   \   3667  DD66D1            LD      H,(IX-47)
   \   366A  DD4EBA            LD      C,(IX-70)
   \   366D  DD46BB            LD      B,(IX-69)
   \   3670  ED42              SBC     HL,BC
   \   3672  CA2337            JP      Z,?0903
   \   3675            ?1023:
   \   3675  FDCB0B66          BIT     4,(IY+11)
   \   3679  CA2337            JP      Z,?0903
   \   367C            ?0898:
   \   367C            ?0897:
   \   367C            ?0895:
   3420                                                          if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {             /* Update .. entry in the directory if needed */
   \   367C  FDE5              PUSH    IY
   \   367E  D1                POP     DE
   \   367F  CD0000            CALL    LD_CLUST
   \   3682  C5                PUSH    BC
   \   3683  E5                PUSH    HL
   \   3684  DD5EB2            LD      E,(IX-78)
   \   3687  DD56B3            LD      D,(IX-77)
   \   368A  CD3902            CALL    clust2sect
   \   368D  F1                POP     AF
   \   368E  F1                POP     AF
   3421                                                                  dw = clust2sect(djn.fs, LD_CLUST(dir));
   \   368F  7D                LD      A,L
   \   3690  B4                OR      H
   \   3691  B1                OR      C
   \   3692  B0                OR      B
   \   3693  2007              JR      NZ,?0900
   \   3695            ?0899:
   3422                                                                  if (!dw) {
   \   3695  DD36AC02          LD      (IX-84),2
   3423                                                                          res = FR_INT_ERR;
   \   3699  C32337            JP      ?0903
   \   369C            ?0900:
   3424                                                                  } else {
   \   369C  C5                PUSH    BC
   \   369D  E5                PUSH    HL
   \   369E  DD5EB2            LD      E,(IX-78)
   \   36A1  DD56B3            LD      D,(IX-77)
   \   36A4  CD0000            CALL    move_window
   \   36A7  E1                POP     HL
   \   36A8  E1                POP     HL
   \   36A9  DD77AC            LD      (IX-84),A
   3425                                                                          res = move_window(djn.fs, dw);
   \   36AC  213300            LD      HL,51
   \   36AF  DD4EB2            LD      C,(IX-78)
   \   36B2  DD46B3            LD      B,(IX-77)
   \   36B5  09                ADD     HL,BC
   \   36B6  012000            LD      BC,32
   \   36B9  09                ADD     HL,BC
   \   36BA  E5                PUSH    HL
   \   36BB  FDE1              POP     IY
   3426                                                                          dir = djn.fs->win+SZ_DIR;       /* .. entry */
   \   36BD  B7                OR      A
   \   36BE  2063              JR      NZ,?0903
   \   36C0  FD7E01            LD      A,(IY+1)
   \   36C3  FE2E              CP      46
   \   36C5  205C              JR      NZ,?0903
   \   36C7            ?0905:
   \   36C7            ?0904:
   \   36C7            ?0902:
   3427                                                                          if (res == FR_OK && dir[1] == '.') {
   \   36C7  DD6EB2            LD      L,(IX-78)
   \   36CA  DD66B3            LD      H,(IX-77)
   \   36CD  7E                LD      A,(HL)
   \   36CE  FE03              CP      3
   \   36D0  202D              JR      NZ,?0909
   \   36D2  212700            LD      HL,39
   \   36D5  DD4EB2            LD      C,(IX-78)
   \   36D8  DD46B3            LD      B,(IX-77)
   \   36DB  09                ADD     HL,BC
   \   36DC  4E                LD      C,(HL)
   \   36DD  23                INC     HL
   \   36DE  46                LD      B,(HL)
   \   36DF  23                INC     HL
   \   36E0  5E                LD      E,(HL)
   \   36E1  23                INC     HL
   \   36E2  56                LD      D,(HL)
   \   36E3  69                LD      L,C
   \   36E4  60                LD      H,B
   \   36E5  DD4EB8            LD      C,(IX-72)
   \   36E8  DD46B9            LD      B,(IX-71)
   \   36EB  A7                AND     A
   \   36EC  ED42              SBC     HL,BC
   \   36EE  200F              JR      NZ,?0909
   \   36F0  EB                EX      DE,HL
   \   36F1  DD4EBA            LD      C,(IX-70)
   \   36F4  DD46BB            LD      B,(IX-69)
   \   36F7  ED42              SBC     HL,BC
   \   36F9  2004              JR      NZ,?0909
   \   36FB  4D                LD      C,L
   \   36FC  44                LD      B,H
   \   36FD  180C              JR      ?0910
   \   36FF            ?0909:
   \   36FF  210E00            LD      HL,14
   \   3702  39                ADD     HL,SP
   \   3703  5E                LD      E,(HL)
   \   3704  23                INC     HL
   \   3705  56                LD      D,(HL)
   \   3706  23                INC     HL
   \   3707  4E                LD      C,(HL)
   \   3708  23                INC     HL
   \   3709  46                LD      B,(HL)
   \   370A  EB                EX      DE,HL
   \   370B            ?0910:
   3428                                                                                  dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
   \   370B  FD751A            LD      (IY+26),L
   \   370E  FD741B            LD      (IY+27),H
   \   3711  FD7114            LD      (IY+20),C
   \   3714  FD7015            LD      (IY+21),B
   3429                                                                                  ST_CLUST(dir, dw);
   \   3717  210500            LD      HL,5
   \   371A  DD4EB2            LD      C,(IX-78)
   \   371D  DD46B3            LD      B,(IX-77)
   \   3720  09                ADD     HL,BC
   \   3721  3601              LD      (HL),1
   \   3723            ?0903:
   \   3723            ?0901:
   \   3723            ?0896:
   3430                                                                                  djn.fs->wflag = 1;
   3431                                                                          }
   3432                                                                  }
   3433                                                          }
   \   3723  AF                XOR     A
   \   3724  DDB6AC            OR      (IX-84)
   \   3727  201A              JR      NZ,?0915
   \   3729            ?0912:
   3434                                                          if (res == FR_OK) {
   \   3729  211E00            LD      HL,30
   \   372C  39                ADD     HL,SP
   \   372D  EB                EX      DE,HL
   \   372E  CD3810            CALL    dir_remove
   \   3731  DD77AC            LD      (IX-84),A
   3435                                                                  res = dir_remove(&djo);         /* Remove old entry */
   \   3734  B7                OR      A
   \   3735  200C              JR      NZ,?0915
   \   3737            ?0914:
   3436                                                                  if (res == FR_OK)
   \   3737  DD5EC8            LD      E,(IX-56)
   \   373A  DD56C9            LD      D,(IX-55)
   \   373D  CD5301            CALL    sync
   \   3740  DD77AC            LD      (IX-84),A
   \   3743            ?0915:
   \   3743            ?0913:
   \   3743            ?0894:
   \   3743            ?0892:
   \   3743            ?0888:
   \   3743            ?0885:
   \   3743            ?0879:
   3437                                                                          res = sync(djo.fs);
   3438                                                          }
   3439                                                  }
   3440          /* End critical section */
   3441                                          }
   3442                                  }
   3443                          }
   3444                          FREE_BUF();
   3445                  }
   \   3743  DD7EAC            LD      A,(IX-84)
   3446                  LEAVE_FF(djo.fs, res);
   \   3746  FDE1              POP     IY
   \   3748  C30000            JP      ?LEAVE_DIRECT_L09
   3447          }
   3448          
   3449          #endif /* !_FS_READONLY */
   3450          #endif /* _FS_MINIMIZE == 0 */
   3451          #endif /* _FS_MINIMIZE <= 1 */
   3452          #endif /* _FS_MINIMIZE <= 2 */
   3453          
   3454          
   3455          
   3456          /*-----------------------------------------------------------------------*/
   3457          /* Forward data to the stream directly (available on only tiny cfg)      */
   3458          /*-----------------------------------------------------------------------*/
   3459          #if _USE_FORWARD && _FS_TINY
   3512          #endif /* _USE_FORWARD */
   3513          
   3514          
   3515          
   3516          #if _USE_MKFS && !_FS_READONLY
   3552          #if _MAX_SS != 512                                      /* Get disk sector size */
   3555          #endif
   3711          #if _USE_ERASE  /* Erase data area if needed */
   3718          #endif
   3734          #endif /* _USE_MKFS && !_FS_READONLY */
   3735          
   3736          
   3737          
   3738          
   3739          #if _USE_STRFUNC
   3759          #if _LFN_UNICODE                                        /* Read a character in UTF-8 encoding */
   3778          #endif
   3779          #if _USE_STRFUNC >= 2
   3781          #endif
   3792          #if !_FS_READONLY
   3806          #if _USE_STRFUNC >= 2
   3808          #endif
   3810          #if _LFN_UNICODE        /* Write the character in UTF-8 encoding */
   3826          #else                           /* Write the character without conversion */
   3829          #endif
   3953          #endif /* !_FS_READONLY */
   3954          #endif /* _USE_STRFUNC */
   \   0000                    RSEG    CSTR
   \   0000            ?0289:
   \   0000  222A2B2C          DEFB    '"*+,:;<=>?[]|'
   \   0004  3A3B3C3D
   \   0008  3E3F5B5D
   \   000C  7C
   \   000D  7F00              DEFB    127,0
   \   000F                    END

Errors: none
Warnings: none
Code size: 14155
Constant size: 15
Static variable size: Data(0) Iram(0)

